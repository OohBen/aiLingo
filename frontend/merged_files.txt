### /home/oohben/aiLingo/frontend/ailingo/.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


### /home/oohben/aiLingo/frontend/ailingo/package.json ###
{
  "name": "ailingo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.6.8",
    "next": "14.2.2",
    "next-auth": "^4.24.7",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.2",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


### /home/oohben/aiLingo/frontend/ailingo/README.md ###
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.


### /home/oohben/aiLingo/frontend/ailingo/tsconfig.json ###
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


### /home/oohben/aiLingo/frontend/ailingo/tailwind.config.ts ###
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};
export default config;


### /home/oohben/aiLingo/frontend/ailingo/postcss.config.mjs ###
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


### /home/oohben/aiLingo/frontend/ailingo/next.config.mjs ###
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;


### /home/oohben/aiLingo/frontend/ailingo/.eslintrc.json ###
{
  "extends": "next/core-web-vitals"
}


### /home/oohben/aiLingo/frontend/ailingo/next-env.d.ts ###
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


### /home/oohben/aiLingo/frontend/ailingo/.env ###
NEXT_PUBLIC_API_BASE_URL=https://localhost:8000/api

### /home/oohben/aiLingo/frontend/ailingo/src/types/quiz.ts ###
export interface Question {
    id: number;
    text: string;
    options: string[];
    correctAnswer: string;
  }
  
  export interface Quiz {
    id: number;
    title: string;
    description: string;
    questions: Question[];
  }

### /home/oohben/aiLingo/frontend/ailingo/src/types/language.ts ###
export interface Language {
    id: number;
    name: string;
    description: string;
  }

### /home/oohben/aiLingo/frontend/ailingo/src/types/analytics.ts ###
export interface Analytics {
    [key: string]: number;
  }

### /home/oohben/aiLingo/frontend/ailingo/src/types/lesson.ts ###
export interface Lesson {
    id: number;
    title: string;
    description: string;
    content: string;
  }

### /home/oohben/aiLingo/frontend/ailingo/src/types/index.ts ###
export * from './language';
export * from './lesson';
export * from './quiz';
export * from './analytics';

### /home/oohben/aiLingo/frontend/ailingo/src/lib/api.ts ###
import axios from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true,
});

export const login = async (email: string, password: string) => {
  try {
    const response = await axiosInstance.post('/users/login/', { email, password });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const registerUser = async (name: string, email: string, password: string) => {
  try {
    const response = await axiosInstance.post('/users/register/', { name, email, password });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getUserDetails = async (email: string) => {
  try {
    const response = await axiosInstance.get(`/users/profile/`, {
      params: { email },
    });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getLanguages = async () => {
  try {
    const response = await axiosInstance.get('/languages/');
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getLessons = async () => {
  try {
    const response = await axiosInstance.get('/lessons/');
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getQuizzes = async () => {
  try {
    const response = await axiosInstance.get('/quizzes/');
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getQuizById = async (id: string) => {
  try {
    const response = await axiosInstance.get(`/quizzes/${id}/`);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const createQuiz = async (title: string, description: string) => {
  try {
    const response = await axiosInstance.post('/quizzes/', { title, description });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const getUserAnalytics = async (email: string) => {
  try {
    const response = await axiosInstance.get(`/analytics/user-analytics/`, {
      params: { email },
    });
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

### /home/oohben/aiLingo/frontend/ailingo/src/lib/auth.ts ###
import NextAuth, { NextAuthOptions } from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';
import { login } from './api';

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error('Invalid credentials');
        }

        const user = await login(credentials.email, credentials.password);

        if (user) {
          return user;
        } else {
          throw new Error('Invalid email or password');
        }
      },
    }),
  ],
  pages: {
    signIn: '/login',
  },
  session: {
    strategy: 'jwt',
  },
};

export default NextAuth(authOptions);

### /home/oohben/aiLingo/frontend/ailingo/src/app/globals.css ###
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}


### /home/oohben/aiLingo/frontend/ailingo/src/app/layout.tsx ###
import { Navigation } from '../components/Navigation';
import '../styles/globals.css';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <Navigation />
        <main>{children}</main>
      </body>
    </html>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/page.tsx ###
import Link from 'next/link';
import styles from '../styles/Home.module.css';

export default function Home() {
  return (
    <div>
      <h1>Welcome to aiLingo</h1>
      <p>Learn languages with AI-powered lessons and quizzes.</p>
      <Link href="/register">
        <button>Get Started</button>
      </Link>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/login/page.tsx ###
'use client';

import { signIn } from 'next-auth/react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const result = await signIn('credentials', {
        redirect: false,
        email,
        password,
      });

      if (result?.error) {
        setError(result.error);
      } else {
        router.push('/dashboard');
      }
    } catch (error) {
      setError('An error occurred during login. Please try again.');
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">Login</button>
      </form>
      <p>
        Don't have an account? <Link href="/register">Register</Link>
      </p>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/dashboard/page.tsx ###
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../lib/auth';
import { getUserDetails } from '../../lib/api';

export default async function Dashboard() {
  const session = await getServerSession(authOptions);

  if (!session) {
    return <div>Access Denied</div>;
  }

  const user = await getUserDetails(session.user.email);

  return (
    <div>
      <h1>Dashboard</h1>
      <p>Welcome, {user.name}!</p>
      {/* Add more dashboard content */}
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/lessons/page.tsx ###
import { getLessons } from '../../lib/api';
import { LessonList } from '../../components/LessonList';

export default async function Lessons() {
  const lessons = await getLessons();

  return (
    <div>
      <h1>Lessons</h1>
      <LessonList lessons={lessons} />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/profile/page.tsx ###
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../lib/auth';
import { getUserDetails } from '../../lib/api';

export default async function Profile() {
  const session = await getServerSession(authOptions);

  if (!session) {
    return <div>Access Denied</div>;
  }

  const user = await getUserDetails(session.user.email);

  return (
    <div>
      <h1>Profile</h1>
      <p>Name: {user.name}</p>
      <p>Email: {user.email}</p>
      {/* Add more profile information */}
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/analytics/page.tsx ###
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../lib/auth';
import { getUserAnalytics } from '../../lib/api';
import { AnalyticsChart } from '../../components/AnalyticsChart';

export default async function Analytics() {
  const session = await getServerSession(authOptions);

  if (!session) {
    return <div>Access Denied</div>;
  }

  const analytics = await getUserAnalytics(session.user.email);

  return (
    <div>
      <h1>Analytics</h1>
      <AnalyticsChart data={analytics} />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/chat/page.tsx ###
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../../lib/auth';
import { ChatInterface } from '../../components/ChatInterface';

export default async function Chat() {
  const session = await getServerSession(authOptions);

  if (!session) {
    return <div>Access Denied</div>;
  }

  return (
    <div>
      <h1>Chat</h1>
      <ChatInterface />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/quizzes/page.tsx ###
import { getQuizzes } from '../../lib/api';
import { QuizList } from '../../components/QuizList';

export default async function Quizzes() {
  const quizzes = await getQuizzes();

  return (
    <div>
      <h1>Quizzes</h1>
      <QuizList quizzes={quizzes} />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/quizzes/create/page.tsx ###
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createQuiz } from '../../../lib/api';

export default function CreateQuiz() {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      await createQuiz({ title, description });
      router.push('/quizzes');
    } catch (error) {
      setError('An error occurred while creating the quiz. Please try again.');
    }
  };

  return (
    <div>
      <h1>Create Quiz</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="title">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            name="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          ></textarea>
        </div>
        <button type="submit">Create</button>
      </form>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/quizzes/[id]/page.tsx ###
import { getQuizById } from '../../../lib/api';
import { QuizAttempt } from '../../../components/QuizAttempt';

export default async function QuizPage({ params }: { params: { id: string } }) {
  const quiz = await getQuizById(params.id);

  return (
    <div>
      <h1>{quiz.title}</h1>
      <QuizAttempt quiz={quiz} />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/languages/page.tsx ###
import { getLanguages } from '../../lib/api';
import { LanguageList } from '../../components/LanguageList';

export default async function Languages() {
  const languages = await getLanguages();

  return (
    <div>
      <h1>Languages</h1>
      <LanguageList languages={languages} />
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/app/register/page.tsx ###
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { registerUser } from '../../lib/api';

export default function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      await registerUser({ name, email, password });
      router.push('/login');
    } catch (error) {
      setError('An error occurred during registration. Please try again.');
    }
  };

  return (
    <div>
      <h1>Register</h1>
      {error && <p className="text-red-500">{error}</p>}
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">Register</button>
      </form>
      <p>
        Already have an account? <Link href="/login">Login</Link>
      </p>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/LessonList.tsx ###
import { Lesson } from '../types';

type LessonListProps = {
  lessons: Lesson[];
};

export function LessonList({ lessons }: LessonListProps) {
  return (
    <div className="space-y-4">
      {lessons.map((lesson) => (
        <div key={lesson.id} className="bg-white shadow-md rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-2">{lesson.title}</h2>
          <p className="text-gray-600">{lesson.description}</p>
        </div>
      ))}
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/QuizAttempt.tsx ###
import { Quiz, Question } from '../types';
import { useState } from 'react';

type QuizAttemptProps = {
  quiz: Quiz;
};

export function QuizAttempt({ quiz }: QuizAttemptProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);

  const handleAnswerSelect = (answer: string) => {
    setSelectedAnswer(answer);
  };

  const handleSubmit = () => {
    if (selectedAnswer === quiz.questions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }

    if (currentQuestion === quiz.questions.length - 1) {
      setShowResult(true);
    } else {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer('');
    }
  };

  const handleReset = () => {
    setCurrentQuestion(0);
    setSelectedAnswer('');
    setScore(0);
    setShowResult(false);
  };

  if (showResult) {
    return (
      <div className="bg-white shadow-md rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-4">Quiz Result</h2>
        <p className="mb-4">
          Your score: {score}/{quiz.questions.length}
        </p>
        <button
          onClick={handleReset}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg"
        >
          Retry Quiz
        </button>
      </div>
    );
  }

  const question = quiz.questions[currentQuestion];

  return (
    <div className="bg-white shadow-md rounded-lg p-4">
      <h2 className="text-xl font-semibold mb-4">{question.text}</h2>
      <div className="space-y-2">
        {question.options.map((option, index) => (
          <div key={index}>
            <label className="inline-flex items-center">
              <input
                type="radio"
                className="form-radio"
                name="answer"
                value={option}
                checked={selectedAnswer === option}
                onChange={() => handleAnswerSelect(option)}
              />
              <span className="ml-2">{option}</span>
            </label>
          </div>
        ))}
      </div>
      <button
        onClick={handleSubmit}
        className="mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg"
      >
        {currentQuestion === quiz.questions.length - 1 ? 'Finish' : 'Next'}
      </button>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/QuizList.tsx ###
import { Quiz } from '../types';
import Link from 'next/link';

type QuizListProps = {
  quizzes: Quiz[];
};

export function QuizList({ quizzes }: QuizListProps) {
  return (
    <div className="space-y-4">
      {quizzes.map((quiz) => (
        <div key={quiz.id} className="bg-white shadow-md rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-2">
            <Link href={`/quizzes/${quiz.id}`} className="text-blue-600 hover:underline">
              {quiz.title}
            </Link>
          </h2>
          <p className="text-gray-600">{quiz.description}</p>
        </div>
      ))}
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/AnalyticsChart.tsx ###
import { Analytics } from '../types';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

type AnalyticsChartProps = {
  data: Analytics;
};

export function AnalyticsChart({ data }: AnalyticsChartProps) {
  const chartData = {
    labels: Object.keys(data),
    datasets: [
      {
        label: 'Analytics',
        data: Object.values(data),
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        beginAtZero: tr

### /home/oohben/aiLingo/frontend/ailingo/src/components/LanguageList.tsx ###
import { Language } from '../types';

type LanguageListProps = {
  languages: Language[];
};

export function LanguageList({ languages }: LanguageListProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {languages.map((language) => (
        <div key={language.id} className="bg-white shadow-md rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-2">{language.name}</h2>
          <p className="text-gray-600">{language.description}</p>
        </div>
      ))}
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/ChatInterface.tsx ###
import { useState } from 'react';
import { sendMessage } from '../lib/api';

export function ChatInterface() {
  const [messages, setMessages] = useState<{ sender: string; content: string }[]>([]);
  const [inputMessage, setInputMessage] = useState('');

  const handleSendMessage = async () => {
    if (inputMessage.trim() !== '') {
      const newMessage = {
        sender: 'user',
        content: inputMessage,
      };

      setMessages([...messages, newMessage]);
      setInputMessage('');

      try {
        const response = await sendMessage(inputMessage);
        const botMessage = {
          sender: 'bot',
          content: response.content,
        };

        setMessages([...messages, newMessage, botMessage]);
      } catch (error) {
        console.error('Error sending message:', error);
      }
    }
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-4">
      <h2 className="text-xl font-semibold mb-4">Chat</h2>
      <div className="h-64 overflow-y-auto mb-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`mb-2 ${
              message.sender === 'user' ? 'text-right' : 'text-left'
            }`}
          >
            <span
              className={`inline-block px-3 py-2 rounded-lg ${
                message.sender === 'user'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-800'
              }`}
            >
              {message.content}
            </span>
          </div>
        ))}
      </div>
      <div className="flex">
        <input
          type="text"
          className="flex-grow border border-gray-300 rounded-lg px-4 py-2 mr-2"
          placeholder="Type your message..."
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
        />
        <button
          onClick={handleSendMessage}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg"
        >
          Send
        </button>
      </div>
    </div>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/PrivateRoute.tsx ###
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

export default function PrivateRoute({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    }
  }, [status, router]);

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  return <>{children}</>;
}

### /home/oohben/aiLingo/frontend/ailingo/src/components/Navigation.tsx ###
import Link from 'next/link';
import { useSession, signOut } from 'next-auth/react';

export function Navigation() {
  const { data: session } = useSession();

  const handleSignOut = async () => {
    await signOut();
  };

  return (
    <nav className="bg-gray-800 py-4">
      <div className="container mx-auto px-4">
        <ul className="flex space-x-4">
          <li>
            <Link href="/" className="text-white hover:text-gray-300">
              Home
            </Link>
          </li>
          {session ? (
            <>
              <li>
                <Link href="/dashboard" className="text-white hover:text-gray-300">
                  Dashboard
                </Link>
              </li>
              <li>
                <Link href="/profile" className="text-white hover:text-gray-300">
                  Profile
                </Link>
              </li>
              <li>
                <button
                  onClick={handleSignOut}
                  className="text-white hover:text-gray-300"
                >
                  Sign Out
                </button>
              </li>
            </>
          ) : (
            <>
              <li>
                <Link href="/login" className="text-white hover:text-gray-300">
                  Login
                </Link>
              </li>
              <li>
                <Link href="/register" className="text-white hover:text-gray-300">
                  Register
                </Link>
              </li>
            </>
          )}
          <li>
            <Link href="/languages" className="text-white hover:text-gray-300">
              Languages
            </Link>
          </li>
          <li>
            <Link href="/lessons" className="text-white hover:text-gray-300">
              Lessons
            </Link>
          </li>
          <li>
            <Link href="/quizzes" className="text-white hover:text-gray-300">
              Quizzes
            </Link>
          </li>
          <li>
            <Link href="/chat" className="text-white hover:text-gray-300">
              Chat
            </Link>
          </li>
          <li>
            <Link href="/analytics" className="text-white hover:text-gray-300">
              Analytics
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
}

### /home/oohben/aiLingo/frontend/ailingo/public/next.svg ###
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

### /home/oohben/aiLingo/frontend/ailingo/public/vercel.svg ###
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

