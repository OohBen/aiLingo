Proposal
Information0: Jiaying Zhu; 240465419; Junior; I have experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.

Information1: Benjamin Goihman; 204658306; Junior; I have experience in Java and Python, Java since 7th grade and Python since 9th. I have basic familiarity with Django, Flask and Fast API for Python and for Java I have some experience with Spring Boot.

Information2: Catherine Wijaya; 233190933; Junior; I have experience in coding with HTML, CSS since 9th grade, Python since 10th grade, and am currently learning Java.

Information3: Andrew Choi; 233508464; Junior; I have some experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.
aiLingo
Proposal: Language Learning Platform with AI Tutoring
Introduction:
aiLingo is an AI-driven language learning platform that provides users with customized lessons, instant feedback, and cultural immersion for learners of all proficiency levels. This program aims to counter traditional language education by embracing a more personalized experience, along with interactive and engaging lessons, allowing users to reach their linguistic potential. To generate income, the program will have an optional paid premium membership allowing access to better AI models and extra features without diminishing the quality and user experience.
Objectives:
Create an AI-driven platform that offers multiple languages and caters to language learners across all proficiency levels.
Leverage AI to provide real-time feedback on pronunciation, grammar, and vocabulary usage.
Foster cultural immersion experiences and community interaction for enhanced language learning.
Outline:
Platform:
An interactive and user-friendly website that works on both mobile and desktop.
Various learning materials, such as lessons, quizzes, and cultural immersion for each language offered.
A sharing feature for users to post their learning process and achievements to social media.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.


AI Tutoring:
Use Google Makersuite and Gemini, to create specialized and trained responses to questions, and generate helpful responses that lead the user to better understanding.


Content Creation:
Present interactive exercises, live sessions with native speakers, and opportunities for language exchange within the platform’s community.


Monetization potential:
In the future create extra features such as video creation that only premium can use.
When Gemini Ultra comes, an optional upgrade for premium users.
Expected Outcomes:
An interactive and AI-driven language learning platform offering a diverse range of languages and catering to various proficiency levels.
Positive user feedback indicating increased engagement, improved language skills, and satisfaction with the platform’s features.
A growing user base and community engagement within the platform, fostering language learning and cultural exchange.
Conclusion:
The development of aiLingo aligns with the growing demand for effective and personalized language learning solutions. It aims to provide a comprehensive and engaging experience for language learners across all proficiency levels while utilizing technology to maximize learning outcomes.

Meeting #1
determine necessary features/deliverables

Have rough draft, bullet list of features by next meetings, assign priorities
P0 - need
P1 - nice
P2 - prob not going to happen but hope
google ai studio
Delegate tasks, probably find someone to manage ppl.
Use python for the AI.
Use flask or django more for backend.
Probably react/angular for the front end.
Meetings fri 5:30pm.
What is interesting to everyone individually, what do you want to take out of it?
Open questions:
Where to make designs for our ui?



Concrete Outline:
Timeline - work backwards, set deadlines, weekly increments. 
Clear Technical Design - React folder structure, breakdown features and modules. 
P0:
An interactive website that contains at least one language with lessons and quizzes, through the AI
UI, that connects to multiple api calls.
Split this up into sections like how the chat section will work, the dash board etc. 
Basically, call backend API for data then display.
An AI tutor
You can ask them to quiz you on a language. Teach you grammar lessons.
Practice specific grammar with specific vocab. 
Keep track of mastery of a topic. And what has been covered.
All chats go through api to the backend then that goes to google api for getting the info. Return the data at once. In database store that text as a list. Then make another call so django process last chat and update dashboard.
Diagnostic test - generated by AI syllabus based on it.
Special end point which generates test that then the other AI endpoints work with.
Dashboard with analytics
Django api end point, two options either always update dashboard so quicker when you request but each chat is more heavy on server or only update dashboard when request. 
User authentication (:
Key: email and password, + forgot password OR just social media log in. Then attempt to allow both types of login.
Custom user model for future upgradeability.
Probably use JWT to keep track of login.
P1:
Use OCR/AI, to take images as input and critique you on your homework answers.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.
Sub type where you speak with someone fluent in the language you're learning and you are fluent in the language they are learning.
In those messages also add AI made translation if, what is said by user is unclear
Add filters 
Cultural Immersion
A sharing feature for users to post their learning process and achievements to social media.
Multiple languages
Extra features:
Use AI image generation, mainly for vocab. 
Takes voice input.
P2: 
Live sessions with native speakers, and opportunities for language exchange within the platform’s community.
Monetized videos

https://makersuite.google.com/app/
Django documentation goes with Django REST framework
React, probably can't get away with just doing this,React Foundations | Next.js  then learn more about nextjs and Next.js 
For learning order:
Backend:
First find a video on basic django, but like this is the core so make sure its comprehensive.
Then learn about the django rest framework, it just uses django views in a different way.
OR: watch like a mega tutorial that does both:
Build a Django REST API with the Django Rest Framework. Complete Tutorial.

Front end:
HTML - honestly probably fine dont even bother
CSS - KEY, if not it will look hideous really spend time I’m doing this CSS Crash Course for Beginners
Only then go to NextJs tutorial. 
Learn Next.js | Next.js by Vercel - The React Framework MAKE SURE to go through react foundations. Should also probably skim mozilla js for the js syntax.
Split up:
Options:
2 front end 2 back end
4 of us do it all
2 front and 1 back or 2 back and 1 front, then the other person learns all and helps both sides. Probably good but a lot of work the  person needs to learn both technologies, this or we all do everything.

Start with a broad description and then think of the product - 20%
How are you going to build it - design - 20%
Code it and test - 40%
20% - thin air
Work with https://makersuite.google.com/ test it out. 
Next Week:
Figure out spec including UI 
Begin design
Learn technologies
Prob React


Django Backend:
Name on the left is which app it is in
users Models:
User
id
email
name
profile_pic
date_joined
is_premium
UserLanguage
user
language
UserLesson
user
lesson
date_viewed
languages Models:
Language
id
name
code
Lesson
id
language
title
content
tags
Quiz
id
language
title
questions (M2M to Question)
duration
passing_score
Question
id
text
choices
answer
quizzes Models:
Attempt
user
quiz
score
date
analytics Models:
UserLesson (defined above)

For login with JWT, Google login and Email/password
he recommends typescript

Necessary components for the front end:
Homepage: A welcoming landing page that introduces the platform, highlights its key features, and encourages users to sign up or log in.
Language Selection: A section where users can choose the language they want to learn from the available options.
User Registration/Login: A registration and login interface for new and existing users to access the platform's features and track their progress.
Profile Dashboard: A personalized dashboard for each user to track their learning progress, view achievements, and access recommended lessons and activities.
Interactive Lessons: Interactive lessons tailored to users' proficiency levels, including exercises for vocabulary, grammar, pronunciation, and cultural immersion.
Quizzes and Assessments: Assessments and quizzes to evaluate users’ language skills and progress.
Community Features: Integration of social features such as user profiles, forums, and chat platforms for peer-to-peer interaction, language exchange, and sharing learning experiences.
AI Tutoring Integration: Integration of AI-driven tutoring features for providing real-time feedback on pronunciation, grammar, and vocabulary usage.
Content Sharing: A feature that allows users to share their learning progress, achievements, and experiences on social media platforms.
Responsive Design: A responsive and mobile-friendly design to ensure accessibility and usability across various devices and screen sizes.
Navigation Menu: Clear and intuitive navigation menus to help users easily find and access different sections of the platform.
Search Functionality: A search bar or filter options to help users quickly find specific lessons, topics, or resources.
Feedback Mechanism: A mechanism for users to provide feedback on lessons, features, and overall user experience, enabling continuous improvement.
Premium Membership Features: Integration of features exclusive to premium members, such as advanced AI models, extra lessons, and video creation tools.
Monetization Options: Implementation of mechanisms for monetization, such as premium membership subscriptions or optional upgrades for access to additional features.
Privacy and Security: Implementation of robust privacy and security measures to protect user data and ensure a safe learning environment.


