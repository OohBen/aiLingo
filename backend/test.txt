### .\.env ###
SECRET_KEY=4412421124142
DEBUG=True
ALLOWED_HOSTS=localhost 127.0.0.1
DATABASE_URL=your-database-url

GOOGLE_GENERATIVE_AI_API_KEY=AIzaSyAycw0N3czwCu-m3B1ZQ6apwQLN8QLLwFU

### .\aiLingo\aiLingo\asgi.py ###
"""
ASGI config for aiLingo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_asgi_application()


### .\aiLingo\aiLingo\settings.py ###
"""
Django settings for aiLingo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0b3)jdf!ev5a)r4bloar5gpgdi5%7kvzdn)g2$bmdxs&ed$hwp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'users',
    'lessons',
    'languages',
    'quizzes',
    'analytics',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aiLingo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aiLingo.wsgi.application'

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',  # Add the URL of your React frontend
]
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
AUTH_USER_MODEL = 'users.User'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
GOOGLE_GENERATIVE_AI_API_KEY = os.getenv('GOOGLE_GENERATIVE_AI_API_KEY')
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

### .\aiLingo\aiLingo\urls.py ###
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/users/', include('users.urls')),
    path('api/languages/', include('languages.urls')),
    path('api/quizzes/', include('quizzes.urls')),
    path('api/lessons/', include('lessons.urls')),
    path('analytics/', include('analytics.urls')),
]

### .\aiLingo\aiLingo\wsgi.py ###
"""
WSGI config for aiLingo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_wsgi_application()


### .\aiLingo\analytics\admin.py ###
from django.contrib import admin

# Register your models here.


### .\aiLingo\analytics\apps.py ###
from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'analytics'


### .\aiLingo\analytics\models.py ###
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class Analytics(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    data = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

### .\aiLingo\analytics\serializers.py ###
from rest_framework import serializers
from .models import Analytics

class AnalyticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Analytics
        fields = ['id', 'user', 'data', 'created_at', 'updated_at']

### .\aiLingo\analytics\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\analytics\urls.py ###
from django.urls import path
from .views import AnalyticsView

urlpatterns = [
    path('', AnalyticsView.as_view(), name='analytics'),
]

### .\aiLingo\analytics\views.py ###
from rest_framework import generics
from .models import Analytics
from .serializers import AnalyticsSerializer

class AnalyticsView(generics.RetrieveUpdateAPIView):
    queryset = Analytics.objects.all()
    serializer_class = AnalyticsSerializer

    def get_object(self):
        user = self.request.user
        obj, _ = Analytics.objects.get_or_create(user=user)
        return obj

### .\aiLingo\languages\admin.py ###
from django.contrib import admin
from .models import Language

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ('name', 'code')
    search_fields = ('name',)

### .\aiLingo\languages\apps.py ###
from django.apps import AppConfig


class LanguagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'languages'


### .\aiLingo\languages\models.py ###
from django.db import models

# Create your models here.
from django.db import models

class Language(models.Model):
    code = models.CharField(max_length=10)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name



### .\aiLingo\languages\serializers.py ###
from rest_framework import serializers
from .models import Language

class LanguageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Language
        fields = ['id', 'name', 'code']

### .\aiLingo\languages\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\languages\urls.py ###
from django.urls import path
from .views import (
    LanguageListCreateView,
    LanguageRetrieveUpdateDestroyView,
)

urlpatterns = [
    path('', LanguageListCreateView.as_view(), name='language-list-create'),
    path('<int:pk>/', LanguageRetrieveUpdateDestroyView.as_view(), name='language-retrieve-update-destroy'),
]

### .\aiLingo\languages\views.py ###
from rest_framework import generics
from .models import Language
from .serializers import LanguageSerializer

class LanguageListCreateView(generics.ListCreateAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

class LanguageRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

### .\aiLingo\lessons\admin.py ###
from django.contrib import admin
from .models import Lesson

@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ('title', 'language')
    list_filter = ('language',)
    search_fields = ('title', 'content')

### .\aiLingo\lessons\apps.py ###
from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lessons'


### .\aiLingo\lessons\models.py ###
from django.db import models
from users.models import User
from languages.models import Language

class Lesson(models.Model):
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title

class UserLesson(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    # Add any additional fields related to user's progress or interaction with the lesson

### .\aiLingo\lessons\serializers.py ###
from rest_framework import serializers
from .models import Lesson, UserLesson

class LessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Lesson
        fields = ['id', 'language', 'title', 'content']

class UserLessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLesson
        fields = ['id', 'user', 'lesson', 'completed']

### .\aiLingo\lessons\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\lessons\urls.py ###
from django.urls import path
from .views import (
    # LessonListCreateView,
    # LessonRetrieveUpdateDestroyView,
    UserLessonListCreateView,
    UserLessonRetrieveUpdateDestroyView,
)

urlpatterns = [
    # path('lessons/', LessonListCreateView.as_view(), name='lesson-list-create'),
    # path('lessons/<int:pk>/', LessonRetrieveUpdateDestroyView.as_view(), name='lesson-retrieve-update-destroy'),
    path('', UserLessonListCreateView.as_view(), name='user-lesson-list-create'),
    path('<int:pk>/', UserLessonRetrieveUpdateDestroyView.as_view(), name='user-lesson-retrieve-update-destroy'),
]

### .\aiLingo\lessons\views.py ###
from rest_framework import generics
from .models import Lesson, UserLesson
from .serializers import LessonSerializer, UserLessonSerializer

# class LessonListCreateView(generics.ListCreateAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

# class LessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

class UserLessonListCreateView(generics.ListCreateAPIView):
    serializer_class = UserLessonSerializer

    def get_queryset(self):
        return UserLesson.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class UserLessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = UserLesson.objects.all()
    serializer_class = UserLessonSerializer

### .\aiLingo\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\aiLingo\quizzes\admin.py ###
from django.contrib import admin
from .models import Quiz, Question, Attempt

@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    list_display = ('title', 'language', 'duration', 'passing_score')
    list_filter = ('language',)
    search_fields = ('title',)

@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ('text', 'quiz')
    list_filter = ('quiz',)
    search_fields = ('text',)

@admin.register(Attempt)
class AttemptAdmin(admin.ModelAdmin):
    list_display = ('user', 'quiz', 'score', 'date')
    list_filter = ('quiz', 'user')
    search_fields = ('user__username',)

### .\aiLingo\quizzes\apps.py ###
from django.apps import AppConfig


class QuizzesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'quizzes'


### .\aiLingo\quizzes\models.py ###
from django.db import models

# Create your models here.
from django.db import models
from users.models import User
from languages.models import Language

from django.db import models
from django.conf import settings

class Quiz(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, default=1)
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    duration = models.IntegerField()
    passing_score = models.IntegerField()

    def __str__(self):
        return self.title

class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    text = models.TextField()
    choices = models.JSONField(null=True, blank=True)
    answer = models.IntegerField()
    explanations = models.JSONField(null=True, blank=True)

    def __str__(self):
        return self.text[:50]

class Attempt(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.quiz.title} - {self.score}%"


### .\aiLingo\quizzes\serializers.py ###
from rest_framework import serializers
from .models import Question, Quiz, Attempt

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        fields = ['id', 'quiz', 'text', 'choices', 'answer', 'explanations']

class QuizSerializer(serializers.ModelSerializer):
    class Meta:
        model = Quiz
        fields = ['id', 'language', 'title', 'duration', 'passing_score']

class AttemptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attempt
        fields = ['id', 'user', 'quiz', 'score', 'date']

### .\aiLingo\quizzes\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\quizzes\urls.py ###
from django.urls import path
from .views import CreateQuizView, GenerateQuestionView, QuizListCreateView, QuizQuestionsView, QuizRetrieveUpdateDestroyView

urlpatterns = [
    path('', QuizListCreateView.as_view(), name='quiz-list-create'),
    path('<int:pk>/', QuizRetrieveUpdateDestroyView.as_view(), name='quiz-retrieve-update-destroy'),
    path('<int:quiz_id>/generate-question/', GenerateQuestionView.as_view(), name='generate-question'),
    path('create/', CreateQuizView.as_view(), name='create-quiz'),
    path('<int:quiz_id>/questions/', QuizQuestionsView.as_view(), name='quiz-questions'),
]

### .\aiLingo\quizzes\views.py ###
import re
from django.conf import settings
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Attempt, Question, Quiz
from .serializers import AttemptSerializer, QuestionSerializer, QuizSerializer
import google.generativeai as genai
from analytics.models import Analytics
from analytics.serializers import AnalyticsSerializer

class GenerateQuestionView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = QuestionSerializer

    def post(self, request, quiz_id):
        quiz_id = self.kwargs['quiz_id']
        quiz = Quiz.objects.get(id=quiz_id)
        prompt = request.data['prompt']
        language = quiz.language
        # Configure the Gemini AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        prompt_parts = [
            f"You are a teacher of the {language} language. Reply in {language} and make sure to provide examples of use cases when teaching. Be supportive and helpful. Unless specified, generate 5 example questions. When giving the answer key to questions, use the following format: 888333 ANSWERKEY 888333 followed by the answers on the next line.",
            f"input: {prompt}",
            "output: ",
        ]

        response = model.generate_content(prompt_parts)
        generated_text = response.text

        # Extract the generated question and answer key
        question_text = generated_text.split('888333 ANSWERKEY 888333')[0].strip()
        answer_key = generated_text.split('888333 ANSWERKEY 888333')[1].strip()

        question_data = {
            'quiz': quiz.id,
            'text': question_text,
            'answer': answer_key
        }

        if 'choices' in generated_text:
            choices = generated_text.split('choices:')[1].strip().split('\n')
            question_data['choices'] = choices

        serializer = QuestionSerializer(data=question_data)
        serializer.is_valid(raise_exception=True)
        question = serializer.save()

        return Response({'question': serializer.data}, status=status.HTTP_201_CREATED)

class QuizListCreateView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
    def get_queryset(self):
        return Quiz.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class QuizRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
class CreateQuizView(generics.CreateAPIView):
    serializer_class = QuizSerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    def post(self, request, *args, **kwargs):
        serializer = QuizSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        quiz = serializer.instance

        # Configure the Generative AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        home_language = request.user.home_language.name if request.user.home_language else 'English'
        prompt = f"Generate 5 multiple-choice questions for a quiz titled '{quiz.title}' in the {quiz.language} language. Provide explanations for each answer choice in the user's home language: {home_language}. Use the following strict format for each question:\n\nq: <question_text>\nc1: <choice_1>\ne1: <explanation_for_choice_1>\nc2: <choice_2>\ne2: <explanation_for_choice_2>\nc3: <choice_3>\ne3: <explanation_for_choice_3>\nc4: <choice_4>\ne4: <explanation_for_choice_4>\na: <correct_answer_choice_number>\n\nMake sure to include all the required components (q, c1, e1, c2, e2, c3, e3, c4, e4, a) for each question, and provide the correct answer as a choice number (1, 2, 3, or 4). Here's an example of the format for a single question:\n\nq: What is the capital of France?\nc1: London\ne1: London is the capital of the United Kingdom, not France.\nc2: Paris\ne2: Paris is the correct answer. It is the capital of France.\nc3: Berlin\ne3: Berlin is the capital of Germany, not France.\nc4: Madrid\ne4: Madrid is the capital of Spain, not France.\na: 2\n\nPlease generate the questions in this exact format, with each question on a new line."

        response = model.generate_content(prompt)

        generated_text = response.text.strip()

        # Extract the generated questions and answer choices
        questions_data = self.parse_generated_questions(generated_text)
        # Save the generated questions to the database
        for question_data in questions_data:
            question_data['quiz'] = quiz.id
            serializer = QuestionSerializer(data=question_data)
            serializer.is_valid(raise_exception=True)
            serializer.save()
        
        user = request.user
        prompt = f"Update the analytics data for user '{user.username}' based on the quiz '{quiz.title}' they created. Include metrics such as quiz count, average score, and topic preferences."

        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)
        model = genai.GenerativeModel(model_name="gemini-1.0")
        response = model.generate_content(prompt)

        analytics_data = response.text.strip()

        # Update the user's analytics
        analytics_obj, _ = Analytics.objects.get_or_create(user=user)
        analytics_obj.data = analytics_data
        analytics_obj.save()

        return Response(QuizSerializer(quiz).data, status=status.HTTP_201_CREATED)

    def parse_generated_questions(self, text):
        questions_data = []
        question_blocks = text.strip().split("\n\n")

        for block in question_blocks:
            question_data = {}
            lines = block.strip().split("\n")

            for line in lines:
                if ": " in line:
                    key, value = line.split(": ", 1)
                    if key == "q":
                        question_data['text'] = value
                    elif key.startswith("c"):
                        if 'choices' not in question_data:
                            question_data['choices'] = []
                        question_data['choices'].append(value)
                    elif key.startswith("e"):
                        if 'explanations' not in question_data:
                            question_data['explanations'] = []
                        question_data['explanations'].append(value)
                    elif key == "a":
                        question_data['answer'] = int(value)

            if 'text' in question_data and 'choices' in question_data and 'answer' in question_data and 'explanations' in question_data:
                questions_data.append(question_data)

        return questions_data
class QuizQuestionsView(generics.ListAPIView):
    serializer_class = QuestionSerializer

    def get_queryset(self):
        quiz_id = self.kwargs['quiz_id']
        return Question.objects.filter(quiz_id=quiz_id)
class UserAttemptView(generics.CreateAPIView):
    serializer_class = AttemptSerializer

    def post(self, request, *args, **kwargs):
        quiz_id = request.data.get('quiz')
        score = request.data.get('score')

        attempt = Attempt.objects.create(user=request.user, quiz_id=quiz_id, score=score)
        serializer = self.get_serializer(attempt)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

### .\aiLingo\users\admin.py ###
from django.contrib import admin
from .models import User

admin.site.register(User)

### .\aiLingo\users\apps.py ###
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


### .\aiLingo\users\models.py ###
from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractUser
from django.db import models
from languages.models import Language
class User(AbstractUser):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    profile_pic = models.ImageField(upload_to='profile_pics', blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    is_premium = models.BooleanField(default=False)
    home_language = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True, blank=True)

### .\aiLingo\users\serializers.py ###
from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'home_language']

class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'password']


### .\aiLingo\users\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\users\urls.py ###
from django.urls import path
from .views import RegisterView, LoginView, ProfileView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('profile/', ProfileView.as_view(), name='profile'),
]

### .\aiLingo\users\views.py ###
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer, UserRegistrationSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.token_blacklist.models import OutstandingToken

class RegisterView(APIView):
    permission_classes = []
    def post(self, request):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LoginView(APIView):
    permission_classes = []
    def post(self, request):
        email = request.data.get('email')
        password = request.data.get('password')

        if not email or not password:
            return Response({'error': 'Please provide both email and password'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)

        user = authenticate(request, username=user.username, password=password)

        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
                'user': {
                    'id': user.id,
                    'name': user.name,
                    'email': user.email,
                },
            }, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
class ProfileView(APIView):
    def get(self, request):
        user = request.user
        serializer = UserSerializer(user)
        return Response(serializer.data)

### .\proposal.txt ###
Proposal
Information0: Jiaying Zhu; 240465419; Junior; I have experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.

Information1: Benjamin Goihman; 204658306; Junior; I have experience in Java and Python, Java since 7th grade and Python since 9th. I have basic familiarity with Django, Flask and Fast API for Python and for Java I have some experience with Spring Boot.

Information2: Catherine Wijaya; 233190933; Junior; I have experience in coding with HTML, CSS since 9th grade, Python since 10th grade, and am currently learning Java.

Information3: Andrew Choi; 233508464; Junior; I have some experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.
aiLingo
Proposal: Language Learning Platform with AI Tutoring
Introduction:
aiLingo is an AI-driven language learning platform that provides users with customized lessons, instant feedback, and cultural immersion for learners of all proficiency levels. This program aims to counter traditional language education by embracing a more personalized experience, along with interactive and engaging lessons, allowing users to reach their linguistic potential. To generate income, the program will have an optional paid premium membership allowing access to better AI models and extra features without diminishing the quality and user experience.
Objectives:
Create an AI-driven platform that offers multiple languages and caters to language learners across all proficiency levels.
Leverage AI to provide real-time feedback on pronunciation, grammar, and vocabulary usage.
Foster cultural immersion experiences and community interaction for enhanced language learning.
Outline:
Platform:
An interactive and user-friendly website that works on both mobile and desktop.
Various learning materials, such as lessons, quizzes, and cultural immersion for each language offered.
A sharing feature for users to post their learning process and achievements to social media.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.


AI Tutoring:
Use Google Makersuite and Gemini, to create specialized and trained responses to questions, and generate helpful responses that lead the user to better understanding.


Content Creation:
Present interactive exercises, live sessions with native speakers, and opportunities for language exchange within the platform’s community.


Monetization potential:
In the future create extra features such as video creation that only premium can use.
When Gemini Ultra comes, an optional upgrade for premium users.
Expected Outcomes:
An interactive and AI-driven language learning platform offering a diverse range of languages and catering to various proficiency levels.
Positive user feedback indicating increased engagement, improved language skills, and satisfaction with the platform’s features.
A growing user base and community engagement within the platform, fostering language learning and cultural exchange.
Conclusion:
The development of aiLingo aligns with the growing demand for effective and personalized language learning solutions. It aims to provide a comprehensive and engaging experience for language learners across all proficiency levels while utilizing technology to maximize learning outcomes.

Meeting #1
determine necessary features/deliverables

Have rough draft, bullet list of features by next meetings, assign priorities
P0 - need
P1 - nice
P2 - prob not going to happen but hope
google ai studio
Delegate tasks, probably find someone to manage ppl.
Use python for the AI.
Use flask or django more for backend.
Probably react/angular for the front end.
Meetings fri 5:30pm.
What is interesting to everyone individually, what do you want to take out of it?
Open questions:
Where to make designs for our ui?



Concrete Outline:
Timeline - work backwards, set deadlines, weekly increments. 
Clear Technical Design - React folder structure, breakdown features and modules. 
P0:
An interactive website that contains at least one language with lessons and quizzes, through the AI
UI, that connects to multiple api calls.
Split this up into sections like how the chat section will work, the dash board etc. 
Basically, call backend API for data then display.
An AI tutor
You can ask them to quiz you on a language. Teach you grammar lessons.
Practice specific grammar with specific vocab. 
Keep track of mastery of a topic. And what has been covered.
All chats go through api to the backend then that goes to google api for getting the info. Return the data at once. In database store that text as a list. Then make another call so django process last chat and update dashboard.
Diagnostic test - generated by AI syllabus based on it.
Special end point which generates test that then the other AI endpoints work with.
Dashboard with analytics
Django api end point, two options either always update dashboard so quicker when you request but each chat is more heavy on server or only update dashboard when request. 
User authentication (:
Key: email and password, + forgot password OR just social media log in. Then attempt to allow both types of login.
Custom user model for future upgradeability.
Probably use JWT to keep track of login.
P1:
Use OCR/AI, to take images as input and critique you on your homework answers.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.
Sub type where you speak with someone fluent in the language you're learning and you are fluent in the language they are learning.
In those messages also add AI made translation if, what is said by user is unclear
Add filters 
Cultural Immersion
A sharing feature for users to post their learning process and achievements to social media.
Multiple languages
Extra features:
Use AI image generation, mainly for vocab. 
Takes voice input.
P2: 
Live sessions with native speakers, and opportunities for language exchange within the platform’s community.
Monetized videos

https://makersuite.google.com/app/
Django documentation goes with Django REST framework
React, probably can't get away with just doing this,React Foundations | Next.js  then learn more about nextjs and Next.js 
For learning order:
Backend:
First find a video on basic django, but like this is the core so make sure its comprehensive.
Then learn about the django rest framework, it just uses django views in a different way.
OR: watch like a mega tutorial that does both:
Build a Django REST API with the Django Rest Framework. Complete Tutorial.

Front end:
HTML - honestly probably fine dont even bother
CSS - KEY, if not it will look hideous really spend time I’m doing this CSS Crash Course for Beginners
Only then go to NextJs tutorial. 
Learn Next.js | Next.js by Vercel - The React Framework MAKE SURE to go through react foundations. Should also probably skim mozilla js for the js syntax.
Split up:
Options:
2 front end 2 back end
4 of us do it all
2 front and 1 back or 2 back and 1 front, then the other person learns all and helps both sides. Probably good but a lot of work the  person needs to learn both technologies, this or we all do everything.

Start with a broad description and then think of the product - 20%
How are you going to build it - design - 20%
Code it and test - 40%
20% - thin air
Work with https://makersuite.google.com/ test it out. 
Next Week:
Figure out spec including UI 
Begin design
Learn technologies
Prob React


Django Backend:
Name on the left is which app it is in
users Models:
User
id
email
name
profile_pic
date_joined
is_premium
UserLanguage
user
language
UserLesson
user
lesson
date_viewed
languages Models:
Language
id
name
code
Lesson
id
language
title
content
tags
Quiz
id
language
title
questions (M2M to Question)
duration
passing_score
Question
id
text
choices
answer
quizzes Models:
Attempt
user
quiz
score
date
analytics Models:
UserLesson (defined above)

For login with JWT, Google login and Email/password
he recommends typescript

Necessary components for the front end:
Homepage: A welcoming landing page that introduces the platform, highlights its key features, and encourages users to sign up or log in.
Language Selection: A section where users can choose the language they want to learn from the available options.
User Registration/Login: A registration and login interface for new and existing users to access the platform's features and track their progress.
Profile Dashboard: A personalized dashboard for each user to track their learning progress, view achievements, and access recommended lessons and activities.
Interactive Lessons: Interactive lessons tailored to users' proficiency levels, including exercises for vocabulary, grammar, pronunciation, and cultural immersion.
Quizzes and Assessments: Assessments and quizzes to evaluate users’ language skills and progress.
Community Features: Integration of social features such as user profiles, forums, and chat platforms for peer-to-peer interaction, language exchange, and sharing learning experiences.
AI Tutoring Integration: Integration of AI-driven tutoring features for providing real-time feedback on pronunciation, grammar, and vocabulary usage.
Content Sharing: A feature that allows users to share their learning progress, achievements, and experiences on social media platforms.
Responsive Design: A responsive and mobile-friendly design to ensure accessibility and usability across various devices and screen sizes.
Navigation Menu: Clear and intuitive navigation menus to help users easily find and access different sections of the platform.
Search Functionality: A search bar or filter options to help users quickly find specific lessons, topics, or resources.
Feedback Mechanism: A mechanism for users to provide feedback on lessons, features, and overall user experience, enabling continuous improvement.
Premium Membership Features: Integration of features exclusive to premium members, such as advanced AI models, extra lessons, and video creation tools.
Monetization Options: Implementation of mechanisms for monetization, such as premium membership subscriptions or optional upgrades for access to additional features.
Privacy and Security: Implementation of robust privacy and security measures to protect user data and ensure a safe learning environment.




### .\requirements.txt ###
django==4.2.11
djangorestframework==3.15.1
google-generativeai
requests
python-dotenv
djangorestframework-simplejwt
Pillow
django-cors-headers


### .\tempfront\ailingo-frontend\.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


### .\tempfront\ailingo-frontend\package.json ###
{
  "name": "ailingo-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "bootstrap": "^5.3.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.2",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.3",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


### .\tempfront\ailingo-frontend\public\index.html ###
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


### .\tempfront\ailingo-frontend\public\manifest.json ###
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


### .\tempfront\ailingo-frontend\public\robots.txt ###
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


### .\tempfront\ailingo-frontend\README.md ###
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


### .\tempfront\ailingo-frontend\src\App.css ###
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


### .\tempfront\ailingo-frontend\src\App.js ###
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Navigation from './components/Navigation';
import Home from './components/Home';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import Languages from './components/Languages';
import Lessons from './components/Lessons';
import Quizzes from './components/Quizzes';
import QuizDetails from './components/QuizDetails';
import GenerateQuestion from './components/GenerateQuestion';
import CreateQuiz from './components/CreateQuiz';
import Profile from './components/Profile';
function App() {
  return (
    <Router>
      <div>
        <Navigation />
        <div className="container">
          <Routes>
            <Route exact path="/" element={<Home />} />
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/languages" element={<Languages />} />
            <Route path="/lessons" element={<Lessons />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/generate-question" element={<GenerateQuestion />} />
            <Route path="/create-quiz" element={<CreateQuiz />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/quizzes/:id" element={<QuizDetails />} />
            <Route path="/profile" element={<Profile />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

export default App;

### .\tempfront\ailingo-frontend\src\App.test.js ###
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


### .\tempfront\ailingo-frontend\src\components\Analytics.js ###
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Analytics() {
  const [analyticsData, setAnalyticsData] = useState(null);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      const response = await axiosInstance.get('/analytics/');
      setAnalyticsData(response.data);
    } catch (error) {
      console.error('Error fetching analytics data:', error);
    }
  };

  return (
    <Container>
      <h1>Analytics</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Analytics</Card.Title>
              {analyticsData && (
                <div>
                  <p>{analyticsData.data}</p>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default Analytics;

### .\tempfront\ailingo-frontend\src\components\CreateQuiz.js ###
import React, { useState, useEffect } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom';

function CreateQuiz() {
  const [title, setTitle] = useState('');
  const [language, setLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const response = await axiosInstance.post('http://localhost:8000/api/quizzes/create/', {
        title,
        language,
        duration: 10,
        passing_score: 50,
      });
      console.log(response.data);
      setSuccess(true);
      setError('');
      setLoading(false);
      navigate('/quizzes');
    } catch (error) {
      console.error(error);
      setError('Failed to create quiz. Please try again.');
      setSuccess(false);
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <div className="create-quiz-form">
        <h2>Create Quiz</h2>
        {success && <p className="success">Quiz created successfully!</p>}
        {error && <p className="error">{error}</p>}
        {loading ? (
          <div className="loading">
            <p>Creating quiz...</p>
            <div className="loading-spinner"></div>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Quiz Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              required
            >
              <option value="">Select Language</option>
              {languages.map((lang) => (
                <option key={lang.id} value={lang.id}>
                  {lang.name}
                </option>
              ))}
            </select>
            <button type="submit">Create Quiz</button>
          </form>
        )}
      </div>
    </div>
  );
}

export default CreateQuiz;

### .\tempfront\ailingo-frontend\src\components\Dashboard.js ###
import React from 'react';
import Profile from './Profile';

function Dashboard() {
  return (
    <div className="container">
      <h2>Welcome to the Dashboard</h2>
      <Profile />
    </div>
  );
}

export default Dashboard;

### .\tempfront\ailingo-frontend\src\components\GenerateQuestion.js ###
import React, { useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function GenerateQuestion() {
  const [quizId, setQuizId] = useState('');
  const [prompt, setPrompt] = useState('');
  const [question, setQuestion] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axiosInstance.post(`http://localhost:8000/api/quizzes/${quizId}/generate-question/`, { prompt });
      setQuestion(response.data.question);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Generate Question</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="number"
          placeholder="Quiz ID"
          value={quizId}
          onChange={(e) => setQuizId(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          required
        />
        <button type="submit">Generate</button>
      </form>
      {question && (
        <div>
          <h3>Generated Question:</h3>
          <p>{question.text}</p>
          <p>Answer: {question.answer}</p>
        </div>
      )}
    </div>
  );
}

export default GenerateQuestion;

### .\tempfront\ailingo-frontend\src\components\Home.js ###
import React from 'react';
import { Container, Row, Col, Button } from 'react-bootstrap';

function Home() {
  return (
    <div className="home">
      <Container>
        <Row className="hero">
          <Col>
            <h1>Welcome to aiLingo</h1>
            <p>Explore languages, lessons, and quizzes.</p>
            <Button variant="primary" size="lg">Get Started</Button>
          </Col>
        </Row>
      </Container>
    </div>
  );
}

export default Home;

### .\tempfront\ailingo-frontend\src\components\Languages.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Languages() {
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="container">
      <h2>Languages</h2>
      <ul>
        {languages.map((language) => (
          <li key={language.id}>{language.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default Languages;

### .\tempfront\ailingo-frontend\src\components\Lessons.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Lessons() {
  const [lessons, setLessons] = useState([]);

  useEffect(() => {
    fetchLessons();
  }, []);

  const fetchLessons = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/lessons/');
      setLessons(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Lessons</h2>
      <ul>
        {lessons.map((lesson) => (
          <li key={lesson.id}>{lesson.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default Lessons;

### .\tempfront\ailingo-frontend\src\components\Login.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/login/', { email, password });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      localStorage.setItem('user', JSON.stringify(response.data.user));
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Invalid credentials. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="container">
      <h2>User Login</h2>
      {success && <p className="success">Login successful!</p>}
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default Login;

### .\tempfront\ailingo-frontend\src\components\Navigation.js ###
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav } from 'react-bootstrap';

function Navigation() {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Navbar.Brand as={Link} to="/">aiLingo</Navbar.Brand>
      <Navbar.Toggle aria-controls="basic-navbar-nav" />
      <Navbar.Collapse id="basic-navbar-nav">
        <Nav className="ml-auto">
          <Nav.Link as={Link} to="/">Home</Nav.Link>
          <Nav.Link as={Link} to="/register">Register</Nav.Link>
          <Nav.Link as={Link} to="/login">Login</Nav.Link>
          <Nav.Link as={Link} to="/languages">Languages</Nav.Link>
          <Nav.Link as={Link} to="/lessons">Lessons</Nav.Link>
          <Nav.Link as={Link} to="/quizzes">Quizzes</Nav.Link>
          <Nav.Link as={Link} to="/profile">Profile</Nav.Link>
        </Nav>
      </Navbar.Collapse>
    </Navbar>
  );
}

export default Navigation;

### .\tempfront\ailingo-frontend\src\components\PrivateRoute.js ###
import React from 'react';
import { Route, Navigate } from 'react-router-dom';

const PrivateRoute = ({ element: Component, ...rest }) => {
    const isAuthenticated = !!localStorage.getItem('access_token');

    return (
        <Route
            {...rest}
            element={isAuthenticated ? <Component {...rest} /> : <Navigate to="/login" />}
        />
    );
};

export default PrivateRoute;

### .\tempfront\ailingo-frontend\src\components\Profile.js ###
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Profile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchUserData();
    console.log("hello");
  }, []);

  const fetchUserData = async () => {
    try {
      const response = await axiosInstance.get('/users/profile/');
      setUser(response.data);
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  const handleLogout = async () => {
    try {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <Container>
      <h1>Profile</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Information</Card.Title>
              <p>Name: {user.name}</p>
              <p>Email: {user.email}</p>
              {/* Display other user information */}
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Row>
        <Col>
          <Button variant="danger" onClick={handleLogout}>
            Logout
          </Button>
        </Col>
      </Row>
    </Container>
  );
}

export default Profile;

### .\tempfront\ailingo-frontend\src\components\QuizDetails.js ###
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';

function QuizDetails() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [score, setScore] = useState(0);

  useEffect(() => {
    fetchQuizDetails();
    fetchQuestions();
  }, []);

  const fetchQuizDetails = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/`);
      setQuiz(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/questions/`);
      setQuestions(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleAnswerSelect = (questionId, selectedAnswer) => {
    setQuestions((prevQuestions) =>
      prevQuestions.map((question) =>
        question.id === questionId
          ? { ...question, selectedAnswer, showExplanation: true }
          : question
      )
    );
  };

  const handleQuizSubmit = async () => {
    const attemptData = {
      quiz: quiz.id,
      score: score,
    };

    try {
      await axiosInstance.post('http://localhost:8000/api/quizzes/attempt/', attemptData);
      // Redirect to a quiz results page or display a success message
    } catch (error) {
      console.error(error);
    }
  };

  if (!quiz) {
    return <div>Loading...</div>;
  }

  return (
    <div className="quiz-details">
      <h2>{quiz.title}</h2>
      <h3>Questions:</h3>
      <ul>
        {questions.map((question) => (
          <li key={question.id} className="question-item">
            <div className="question-text">{question.text}</div>
            <ul className="question-choices">
              {question.choices.map((choice, index) => (
                <li
                  key={index}
                  className={`choice ${
                    question.selectedAnswer === index + 1 ? 'selected' : ''
                  } ${
                    question.showExplanation && question.selectedAnswer === index + 1
                      ? question.answer === index + 1
                        ? 'correct'
                        : 'incorrect'
                      : ''
                  }`}
                  onClick={() => handleAnswerSelect(question.id, index + 1)}
                >
                  {choice}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <span className="choice-icon">
                      {question.answer === index + 1 ? '✔' : '✘'}
                    </span>
                  )}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <div className="choice-explanation">
                      <strong>Explanation:</strong> {question.explanations[index]}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
      <button onClick={handleQuizSubmit}>Submit Quiz</button>
    </div>
  );
}

export default QuizDetails;

### .\tempfront\ailingo-frontend\src\components\Quizzes.js ###
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';

function Quizzes() {
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const fetchQuizzes = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/quizzes/');
      setQuizzes(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="quizzes">
      <Container>
        <h2>Quizzes</h2>
        <Row>
          {quizzes.map((quiz) => (
            <Col md={4} key={quiz.id}>
              <Card>
                <Card.Body>
                  <Card.Title>{quiz.title}</Card.Title>
                  <Card.Text>Language: {quiz.language}</Card.Text>
                  <Card.Text>Duration: {quiz.duration} minutes</Card.Text>
                  <Card.Text>Passing Score: {quiz.passing_score}%</Card.Text>
                  <Button variant="primary" as={Link} to={`/quizzes/${quiz.id}`}>
                    Take Quiz
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
    </div>
  );
}

export default Quizzes;

### .\tempfront\ailingo-frontend\src\components\Register.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Form, Button, Alert } from 'react-bootstrap';

function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [homeLanguage, setHomeLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
    else {
      fetchLanguages();
    }
  }, [navigate]);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/register/', {
        name,
        email,
        password,
        home_language: homeLanguage,
      });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Registration failed. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="register">
      <h2>User Registration</h2>
      {success && <Alert variant="success">Registration successful! You can now log in.</Alert>}
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="name">
          <Form.Label>Name</Form.Label>
          <Form.Control
            type="text"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </Form.Group>
        <input
          type="text"
          placeholder="Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <select
          value={homeLanguage}
          onChange={(e) => setHomeLanguage(e.target.value)}
          required
        >
          <option value="">Select Home Language</option>
          {languages.map((language) => (
            <option key={language.id} value={language.id}>
              {language.name}
            </option>
          ))}
        </select>
        <Button variant="primary" type="submit">Register</Button>
        </Form>
    </div>
  );
}

export default Register;

### .\tempfront\ailingo-frontend\src\index.css ###
/* Global Styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #333;
  color: #fff;
  padding: 10px;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

nav ul li {
  display: inline-block;
  margin-right: 10px;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 5px 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

nav ul li a:hover {
  background-color: #555;
}

/* Form Styles */
form {
  margin-bottom: 20px;
  background-color: #fff;
  padding: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

form input {
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

form button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #555;
}

/* Button Styles */
.btn {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #555;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

/* Error Styles */
.error {
  color: red;
  margin-bottom: 10px;
}

/* Success Styles */
.success {
  color: green;
  margin-bottom: 10px;
}
.profile {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

.profile p {
  margin-bottom: 10px;
}

.profile button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #555;
}
.create-quiz-form {
  max-width: 400px;
  margin: 0 auto;
}

.create-quiz-form h2 {
  font-size: 24px;
  margin-bottom: 20px;
}

.create-quiz-form input {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.create-quiz-form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.create-quiz-form button:hover {
  background-color: #0056b3;
}

.create-quiz-form .success {
  color: green;
  margin-bottom: 10px;
}

.create-quiz-form .error {
  color: red;
  margin-bottom: 10px;
}
/* Global Styles */
body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #2c3e50;
  padding: 15px;
  border-bottom: 4px solid #1abc9c;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

nav ul li {
  display: inline-block;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 10px 20px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
  font-size: 18px;
  font-weight: bold;
}

nav ul li a:hover {
  background-color: #1abc9c;
}

/* Form Styles */
form {
  background-color: #fff;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

form input,
form select {
  width: 100%;
  padding: 12px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 16px;
  outline: none;
}

form input:focus,
form select:focus {
  border-color: #1abc9c;
}

form button {
  width: 100%;
  padding: 12px;
  background-color: #1abc9c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 18px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #16a085;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 24px;
}

/* Success and Error Styles */
.success {
  color: #1abc9c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

.error {
  color: #e74c3c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

/* Profile Styles */
.profile {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 28px;
}

.profile p {
  margin-bottom: 20px;
  color: #555;
  font-size: 18px;
}

.profile button {
  padding: 10px 20px;
  background-color: #e74c3c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #c0392b;
}
.quiz-list {
  list-style-type: none;
  padding: 0;
}

.quiz-list li {
  margin-bottom: 10px;
}

.quiz-list a {
  display: block;
  padding: 10px;
  background-color: #f5f5f5;
  color: #333;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.quiz-list a:hover {
  background-color: #e0e0e0;
}

/* Quiz Details Styles */
.quiz-details {
  margin-top: 20px;
}

.quiz-details h3 {
  margin-top: 0;
}

.quiz-details ul {
  list-style-type: none;
  padding: 0;
}

.quiz-details li {
  margin-bottom: 10px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
.question-item {
  cursor: pointer;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-item:hover {
  background-color: #e8e8e8;
}

.question-text {
  font-size: 18px;
  font-weight: bold;
}

.question-answer {
  margin-top: 10px;
  padding: 10px;
  background-color: #e0f0ff;
  border-radius: 4px;
}
.question-item {
  margin-bottom: 30px;
}

.question-text {
  cursor: pointer;
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-text:hover {
  background-color: #e8e8e8;
}

.question-choices {
  margin-top: 10px;
  margin-bottom: 10px;
  padding-left: 20px;
}

.question-choices li {
  margin-bottom: 5px;
}

.question-answer {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease;
  background-color: #e0f0ff;
  padding: 0 15px;
  border-radius: 4px;
}

.question-answer.show {
  max-height: 100px;
  padding: 15px;
}
.question-choices li {
  cursor: pointer;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.question-choices li:hover {
  background-color: #f0f0f0;
}

.question-choices li.selected {
  background-color: #e0f0ff;
}

.question-choices li.correct {
  background-color: #d4edda;
}

.question-choices li.incorrect {
  background-color: #f8d7da;
}

.choice-icon {
  margin-left: 10px;
  font-size: 18px;
}

.question-explanation {
  margin-top: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
}
@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spinner 1.5s linear infinite;
  margin: 20px auto;
}

### .\tempfront\ailingo-frontend\src\index.js ###
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

### .\tempfront\ailingo-frontend\src\logo.svg ###
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

### .\tempfront\ailingo-frontend\src\reportWebVitals.js ###
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


### .\tempfront\ailingo-frontend\src\setupTests.js ###
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


### .\tempfront\ailingo-frontend\src\utils\axiosInstance.js ###
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'http://localhost:8000/api/',
});

axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem('access_token');
  if (token) {
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
});

export default axiosInstance;

### .\tempfront\package.json ###
{
  "dependencies": {
    "axios": "^1.6.8",
    "react-router-dom": "^6.22.3"
  }
}


### .\test\api\admin.py ###
from django.contrib import admin
# Register your models here.


### .\test\api\apps.py ###
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'


### .\test\api\authentication.py ###
from rest_framework.authentication import TokenAuthentication as BaseTokenAuthentication
class TokenAuthentication(BaseTokenAuthentication):
    keyword = 'Bearer'

    

### .\test\api\mixins.py ###
from rest_framework import permissions
from .permissions import IsStaffEditorPermission    

class StaffEditorPermissionMixIn():
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

### .\test\api\models.py ###
from django.db import models

# Create your models here.


### .\test\api\permissions.py ###
from rest_framework import permissions

class IsStaffEditorPermission(permissions.DjangoModelPermissions):
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }
    # def has_permission(self, request, view):
    #     if not request.user.is_staff:
    #         return False
    #     return super().has_permission(request, view)
    # def has_permission(self, request, view):
    #     user = request.user
    #     if user.is_staff:
    #         if(user.has_perm("products.view_product")):
    #             return True
    #         if(user.has_perm("products.change_product")):
    #             return True
    #         if(user.has_perm("products.add_product")):
    #             return True
    #         if(user.has_perm("products.delete_product")):
    #             return True
    #     return False


### .\test\api\tests.py ###
from django.test import TestCase
from django.urls import reverse
from products.models import Product
# Create your tests here.

class BasicTest(TestCase):
    @classmethod
    def setUpTestData(cls) -> None:
        Product.objects.create(title="ti")
    # def test_url_exist(self):
    #     url = reverse("home")
    #     self.assertEqual(self.client.get(url).status_code,200)
    #     print(self.client.get(url).content)

### .\test\api\urls.py ###
from django.urls import path
from rest_framework.authtoken.views import obtain_auth_token
from . import views

urlpatterns = [
    path('auth/', obtain_auth_token,name="auth"),
    path('',views.api_home,name="home")
]


### .\test\api\views.py ###
from django.http import JsonResponse
from products.serializers import ProductSerializer
from products.models import Product
from rest_framework.response import Response
from rest_framework.decorators import api_view
# Create your views here.

@api_view(["POST"])
def api_home(request, *args, **kwargs):
    serializer = ProductSerializer(data=request.data)
    if serializer.is_valid(raise_exception=True):
        # data = serializer.save()
        return Response(serializer.data)

### .\test\cfehome\asgi.py ###
"""
ASGI config for cfehome project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_asgi_application()


### .\test\cfehome\routers.py ###
#Normally would go to urls.py
from rest_framework.routers import DefaultRouter
from products.viewsets import ProductViewSet, ProductGenericViewSet

router = DefaultRouter()
router.register('products-abc', ProductGenericViewSet, basename='products')

urlpatterns = router.urls

### .\test\cfehome\settings.py ###
"""
Django settings for cfehome project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o32l^k3%9ztw*2%11alx3ziu!4^66xouwc39v!_b@fby_&j%s_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'products',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cfehome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cfehome.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'api.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


### .\test\cfehome\urls.py ###
"""
URL configuration for cfehome project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls')),
    path('api/products/',include('products.urls')),
    path('api/v2/',include('cfehome.routers')),
]


### .\test\cfehome\wsgi.py ###
"""
WSGI config for cfehome project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_wsgi_application()


### .\test\example.py ###
from flask import Flask, jsonify
"""
GET /languages: Get a list of all languages
GET /languages/<int:language_id>: Get details of a specific language
GET /languages/<int:language_id>/lessons: Get a list of lessons for a specific language
GET /lessons/<int:lesson_id>: Get details of a specific lesson
GET /languages/<int:language_id>/quizzes: Get a list of quizzes for a specific language
GET /quizzes/<int:quiz_id>: Get details of a specific quiz, including its questions

to run:
make a venv (python -m venv .venv)
activate the venv (source .venv/Scripts/activate for windows, source .venv/bin/activate for mac)
pip install flask
flask -app example.py

"""
app = Flask(__name__)
from flask_cors import CORS

CORS(app)
# Languages Models
languages = [
    {
        "id": 1,
        "name": "English",
        "code": "en"
    },
    {
        "id": 2,
        "name": "Spanish",
        "code": "es"
    },
    {
        "id": 3,
        "name": "French",
        "code": "fr"
    }
]

lessons = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Basics",
        "content": "This is the content for the English Grammar Basics lesson.",
        "tags": ["beginner", "english", "grammar"]
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary",
        "content": "This is the content for the Spanish Vocabulary lesson.",
        "tags": ["beginner", "spanish", "vocabulary"]
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation",
        "content": "This is the content for the French Pronunciation lesson.",
        "tags": ["intermediate", "french", "pronunciation"]
    }
]

quizzes = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Quiz",
        "questions": [1, 2],
        "duration": 30,
        "passing_score": 80
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary Quiz",
        "questions": [3, 4],
        "duration": 45,
        "passing_score": 75
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation Quiz",
        "questions": [5, 6],
        "duration": 20,
        "passing_score": 70
    }
]

questions = [
    {
        "id": 1,
        "text": "What is the correct way to use the verb 'to be' in the present tense?",
        "choices": ["I is", "I am", "I are", "I be"],
        "answer": 1
    },
    {
        "id": 2,
        "text": "What is the plural form of 'child'?",
        "choices": ["childs", "childrens", "children", "childres"],
        "answer": 2
    },
    {
        "id": 3,
        "text": "What is the Spanish word for 'book'?",
        "choices": ["libro", "papel", "cuaderno", "lapiz"],
        "answer": 0
    },
    {
        "id": 4,
        "text": "How do you say 'Hello' in Spanish?",
        "choices": ["Hola", "Adios", "Gracias", "Buenos dias"],
        "answer": 0
    },
    {
        "id": 5,
        "text": "How is the word 'bonjour' pronounced in French?",
        "choices": ["bon-jour", "bon-zhoor", "bon-joor", "bon-jure"],
        "answer": 1
    },
    {
        "id": 6,
        "text": "What is the correct pronunciation of the French word 'merci'?",
        "choices": ["mer-see", "mer-see", "mer-chi", "mer-key"],
        "answer": 1
    }
]

# Routes
@app.route('/languages', methods=['GET'])
def get_languages():
    return jsonify(languages)

@app.route('/languages/<int:language_id>', methods=['GET'])
def get_language(language_id):
    language = next((l for l in languages if l['id'] == language_id), None)
    if language:
        return jsonify(language)
    else:
        return jsonify({"error": "Language not found"}), 404

@app.route('/languages/<int:language_id>/lessons', methods=['GET'])
def get_language_lessons(language_id):
    lessons_for_language = [l for l in lessons if l['language'] == language_id]
    if lessons_for_language:
        return jsonify(lessons_for_language)
    else:
        return jsonify({"error": "No lessons found for this language"}), 404

@app.route('/lessons/<int:lesson_id>', methods=['GET'])
def get_lesson(lesson_id):
    lesson = next((l for l in lessons if l['id'] == lesson_id), None)
    if lesson:
        return jsonify(lesson)
    else:
        return jsonify({"error": "Lesson not found"}), 404

@app.route('/languages/<int:language_id>/quizzes', methods=['GET'])
def get_language_quizzes(language_id):
    quizzes_for_language = [q for q in quizzes if q['language'] == language_id]
    if quizzes_for_language:
        return jsonify(quizzes_for_language)
    else:
        return jsonify({"error": "No quizzes found for this language"}), 404

@app.route('/quizzes/<int:quiz_id>', methods=['GET'])
def get_quiz(quiz_id):
    quiz = next((q for q in quizzes if q['id'] == quiz_id), None)
    if quiz:
        quiz_questions = [q for q in questions if q['id'] in quiz['questions']]
        quiz['questions'] = quiz_questions
        return jsonify(quiz)
    else:
        return jsonify({"error": "Quiz not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)


### .\test\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\test\products\admin.py ###
from django.contrib import admin
from .models import Product

# Register your models here.

admin.site.register(Product)

### .\test\products\apps.py ###
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


### .\test\products\models.py ###
from django.db import models

# Create your models here.
class Product(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True,null=True)
    price = models.DecimalField(max_digits=15, decimal_places=2,default=99.99)

    @property
    def sale_price(self):
        return f"{float(self.price) * 0.9:.2f}"
    
    def get_discount_price(self):
        return f"{float(self.price) * 0.8:.2f}"


### .\test\products\serializers.py ###
from rest_framework import serializers

from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = Product
        fields = ['pk','title', 'content', 'price', 'sale_price','my_discount']
    
    def get_my_discount(self, obj):
        if not hasattr(obj,'id'):
            return None
        if not isinstance(obj, Product):
            return None
        return obj.get_discount_price()


### .\test\products\tests.py ###
from django.test import RequestFactory, TestCase
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from .models import Product
# Create your tests here.


class TestProductApi(APITestCase):
    def setUp(self):
        self.factory = RequestFactory()
        Product.objects.create(title="First Product", content="First Content", price=100)
    def test_product_detail(self):
        url = reverse("product-detail", args=[1])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_product_detail_404(self):
        url = reverse("product-detail", args=[1000])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)


### .\test\products\urls.py ###
from django.urls import path
from . import views

urlpatterns = [
    path("", views.ProductListCreateApiView.as_view(), name="product-create-list"),
    path("<int:pk>/update/", views.ProductUpdateApiView.as_view(), name="product-detail"),
    path("<int:pk>/delete/", views.ProductDeleteApiView.as_view(), name="product-detail"),
    path("<int:pk>", views.ProductDetailApiView.as_view(), name="product-detail"),
]

### .\test\products\views.py ###
from rest_framework import generics, mixins, permissions, authentication
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Product
from django.shortcuts import get_object_or_404
from api.authentication import TokenAuthentication
from .serializers import ProductSerializer
from api.mixins import StaffEditorPermissionMixIn

class ProductMixinView(StaffEditorPermissionMixIn, generics.GenericAPIView, mixins.ListModelMixin, mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    

    def get(self, request, *args, **kwargs):
        if kwargs.get('pk'):
            return self.retrieve(request, *args, **kwargs)
        return self.list(request, *args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)
    


class ProductDetailApiView(StaffEditorPermissionMixIn, generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductListCreateApiView(StaffEditorPermissionMixIn, generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    #Set which fields to be used for creating the new model
    def perform_create(self, serializer):
        # serializer.save(user=self.request.user)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') or None
        if content is None:
            content=title
        serializer.save(content=content)

class ProductListApiView(StaffEditorPermissionMixIn, generics.ListAPIView):
    #Going to use ListCreateAPIView instead of ListAPIView.

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductUpdateApiView(StaffEditorPermissionMixIn,generics.UpdateAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title
            instance.save()

class ProductDeleteApiView(StaffEditorPermissionMixIn,generics.DestroyAPIView):
    
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


@api_view(['GET', 'POST'])

def product_alt_view(request, pk=None, *args, **kwargs):
    if request.method == 'GET':
        if pk is not None:
            product = get_object_or_404(Product, pk=pk)
            data = ProductSerializer(product).data
            return Response(data)
        
        products = Product.objects.all()
        data = ProductSerializer(products, many=True).data
        return Response(data)
    elif request.method == 'POST':
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            title = serializer.validated_data.get('title')
            content = serializer.validated_data.get('content') or None
            if content is None:
                content=title
            serializer.save(content=content)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)

### .\test\products\viewsets.py ###
#Normally goes into views.py
from rest_framework import mixins, viewsets

from .models import Product
from .serializers import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

class ProductGenericViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.RetrieveModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

### .\test\requirments.txt ###
django==4.2.11
djangorestframework
pyyaml
requests
django-cors-headers

### .\test.txt ###
### .\.env ###
SECRET_KEY=4412421124142
DEBUG=True
ALLOWED_HOSTS=localhost 127.0.0.1
DATABASE_URL=your-database-url

GOOGLE_GENERATIVE_AI_API_KEY=AIzaSyAycw0N3czwCu-m3B1ZQ6apwQLN8QLLwFU

### .\aiLingo\aiLingo\asgi.py ###
"""
ASGI config for aiLingo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_asgi_application()


### .\aiLingo\aiLingo\settings.py ###
"""
Django settings for aiLingo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0b3)jdf!ev5a)r4bloar5gpgdi5%7kvzdn)g2$bmdxs&ed$hwp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'users',
    'lessons',
    'languages',
    'quizzes',
    'analytics',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aiLingo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aiLingo.wsgi.application'

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',  # Add the URL of your React frontend
]
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
AUTH_USER_MODEL = 'users.User'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
GOOGLE_GENERATIVE_AI_API_KEY = os.getenv('GOOGLE_GENERATIVE_AI_API_KEY')
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

### .\aiLingo\aiLingo\urls.py ###
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/users/', include('users.urls')),
    path('api/languages/', include('languages.urls')),
    path('api/quizzes/', include('quizzes.urls')),
    path('api/lessons/', include('lessons.urls')),
    path('analytics/', include('analytics.urls')),
]

### .\aiLingo\aiLingo\wsgi.py ###
"""
WSGI config for aiLingo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_wsgi_application()


### .\aiLingo\analytics\admin.py ###
from django.contrib import admin

# Register your models here.


### .\aiLingo\analytics\apps.py ###
from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'analytics'


### .\aiLingo\analytics\models.py ###
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class Analytics(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    data = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

### .\aiLingo\analytics\serializers.py ###
from rest_framework import serializers
from .models import Analytics

class AnalyticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Analytics
        fields = ['id', 'user', 'data', 'created_at', 'updated_at']

### .\aiLingo\analytics\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\analytics\urls.py ###
from django.urls import path
from .views import AnalyticsView

urlpatterns = [
    path('', AnalyticsView.as_view(), name='analytics'),
]

### .\aiLingo\analytics\views.py ###
from rest_framework import generics
from .models import Analytics
from .serializers import AnalyticsSerializer

class AnalyticsView(generics.RetrieveUpdateAPIView):
    queryset = Analytics.objects.all()
    serializer_class = AnalyticsSerializer

    def get_object(self):
        user = self.request.user
        obj, _ = Analytics.objects.get_or_create(user=user)
        return obj

### .\aiLingo\languages\admin.py ###
from django.contrib import admin
from .models import Language

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ('name', 'code')
    search_fields = ('name',)

### .\aiLingo\languages\apps.py ###
from django.apps import AppConfig


class LanguagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'languages'


### .\aiLingo\languages\models.py ###
from django.db import models

# Create your models here.
from django.db import models

class Language(models.Model):
    code = models.CharField(max_length=10)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name



### .\aiLingo\languages\serializers.py ###
from rest_framework import serializers
from .models import Language

class LanguageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Language
        fields = ['id', 'name', 'code']

### .\aiLingo\languages\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\languages\urls.py ###
from django.urls import path
from .views import (
    LanguageListCreateView,
    LanguageRetrieveUpdateDestroyView,
)

urlpatterns = [
    path('', LanguageListCreateView.as_view(), name='language-list-create'),
    path('<int:pk>/', LanguageRetrieveUpdateDestroyView.as_view(), name='language-retrieve-update-destroy'),
]

### .\aiLingo\languages\views.py ###
from rest_framework import generics
from .models import Language
from .serializers import LanguageSerializer

class LanguageListCreateView(generics.ListCreateAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

class LanguageRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

### .\aiLingo\lessons\admin.py ###
from django.contrib import admin
from .models import Lesson

@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ('title', 'language')
    list_filter = ('language',)
    search_fields = ('title', 'content')

### .\aiLingo\lessons\apps.py ###
from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lessons'


### .\aiLingo\lessons\models.py ###
from django.db import models
from users.models import User
from languages.models import Language

class Lesson(models.Model):
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title

class UserLesson(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    # Add any additional fields related to user's progress or interaction with the lesson

### .\aiLingo\lessons\serializers.py ###
from rest_framework import serializers
from .models import Lesson, UserLesson

class LessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Lesson
        fields = ['id', 'language', 'title', 'content']

class UserLessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLesson
        fields = ['id', 'user', 'lesson', 'completed']

### .\aiLingo\lessons\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\lessons\urls.py ###
from django.urls import path
from .views import (
    # LessonListCreateView,
    # LessonRetrieveUpdateDestroyView,
    UserLessonListCreateView,
    UserLessonRetrieveUpdateDestroyView,
)

urlpatterns = [
    # path('lessons/', LessonListCreateView.as_view(), name='lesson-list-create'),
    # path('lessons/<int:pk>/', LessonRetrieveUpdateDestroyView.as_view(), name='lesson-retrieve-update-destroy'),
    path('', UserLessonListCreateView.as_view(), name='user-lesson-list-create'),
    path('<int:pk>/', UserLessonRetrieveUpdateDestroyView.as_view(), name='user-lesson-retrieve-update-destroy'),
]

### .\aiLingo\lessons\views.py ###
from rest_framework import generics
from .models import Lesson, UserLesson
from .serializers import LessonSerializer, UserLessonSerializer

# class LessonListCreateView(generics.ListCreateAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

# class LessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

class UserLessonListCreateView(generics.ListCreateAPIView):
    serializer_class = UserLessonSerializer

    def get_queryset(self):
        return UserLesson.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class UserLessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = UserLesson.objects.all()
    serializer_class = UserLessonSerializer

### .\aiLingo\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\aiLingo\quizzes\admin.py ###
from django.contrib import admin
from .models import Quiz, Question, Attempt

@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    list_display = ('title', 'language', 'duration', 'passing_score')
    list_filter = ('language',)
    search_fields = ('title',)

@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ('text', 'quiz')
    list_filter = ('quiz',)
    search_fields = ('text',)

@admin.register(Attempt)
class AttemptAdmin(admin.ModelAdmin):
    list_display = ('user', 'quiz', 'score', 'date')
    list_filter = ('quiz', 'user')
    search_fields = ('user__username',)

### .\aiLingo\quizzes\apps.py ###
from django.apps import AppConfig


class QuizzesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'quizzes'


### .\aiLingo\quizzes\models.py ###
from django.db import models

# Create your models here.
from django.db import models
from users.models import User
from languages.models import Language

from django.db import models
from django.conf import settings

class Quiz(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, default=1)
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    duration = models.IntegerField()
    passing_score = models.IntegerField()

    def __str__(self):
        return self.title

class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    text = models.TextField()
    choices = models.JSONField(null=True, blank=True)
    answer = models.IntegerField()
    explanations = models.JSONField(null=True, blank=True)

    def __str__(self):
        return self.text[:50]

class Attempt(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.quiz.title} - {self.score}%"


### .\aiLingo\quizzes\serializers.py ###
from rest_framework import serializers
from .models import Question, Quiz, Attempt

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        fields = ['id', 'quiz', 'text', 'choices', 'answer', 'explanations']

class QuizSerializer(serializers.ModelSerializer):
    class Meta:
        model = Quiz
        fields = ['id', 'language', 'title', 'duration', 'passing_score']

class AttemptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attempt
        fields = ['id', 'user', 'quiz', 'score', 'date']

### .\aiLingo\quizzes\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\quizzes\urls.py ###
from django.urls import path
from .views import CreateQuizView, GenerateQuestionView, QuizListCreateView, QuizQuestionsView, QuizRetrieveUpdateDestroyView

urlpatterns = [
    path('', QuizListCreateView.as_view(), name='quiz-list-create'),
    path('<int:pk>/', QuizRetrieveUpdateDestroyView.as_view(), name='quiz-retrieve-update-destroy'),
    path('<int:quiz_id>/generate-question/', GenerateQuestionView.as_view(), name='generate-question'),
    path('create/', CreateQuizView.as_view(), name='create-quiz'),
    path('<int:quiz_id>/questions/', QuizQuestionsView.as_view(), name='quiz-questions'),
]

### .\aiLingo\quizzes\views.py ###
import re
from django.conf import settings
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Attempt, Question, Quiz
from .serializers import AttemptSerializer, QuestionSerializer, QuizSerializer
import google.generativeai as genai
from analytics.models import Analytics
from analytics.serializers import AnalyticsSerializer

class GenerateQuestionView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = QuestionSerializer

    def post(self, request, quiz_id):
        quiz_id = self.kwargs['quiz_id']
        quiz = Quiz.objects.get(id=quiz_id)
        prompt = request.data['prompt']
        language = quiz.language
        # Configure the Gemini AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        prompt_parts = [
            f"You are a teacher of the {language} language. Reply in {language} and make sure to provide examples of use cases when teaching. Be supportive and helpful. Unless specified, generate 5 example questions. When giving the answer key to questions, use the following format: 888333 ANSWERKEY 888333 followed by the answers on the next line.",
            f"input: {prompt}",
            "output: ",
        ]

        response = model.generate_content(prompt_parts)
        generated_text = response.text

        # Extract the generated question and answer key
        question_text = generated_text.split('888333 ANSWERKEY 888333')[0].strip()
        answer_key = generated_text.split('888333 ANSWERKEY 888333')[1].strip()

        question_data = {
            'quiz': quiz.id,
            'text': question_text,
            'answer': answer_key
        }

        if 'choices' in generated_text:
            choices = generated_text.split('choices:')[1].strip().split('\n')
            question_data['choices'] = choices

        serializer = QuestionSerializer(data=question_data)
        serializer.is_valid(raise_exception=True)
        question = serializer.save()

        return Response({'question': serializer.data}, status=status.HTTP_201_CREATED)

class QuizListCreateView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
    def get_queryset(self):
        return Quiz.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class QuizRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
class CreateQuizView(generics.CreateAPIView):
    serializer_class = QuizSerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    def post(self, request, *args, **kwargs):
        serializer = QuizSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        quiz = serializer.instance

        # Configure the Generative AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        home_language = request.user.home_language.name if request.user.home_language else 'English'
        prompt = f"Generate 5 multiple-choice questions for a quiz titled '{quiz.title}' in the {quiz.language} language. Provide explanations for each answer choice in the user's home language: {home_language}. Use the following strict format for each question:\n\nq: <question_text>\nc1: <choice_1>\ne1: <explanation_for_choice_1>\nc2: <choice_2>\ne2: <explanation_for_choice_2>\nc3: <choice_3>\ne3: <explanation_for_choice_3>\nc4: <choice_4>\ne4: <explanation_for_choice_4>\na: <correct_answer_choice_number>\n\nMake sure to include all the required components (q, c1, e1, c2, e2, c3, e3, c4, e4, a) for each question, and provide the correct answer as a choice number (1, 2, 3, or 4). Here's an example of the format for a single question:\n\nq: What is the capital of France?\nc1: London\ne1: London is the capital of the United Kingdom, not France.\nc2: Paris\ne2: Paris is the correct answer. It is the capital of France.\nc3: Berlin\ne3: Berlin is the capital of Germany, not France.\nc4: Madrid\ne4: Madrid is the capital of Spain, not France.\na: 2\n\nPlease generate the questions in this exact format, with each question on a new line."

        response = model.generate_content(prompt)

        generated_text = response.text.strip()

        # Extract the generated questions and answer choices
        questions_data = self.parse_generated_questions(generated_text)
        # Save the generated questions to the database
        for question_data in questions_data:
            question_data['quiz'] = quiz.id
            serializer = QuestionSerializer(data=question_data)
            serializer.is_valid(raise_exception=True)
            serializer.save()
        
        user = request.user
        prompt = f"Update the analytics data for user '{user.username}' based on the quiz '{quiz.title}' they created. Include metrics such as quiz count, average score, and topic preferences."

        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)
        model = genai.GenerativeModel(model_name="gemini-1.0")
        response = model.generate_content(prompt)

        analytics_data = response.text.strip()

        # Update the user's analytics
        analytics_obj, _ = Analytics.objects.get_or_create(user=user)
        analytics_obj.data = analytics_data
        analytics_obj.save()

        return Response(QuizSerializer(quiz).data, status=status.HTTP_201_CREATED)

    def parse_generated_questions(self, text):
        questions_data = []
        question_blocks = text.strip().split("\n\n")

        for block in question_blocks:
            question_data = {}
            lines = block.strip().split("\n")

            for line in lines:
                if ": " in line:
                    key, value = line.split(": ", 1)
                    if key == "q":
                        question_data['text'] = value
                    elif key.startswith("c"):
                        if 'choices' not in question_data:
                            question_data['choices'] = []
                        question_data['choices'].append(value)
                    elif key.startswith("e"):
                        if 'explanations' not in question_data:
                            question_data['explanations'] = []
                        question_data['explanations'].append(value)
                    elif key == "a":
                        question_data['answer'] = int(value)

            if 'text' in question_data and 'choices' in question_data and 'answer' in question_data and 'explanations' in question_data:
                questions_data.append(question_data)

        return questions_data
class QuizQuestionsView(generics.ListAPIView):
    serializer_class = QuestionSerializer

    def get_queryset(self):
        quiz_id = self.kwargs['quiz_id']
        return Question.objects.filter(quiz_id=quiz_id)
class UserAttemptView(generics.CreateAPIView):
    serializer_class = AttemptSerializer

    def post(self, request, *args, **kwargs):
        quiz_id = request.data.get('quiz')
        score = request.data.get('score')

        attempt = Attempt.objects.create(user=request.user, quiz_id=quiz_id, score=score)
        serializer = self.get_serializer(attempt)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

### .\aiLingo\users\admin.py ###
from django.contrib import admin
from .models import User

admin.site.register(User)

### .\aiLingo\users\apps.py ###
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


### .\aiLingo\users\models.py ###
from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractUser
from django.db import models
from languages.models import Language
class User(AbstractUser):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    profile_pic = models.ImageField(upload_to='profile_pics', blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    is_premium = models.BooleanField(default=False)
    home_language = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True, blank=True)

### .\aiLingo\users\serializers.py ###
from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'home_language']

class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'password']


### .\aiLingo\users\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\users\urls.py ###
from django.urls import path
from .views import RegisterView, LoginView, ProfileView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('profile/', ProfileView.as_view(), name='profile'),
]

### .\aiLingo\users\views.py ###
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer, UserRegistrationSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.token_blacklist.models import OutstandingToken

class RegisterView(APIView):
    permission_classes = []
    def post(self, request):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LoginView(APIView):
    permission_classes = []
    def post(self, request):
        email = request.data.get('email')
        password = request.data.get('password')

        if not email or not password:
            return Response({'error': 'Please provide both email and password'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)

        user = authenticate(request, username=user.username, password=password)

        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
                'user': {
                    'id': user.id,
                    'name': user.name,
                    'email': user.email,
                },
            }, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
class ProfileView(APIView):
    def get(self, request):
        user = request.user
        serializer = UserSerializer(user)
        return Response(serializer.data)

### .\requirements.txt ###
django==4.2.11
djangorestframework==3.15.1
google-generativeai
requests
python-dotenv
djangorestframework-simplejwt
Pillow
django-cors-headers


### .\tempfront\ailingo-frontend\.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


### .\tempfront\ailingo-frontend\package.json ###
{
  "name": "ailingo-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "bootstrap": "^5.3.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.2",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.3",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


### .\tempfront\ailingo-frontend\public\index.html ###
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


### .\tempfront\ailingo-frontend\public\manifest.json ###
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


### .\tempfront\ailingo-frontend\public\robots.txt ###
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


### .\tempfront\ailingo-frontend\README.md ###
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


### .\tempfront\ailingo-frontend\src\App.css ###
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


### .\tempfront\ailingo-frontend\src\App.js ###
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Navigation from './components/Navigation';
import Home from './components/Home';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import Languages from './components/Languages';
import Lessons from './components/Lessons';
import Quizzes from './components/Quizzes';
import QuizDetails from './components/QuizDetails';
import GenerateQuestion from './components/GenerateQuestion';
import CreateQuiz from './components/CreateQuiz';
import Profile from './components/Profile';
function App() {
  return (
    <Router>
      <div>
        <Navigation />
        <div className="container">
          <Routes>
            <Route exact path="/" element={<Home />} />
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/languages" element={<Languages />} />
            <Route path="/lessons" element={<Lessons />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/generate-question" element={<GenerateQuestion />} />
            <Route path="/create-quiz" element={<CreateQuiz />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/quizzes/:id" element={<QuizDetails />} />
            <Route path="/profile" element={<Profile />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

export default App;

### .\tempfront\ailingo-frontend\src\App.test.js ###
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


### .\tempfront\ailingo-frontend\src\components\Analytics.js ###
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Analytics() {
  const [analyticsData, setAnalyticsData] = useState(null);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      const response = await axiosInstance.get('/analytics/');
      setAnalyticsData(response.data);
    } catch (error) {
      console.error('Error fetching analytics data:', error);
    }
  };

  return (
    <Container>
      <h1>Analytics</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Analytics</Card.Title>
              {analyticsData && (
                <div>
                  <p>{analyticsData.data}</p>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default Analytics;

### .\tempfront\ailingo-frontend\src\components\CreateQuiz.js ###
import React, { useState, useEffect } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom';

function CreateQuiz() {
  const [title, setTitle] = useState('');
  const [language, setLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const response = await axiosInstance.post('http://localhost:8000/api/quizzes/create/', {
        title,
        language,
        duration: 10,
        passing_score: 50,
      });
      console.log(response.data);
      setSuccess(true);
      setError('');
      setLoading(false);
      navigate('/quizzes');
    } catch (error) {
      console.error(error);
      setError('Failed to create quiz. Please try again.');
      setSuccess(false);
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <div className="create-quiz-form">
        <h2>Create Quiz</h2>
        {success && <p className="success">Quiz created successfully!</p>}
        {error && <p className="error">{error}</p>}
        {loading ? (
          <div className="loading">
            <p>Creating quiz...</p>
            <div className="loading-spinner"></div>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Quiz Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              required
            >
              <option value="">Select Language</option>
              {languages.map((lang) => (
                <option key={lang.id} value={lang.id}>
                  {lang.name}
                </option>
              ))}
            </select>
            <button type="submit">Create Quiz</button>
          </form>
        )}
      </div>
    </div>
  );
}

export default CreateQuiz;

### .\tempfront\ailingo-frontend\src\components\Dashboard.js ###
import React from 'react';
import Profile from './Profile';

function Dashboard() {
  return (
    <div className="container">
      <h2>Welcome to the Dashboard</h2>
      <Profile />
    </div>
  );
}

export default Dashboard;

### .\tempfront\ailingo-frontend\src\components\GenerateQuestion.js ###
import React, { useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function GenerateQuestion() {
  const [quizId, setQuizId] = useState('');
  const [prompt, setPrompt] = useState('');
  const [question, setQuestion] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axiosInstance.post(`http://localhost:8000/api/quizzes/${quizId}/generate-question/`, { prompt });
      setQuestion(response.data.question);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Generate Question</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="number"
          placeholder="Quiz ID"
          value={quizId}
          onChange={(e) => setQuizId(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          required
        />
        <button type="submit">Generate</button>
      </form>
      {question && (
        <div>
          <h3>Generated Question:</h3>
          <p>{question.text}</p>
          <p>Answer: {question.answer}</p>
        </div>
      )}
    </div>
  );
}

export default GenerateQuestion;

### .\tempfront\ailingo-frontend\src\components\Home.js ###
import React from 'react';
import { Container, Row, Col, Button } from 'react-bootstrap';

function Home() {
  return (
    <div className="home">
      <Container>
        <Row className="hero">
          <Col>
            <h1>Welcome to aiLingo</h1>
            <p>Explore languages, lessons, and quizzes.</p>
            <Button variant="primary" size="lg">Get Started</Button>
          </Col>
        </Row>
      </Container>
    </div>
  );
}

export default Home;

### .\tempfront\ailingo-frontend\src\components\Languages.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Languages() {
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="container">
      <h2>Languages</h2>
      <ul>
        {languages.map((language) => (
          <li key={language.id}>{language.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default Languages;

### .\tempfront\ailingo-frontend\src\components\Lessons.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Lessons() {
  const [lessons, setLessons] = useState([]);

  useEffect(() => {
    fetchLessons();
  }, []);

  const fetchLessons = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/lessons/');
      setLessons(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Lessons</h2>
      <ul>
        {lessons.map((lesson) => (
          <li key={lesson.id}>{lesson.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default Lessons;

### .\tempfront\ailingo-frontend\src\components\Login.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/login/', { email, password });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      localStorage.setItem('user', JSON.stringify(response.data.user));
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Invalid credentials. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="container">
      <h2>User Login</h2>
      {success && <p className="success">Login successful!</p>}
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default Login;

### .\tempfront\ailingo-frontend\src\components\Navigation.js ###
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav } from 'react-bootstrap';

function Navigation() {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Navbar.Brand as={Link} to="/">aiLingo</Navbar.Brand>
      <Navbar.Toggle aria-controls="basic-navbar-nav" />
      <Navbar.Collapse id="basic-navbar-nav">
        <Nav className="ml-auto">
          <Nav.Link as={Link} to="/">Home</Nav.Link>
          <Nav.Link as={Link} to="/register">Register</Nav.Link>
          <Nav.Link as={Link} to="/login">Login</Nav.Link>
          <Nav.Link as={Link} to="/languages">Languages</Nav.Link>
          <Nav.Link as={Link} to="/lessons">Lessons</Nav.Link>
          <Nav.Link as={Link} to="/quizzes">Quizzes</Nav.Link>
          <Nav.Link as={Link} to="/profile">Profile</Nav.Link>
        </Nav>
      </Navbar.Collapse>
    </Navbar>
  );
}

export default Navigation;

### .\tempfront\ailingo-frontend\src\components\PrivateRoute.js ###
import React from 'react';
import { Route, Navigate } from 'react-router-dom';

const PrivateRoute = ({ element: Component, ...rest }) => {
    const isAuthenticated = !!localStorage.getItem('access_token');

    return (
        <Route
            {...rest}
            element={isAuthenticated ? <Component {...rest} /> : <Navigate to="/login" />}
        />
    );
};

export default PrivateRoute;

### .\tempfront\ailingo-frontend\src\components\Profile.js ###
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Profile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchUserData();
    console.log("hello");
  }, []);

  const fetchUserData = async () => {
    try {
      const response = await axiosInstance.get('/users/profile/');
      setUser(response.data);
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  const handleLogout = async () => {
    try {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <Container>
      <h1>Profile</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Information</Card.Title>
              <p>Name: {user.name}</p>
              <p>Email: {user.email}</p>
              {/* Display other user information */}
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Row>
        <Col>
          <Button variant="danger" onClick={handleLogout}>
            Logout
          </Button>
        </Col>
      </Row>
    </Container>
  );
}

export default Profile;

### .\tempfront\ailingo-frontend\src\components\QuizDetails.js ###
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';

function QuizDetails() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [score, setScore] = useState(0);

  useEffect(() => {
    fetchQuizDetails();
    fetchQuestions();
  }, []);

  const fetchQuizDetails = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/`);
      setQuiz(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/questions/`);
      setQuestions(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleAnswerSelect = (questionId, selectedAnswer) => {
    setQuestions((prevQuestions) =>
      prevQuestions.map((question) =>
        question.id === questionId
          ? { ...question, selectedAnswer, showExplanation: true }
          : question
      )
    );
  };

  const handleQuizSubmit = async () => {
    const attemptData = {
      quiz: quiz.id,
      score: score,
    };

    try {
      await axiosInstance.post('http://localhost:8000/api/quizzes/attempt/', attemptData);
      // Redirect to a quiz results page or display a success message
    } catch (error) {
      console.error(error);
    }
  };

  if (!quiz) {
    return <div>Loading...</div>;
  }

  return (
    <div className="quiz-details">
      <h2>{quiz.title}</h2>
      <h3>Questions:</h3>
      <ul>
        {questions.map((question) => (
          <li key={question.id} className="question-item">
            <div className="question-text">{question.text}</div>
            <ul className="question-choices">
              {question.choices.map((choice, index) => (
                <li
                  key={index}
                  className={`choice ${
                    question.selectedAnswer === index + 1 ? 'selected' : ''
                  } ${
                    question.showExplanation && question.selectedAnswer === index + 1
                      ? question.answer === index + 1
                        ? 'correct'
                        : 'incorrect'
                      : ''
                  }`}
                  onClick={() => handleAnswerSelect(question.id, index + 1)}
                >
                  {choice}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <span className="choice-icon">
                      {question.answer === index + 1 ? '✔' : '✘'}
                    </span>
                  )}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <div className="choice-explanation">
                      <strong>Explanation:</strong> {question.explanations[index]}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
      <button onClick={handleQuizSubmit}>Submit Quiz</button>
    </div>
  );
}

export default QuizDetails;

### .\tempfront\ailingo-frontend\src\components\Quizzes.js ###
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';

function Quizzes() {
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const fetchQuizzes = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/quizzes/');
      setQuizzes(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="quizzes">
      <Container>
        <h2>Quizzes</h2>
        <Row>
          {quizzes.map((quiz) => (
            <Col md={4} key={quiz.id}>
              <Card>
                <Card.Body>
                  <Card.Title>{quiz.title}</Card.Title>
                  <Card.Text>Language: {quiz.language}</Card.Text>
                  <Card.Text>Duration: {quiz.duration} minutes</Card.Text>
                  <Card.Text>Passing Score: {quiz.passing_score}%</Card.Text>
                  <Button variant="primary" as={Link} to={`/quizzes/${quiz.id}`}>
                    Take Quiz
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
    </div>
  );
}

export default Quizzes;

### .\tempfront\ailingo-frontend\src\components\Register.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Form, Button, Alert } from 'react-bootstrap';

function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [homeLanguage, setHomeLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
    else {
      fetchLanguages();
    }
  }, [navigate]);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/register/', {
        name,
        email,
        password,
        home_language: homeLanguage,
      });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Registration failed. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="register">
      <h2>User Registration</h2>
      {success && <Alert variant="success">Registration successful! You can now log in.</Alert>}
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="name">
          <Form.Label>Name</Form.Label>
          <Form.Control
            type="text"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </Form.Group>
        <input
          type="text"
          placeholder="Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <select
          value={homeLanguage}
          onChange={(e) => setHomeLanguage(e.target.value)}
          required
        >
          <option value="">Select Home Language</option>
          {languages.map((language) => (
            <option key={language.id} value={language.id}>
              {language.name}
            </option>
          ))}
        </select>
        <Button variant="primary" type="submit">Register</Button>
        </Form>
    </div>
  );
}

export default Register;

### .\tempfront\ailingo-frontend\src\index.css ###
/* Global Styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #333;
  color: #fff;
  padding: 10px;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

nav ul li {
  display: inline-block;
  margin-right: 10px;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 5px 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

nav ul li a:hover {
  background-color: #555;
}

/* Form Styles */
form {
  margin-bottom: 20px;
  background-color: #fff;
  padding: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

form input {
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

form button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #555;
}

/* Button Styles */
.btn {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #555;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

/* Error Styles */
.error {
  color: red;
  margin-bottom: 10px;
}

/* Success Styles */
.success {
  color: green;
  margin-bottom: 10px;
}
.profile {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

.profile p {
  margin-bottom: 10px;
}

.profile button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #555;
}
.create-quiz-form {
  max-width: 400px;
  margin: 0 auto;
}

.create-quiz-form h2 {
  font-size: 24px;
  margin-bottom: 20px;
}

.create-quiz-form input {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.create-quiz-form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.create-quiz-form button:hover {
  background-color: #0056b3;
}

.create-quiz-form .success {
  color: green;
  margin-bottom: 10px;
}

.create-quiz-form .error {
  color: red;
  margin-bottom: 10px;
}
/* Global Styles */
body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #2c3e50;
  padding: 15px;
  border-bottom: 4px solid #1abc9c;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

nav ul li {
  display: inline-block;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 10px 20px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
  font-size: 18px;
  font-weight: bold;
}

nav ul li a:hover {
  background-color: #1abc9c;
}

/* Form Styles */
form {
  background-color: #fff;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

form input,
form select {
  width: 100%;
  padding: 12px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 16px;
  outline: none;
}

form input:focus,
form select:focus {
  border-color: #1abc9c;
}

form button {
  width: 100%;
  padding: 12px;
  background-color: #1abc9c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 18px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #16a085;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 24px;
}

/* Success and Error Styles */
.success {
  color: #1abc9c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

.error {
  color: #e74c3c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

/* Profile Styles */
.profile {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 28px;
}

.profile p {
  margin-bottom: 20px;
  color: #555;
  font-size: 18px;
}

.profile button {
  padding: 10px 20px;
  background-color: #e74c3c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #c0392b;
}
.quiz-list {
  list-style-type: none;
  padding: 0;
}

.quiz-list li {
  margin-bottom: 10px;
}

.quiz-list a {
  display: block;
  padding: 10px;
  background-color: #f5f5f5;
  color: #333;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.quiz-list a:hover {
  background-color: #e0e0e0;
}

/* Quiz Details Styles */
.quiz-details {
  margin-top: 20px;
}

.quiz-details h3 {
  margin-top: 0;
}

.quiz-details ul {
  list-style-type: none;
  padding: 0;
}

.quiz-details li {
  margin-bottom: 10px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
.question-item {
  cursor: pointer;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-item:hover {
  background-color: #e8e8e8;
}

.question-text {
  font-size: 18px;
  font-weight: bold;
}

.question-answer {
  margin-top: 10px;
  padding: 10px;
  background-color: #e0f0ff;
  border-radius: 4px;
}
.question-item {
  margin-bottom: 30px;
}

.question-text {
  cursor: pointer;
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-text:hover {
  background-color: #e8e8e8;
}

.question-choices {
  margin-top: 10px;
  margin-bottom: 10px;
  padding-left: 20px;
}

.question-choices li {
  margin-bottom: 5px;
}

.question-answer {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease;
  background-color: #e0f0ff;
  padding: 0 15px;
  border-radius: 4px;
}

.question-answer.show {
  max-height: 100px;
  padding: 15px;
}
.question-choices li {
  cursor: pointer;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.question-choices li:hover {
  background-color: #f0f0f0;
}

.question-choices li.selected {
  background-color: #e0f0ff;
}

.question-choices li.correct {
  background-color: #d4edda;
}

.question-choices li.incorrect {
  background-color: #f8d7da;
}

.choice-icon {
  margin-left: 10px;
  font-size: 18px;
}

.question-explanation {
  margin-top: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
}
@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spinner 1.5s linear infinite;
  margin: 20px auto;
}

### .\tempfront\ailingo-frontend\src\index.js ###
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

### .\tempfront\ailingo-frontend\src\logo.svg ###
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

### .\tempfront\ailingo-frontend\src\reportWebVitals.js ###
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


### .\tempfront\ailingo-frontend\src\setupTests.js ###
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


### .\tempfront\ailingo-frontend\src\utils\axiosInstance.js ###
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'http://localhost:8000/api/',
});

axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem('access_token');
  if (token) {
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
});

export default axiosInstance;

### .\tempfront\package.json ###
{
  "dependencies": {
    "axios": "^1.6.8",
    "react-router-dom": "^6.22.3"
  }
}


### .\test\api\admin.py ###
from django.contrib import admin
# Register your models here.


### .\test\api\apps.py ###
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'


### .\test\api\authentication.py ###
from rest_framework.authentication import TokenAuthentication as BaseTokenAuthentication
class TokenAuthentication(BaseTokenAuthentication):
    keyword = 'Bearer'

    

### .\test\api\mixins.py ###
from rest_framework import permissions
from .permissions import IsStaffEditorPermission    

class StaffEditorPermissionMixIn():
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

### .\test\api\models.py ###
from django.db import models

# Create your models here.


### .\test\api\permissions.py ###
from rest_framework import permissions

class IsStaffEditorPermission(permissions.DjangoModelPermissions):
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }
    # def has_permission(self, request, view):
    #     if not request.user.is_staff:
    #         return False
    #     return super().has_permission(request, view)
    # def has_permission(self, request, view):
    #     user = request.user
    #     if user.is_staff:
    #         if(user.has_perm("products.view_product")):
    #             return True
    #         if(user.has_perm("products.change_product")):
    #             return True
    #         if(user.has_perm("products.add_product")):
    #             return True
    #         if(user.has_perm("products.delete_product")):
    #             return True
    #     return False


### .\test\api\tests.py ###
from django.test import TestCase
from django.urls import reverse
from products.models import Product
# Create your tests here.

class BasicTest(TestCase):
    @classmethod
    def setUpTestData(cls) -> None:
        Product.objects.create(title="ti")
    # def test_url_exist(self):
    #     url = reverse("home")
    #     self.assertEqual(self.client.get(url).status_code,200)
    #     print(self.client.get(url).content)

### .\test\api\urls.py ###
from django.urls import path
from rest_framework.authtoken.views import obtain_auth_token
from . import views

urlpatterns = [
    path('auth/', obtain_auth_token,name="auth"),
    path('',views.api_home,name="home")
]


### .\test\api\views.py ###
from django.http import JsonResponse
from products.serializers import ProductSerializer
from products.models import Product
from rest_framework.response import Response
from rest_framework.decorators import api_view
# Create your views here.

@api_view(["POST"])
def api_home(request, *args, **kwargs):
    serializer = ProductSerializer(data=request.data)
    if serializer.is_valid(raise_exception=True):
        # data = serializer.save()
        return Response(serializer.data)

### .\test\cfehome\asgi.py ###
"""
ASGI config for cfehome project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_asgi_application()


### .\test\cfehome\routers.py ###
#Normally would go to urls.py
from rest_framework.routers import DefaultRouter
from products.viewsets import ProductViewSet, ProductGenericViewSet

router = DefaultRouter()
router.register('products-abc', ProductGenericViewSet, basename='products')

urlpatterns = router.urls

### .\test\cfehome\settings.py ###
"""
Django settings for cfehome project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o32l^k3%9ztw*2%11alx3ziu!4^66xouwc39v!_b@fby_&j%s_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'products',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cfehome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cfehome.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'api.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


### .\test\cfehome\urls.py ###
"""
URL configuration for cfehome project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls')),
    path('api/products/',include('products.urls')),
    path('api/v2/',include('cfehome.routers')),
]


### .\test\cfehome\wsgi.py ###
"""
WSGI config for cfehome project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_wsgi_application()


### .\test\example.py ###
from flask import Flask, jsonify
"""
GET /languages: Get a list of all languages
GET /languages/<int:language_id>: Get details of a specific language
GET /languages/<int:language_id>/lessons: Get a list of lessons for a specific language
GET /lessons/<int:lesson_id>: Get details of a specific lesson
GET /languages/<int:language_id>/quizzes: Get a list of quizzes for a specific language
GET /quizzes/<int:quiz_id>: Get details of a specific quiz, including its questions

to run:
make a venv (python -m venv .venv)
activate the venv (source .venv/Scripts/activate for windows, source .venv/bin/activate for mac)
pip install flask
flask -app example.py

"""
app = Flask(__name__)
from flask_cors import CORS

CORS(app)
# Languages Models
languages = [
    {
        "id": 1,
        "name": "English",
        "code": "en"
    },
    {
        "id": 2,
        "name": "Spanish",
        "code": "es"
    },
    {
        "id": 3,
        "name": "French",
        "code": "fr"
    }
]

lessons = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Basics",
        "content": "This is the content for the English Grammar Basics lesson.",
        "tags": ["beginner", "english", "grammar"]
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary",
        "content": "This is the content for the Spanish Vocabulary lesson.",
        "tags": ["beginner", "spanish", "vocabulary"]
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation",
        "content": "This is the content for the French Pronunciation lesson.",
        "tags": ["intermediate", "french", "pronunciation"]
    }
]

quizzes = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Quiz",
        "questions": [1, 2],
        "duration": 30,
        "passing_score": 80
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary Quiz",
        "questions": [3, 4],
        "duration": 45,
        "passing_score": 75
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation Quiz",
        "questions": [5, 6],
        "duration": 20,
        "passing_score": 70
    }
]

questions = [
    {
        "id": 1,
        "text": "What is the correct way to use the verb 'to be' in the present tense?",
        "choices": ["I is", "I am", "I are", "I be"],
        "answer": 1
    },
    {
        "id": 2,
        "text": "What is the plural form of 'child'?",
        "choices": ["childs", "childrens", "children", "childres"],
        "answer": 2
    },
    {
        "id": 3,
        "text": "What is the Spanish word for 'book'?",
        "choices": ["libro", "papel", "cuaderno", "lapiz"],
        "answer": 0
    },
    {
        "id": 4,
        "text": "How do you say 'Hello' in Spanish?",
        "choices": ["Hola", "Adios", "Gracias", "Buenos dias"],
        "answer": 0
    },
    {
        "id": 5,
        "text": "How is the word 'bonjour' pronounced in French?",
        "choices": ["bon-jour", "bon-zhoor", "bon-joor", "bon-jure"],
        "answer": 1
    },
    {
        "id": 6,
        "text": "What is the correct pronunciation of the French word 'merci'?",
        "choices": ["mer-see", "mer-see", "mer-chi", "mer-key"],
        "answer": 1
    }
]

# Routes
@app.route('/languages', methods=['GET'])
def get_languages():
    return jsonify(languages)

@app.route('/languages/<int:language_id>', methods=['GET'])
def get_language(language_id):
    language = next((l for l in languages if l['id'] == language_id), None)
    if language:
        return jsonify(language)
    else:
        return jsonify({"error": "Language not found"}), 404

@app.route('/languages/<int:language_id>/lessons', methods=['GET'])
def get_language_lessons(language_id):
    lessons_for_language = [l for l in lessons if l['language'] == language_id]
    if lessons_for_language:
        return jsonify(lessons_for_language)
    else:
        return jsonify({"error": "No lessons found for this language"}), 404

@app.route('/lessons/<int:lesson_id>', methods=['GET'])
def get_lesson(lesson_id):
    lesson = next((l for l in lessons if l['id'] == lesson_id), None)
    if lesson:
        return jsonify(lesson)
    else:
        return jsonify({"error": "Lesson not found"}), 404

@app.route('/languages/<int:language_id>/quizzes', methods=['GET'])
def get_language_quizzes(language_id):
    quizzes_for_language = [q for q in quizzes if q['language'] == language_id]
    if quizzes_for_language:
        return jsonify(quizzes_for_language)
    else:
        return jsonify({"error": "No quizzes found for this language"}), 404

@app.route('/quizzes/<int:quiz_id>', methods=['GET'])
def get_quiz(quiz_id):
    quiz = next((q for q in quizzes if q['id'] == quiz_id), None)
    if quiz:
        quiz_questions = [q for q in questions if q['id'] in quiz['questions']]
        quiz['questions'] = quiz_questions
        return jsonify(quiz)
    else:
        return jsonify({"error": "Quiz not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)


### .\test\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\test\products\admin.py ###
from django.contrib import admin
from .models import Product

# Register your models here.

admin.site.register(Product)

### .\test\products\apps.py ###
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


### .\test\products\models.py ###
from django.db import models

# Create your models here.
class Product(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True,null=True)
    price = models.DecimalField(max_digits=15, decimal_places=2,default=99.99)

    @property
    def sale_price(self):
        return f"{float(self.price) * 0.9:.2f}"
    
    def get_discount_price(self):
        return f"{float(self.price) * 0.8:.2f}"


### .\test\products\serializers.py ###
from rest_framework import serializers

from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = Product
        fields = ['pk','title', 'content', 'price', 'sale_price','my_discount']
    
    def get_my_discount(self, obj):
        if not hasattr(obj,'id'):
            return None
        if not isinstance(obj, Product):
            return None
        return obj.get_discount_price()


### .\test\products\tests.py ###
from django.test import RequestFactory, TestCase
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from .models import Product
# Create your tests here.


class TestProductApi(APITestCase):
    def setUp(self):
        self.factory = RequestFactory()
        Product.objects.create(title="First Product", content="First Content", price=100)
    def test_product_detail(self):
        url = reverse("product-detail", args=[1])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_product_detail_404(self):
        url = reverse("product-detail", args=[1000])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)


### .\test\products\urls.py ###
from django.urls import path
from . import views

urlpatterns = [
    path("", views.ProductListCreateApiView.as_view(), name="product-create-list"),
    path("<int:pk>/update/", views.ProductUpdateApiView.as_view(), name="product-detail"),
    path("<int:pk>/delete/", views.ProductDeleteApiView.as_view(), name="product-detail"),
    path("<int:pk>", views.ProductDetailApiView.as_view(), name="product-detail"),
]

### .\test\products\views.py ###
from rest_framework import generics, mixins, permissions, authentication
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Product
from django.shortcuts import get_object_or_404
from api.authentication import TokenAuthentication
from .serializers import ProductSerializer
from api.mixins import StaffEditorPermissionMixIn

class ProductMixinView(StaffEditorPermissionMixIn, generics.GenericAPIView, mixins.ListModelMixin, mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    

    def get(self, request, *args, **kwargs):
        if kwargs.get('pk'):
            return self.retrieve(request, *args, **kwargs)
        return self.list(request, *args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)
    


class ProductDetailApiView(StaffEditorPermissionMixIn, generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductListCreateApiView(StaffEditorPermissionMixIn, generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    #Set which fields to be used for creating the new model
    def perform_create(self, serializer):
        # serializer.save(user=self.request.user)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') or None
        if content is None:
            content=title
        serializer.save(content=content)

class ProductListApiView(StaffEditorPermissionMixIn, generics.ListAPIView):
    #Going to use ListCreateAPIView instead of ListAPIView.

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductUpdateApiView(StaffEditorPermissionMixIn,generics.UpdateAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title
            instance.save()

class ProductDeleteApiView(StaffEditorPermissionMixIn,generics.DestroyAPIView):
    
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


@api_view(['GET', 'POST'])

def product_alt_view(request, pk=None, *args, **kwargs):
    if request.method == 'GET':
        if pk is not None:
            product = get_object_or_404(Product, pk=pk)
            data = ProductSerializer(product).data
            return Response(data)
        
        products = Product.objects.all()
        data = ProductSerializer(products, many=True).data
        return Response(data)
    elif request.method == 'POST':
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            title = serializer.validated_data.get('title')
            content = serializer.validated_data.get('content') or None
            if content is None:
                content=title
            serializer.save(content=content)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)

### .\test\products\viewsets.py ###
#Normally goes into views.py
from rest_framework import mixins, viewsets

from .models import Product
from .serializers import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

class ProductGenericViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.RetrieveModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

### .\test\requirments.txt ###
django==4.2.11
djangorestframework
pyyaml
requests
django-cors-headers

### .\test.txt ###
### .\.env ###
SECRET_KEY=4412421124142
DEBUG=True
ALLOWED_HOSTS=localhost 127.0.0.1
DATABASE_URL=your-database-url

GOOGLE_GENERATIVE_AI_API_KEY=AIzaSyAycw0N3czwCu-m3B1ZQ6apwQLN8QLLwFU

### .\aiLingo\aiLingo\asgi.py ###
"""
ASGI config for aiLingo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_asgi_application()


### .\aiLingo\aiLingo\settings.py ###
"""
Django settings for aiLingo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0b3)jdf!ev5a)r4bloar5gpgdi5%7kvzdn)g2$bmdxs&ed$hwp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'users',
    'lessons',
    'languages',
    'quizzes',
    'analytics',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aiLingo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aiLingo.wsgi.application'

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',  # Add the URL of your React frontend
]
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
AUTH_USER_MODEL = 'users.User'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
GOOGLE_GENERATIVE_AI_API_KEY = os.getenv('GOOGLE_GENERATIVE_AI_API_KEY')
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

### .\aiLingo\aiLingo\urls.py ###
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/users/', include('users.urls')),
    path('api/languages/', include('languages.urls')),
    path('api/quizzes/', include('quizzes.urls')),
    path('api/lessons/', include('lessons.urls')),
    path('analytics/', include('analytics.urls')),
]

### .\aiLingo\aiLingo\wsgi.py ###
"""
WSGI config for aiLingo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')

application = get_wsgi_application()


### .\aiLingo\analytics\admin.py ###
from django.contrib import admin

# Register your models here.


### .\aiLingo\analytics\apps.py ###
from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'analytics'


### .\aiLingo\analytics\models.py ###
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class Analytics(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    data = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

### .\aiLingo\analytics\serializers.py ###
from rest_framework import serializers
from .models import Analytics

class AnalyticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = Analytics
        fields = ['id', 'user', 'data', 'created_at', 'updated_at']

### .\aiLingo\analytics\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\analytics\urls.py ###
from django.urls import path
from .views import AnalyticsView

urlpatterns = [
    path('', AnalyticsView.as_view(), name='analytics'),
]

### .\aiLingo\analytics\views.py ###
from rest_framework import generics
from .models import Analytics
from .serializers import AnalyticsSerializer

class AnalyticsView(generics.RetrieveUpdateAPIView):
    queryset = Analytics.objects.all()
    serializer_class = AnalyticsSerializer

    def get_object(self):
        user = self.request.user
        obj, _ = Analytics.objects.get_or_create(user=user)
        return obj

### .\aiLingo\languages\admin.py ###
from django.contrib import admin
from .models import Language

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ('name', 'code')
    search_fields = ('name',)

### .\aiLingo\languages\apps.py ###
from django.apps import AppConfig


class LanguagesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'languages'


### .\aiLingo\languages\models.py ###
from django.db import models

# Create your models here.
from django.db import models

class Language(models.Model):
    code = models.CharField(max_length=10)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name



### .\aiLingo\languages\serializers.py ###
from rest_framework import serializers
from .models import Language

class LanguageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Language
        fields = ['id', 'name', 'code']

### .\aiLingo\languages\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\languages\urls.py ###
from django.urls import path
from .views import (
    LanguageListCreateView,
    LanguageRetrieveUpdateDestroyView,
)

urlpatterns = [
    path('', LanguageListCreateView.as_view(), name='language-list-create'),
    path('<int:pk>/', LanguageRetrieveUpdateDestroyView.as_view(), name='language-retrieve-update-destroy'),
]

### .\aiLingo\languages\views.py ###
from rest_framework import generics
from .models import Language
from .serializers import LanguageSerializer

class LanguageListCreateView(generics.ListCreateAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

class LanguageRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer

### .\aiLingo\lessons\admin.py ###
from django.contrib import admin
from .models import Lesson

@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ('title', 'language')
    list_filter = ('language',)
    search_fields = ('title', 'content')

### .\aiLingo\lessons\apps.py ###
from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'lessons'


### .\aiLingo\lessons\models.py ###
from django.db import models
from users.models import User
from languages.models import Language

class Lesson(models.Model):
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title

class UserLesson(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    # Add any additional fields related to user's progress or interaction with the lesson

### .\aiLingo\lessons\serializers.py ###
from rest_framework import serializers
from .models import Lesson, UserLesson

class LessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Lesson
        fields = ['id', 'language', 'title', 'content']

class UserLessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLesson
        fields = ['id', 'user', 'lesson', 'completed']

### .\aiLingo\lessons\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\lessons\urls.py ###
from django.urls import path
from .views import (
    # LessonListCreateView,
    # LessonRetrieveUpdateDestroyView,
    UserLessonListCreateView,
    UserLessonRetrieveUpdateDestroyView,
)

urlpatterns = [
    # path('lessons/', LessonListCreateView.as_view(), name='lesson-list-create'),
    # path('lessons/<int:pk>/', LessonRetrieveUpdateDestroyView.as_view(), name='lesson-retrieve-update-destroy'),
    path('', UserLessonListCreateView.as_view(), name='user-lesson-list-create'),
    path('<int:pk>/', UserLessonRetrieveUpdateDestroyView.as_view(), name='user-lesson-retrieve-update-destroy'),
]

### .\aiLingo\lessons\views.py ###
from rest_framework import generics
from .models import Lesson, UserLesson
from .serializers import LessonSerializer, UserLessonSerializer

# class LessonListCreateView(generics.ListCreateAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

# class LessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

class UserLessonListCreateView(generics.ListCreateAPIView):
    serializer_class = UserLessonSerializer

    def get_queryset(self):
        return UserLesson.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class UserLessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = UserLesson.objects.all()
    serializer_class = UserLessonSerializer

### .\aiLingo\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aiLingo.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\aiLingo\quizzes\admin.py ###
from django.contrib import admin
from .models import Quiz, Question, Attempt

@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    list_display = ('title', 'language', 'duration', 'passing_score')
    list_filter = ('language',)
    search_fields = ('title',)

@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ('text', 'quiz')
    list_filter = ('quiz',)
    search_fields = ('text',)

@admin.register(Attempt)
class AttemptAdmin(admin.ModelAdmin):
    list_display = ('user', 'quiz', 'score', 'date')
    list_filter = ('quiz', 'user')
    search_fields = ('user__username',)

### .\aiLingo\quizzes\apps.py ###
from django.apps import AppConfig


class QuizzesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'quizzes'


### .\aiLingo\quizzes\models.py ###
from django.db import models

# Create your models here.
from django.db import models
from users.models import User
from languages.models import Language

from django.db import models
from django.conf import settings

class Quiz(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, default=1)
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    duration = models.IntegerField()
    passing_score = models.IntegerField()

    def __str__(self):
        return self.title

class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    text = models.TextField()
    choices = models.JSONField(null=True, blank=True)
    answer = models.IntegerField()
    explanations = models.JSONField(null=True, blank=True)

    def __str__(self):
        return self.text[:50]

class Attempt(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.quiz.title} - {self.score}%"


### .\aiLingo\quizzes\serializers.py ###
from rest_framework import serializers
from .models import Question, Quiz, Attempt

class QuestionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Question
        fields = ['id', 'quiz', 'text', 'choices', 'answer', 'explanations']

class QuizSerializer(serializers.ModelSerializer):
    class Meta:
        model = Quiz
        fields = ['id', 'language', 'title', 'duration', 'passing_score']

class AttemptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attempt
        fields = ['id', 'user', 'quiz', 'score', 'date']

### .\aiLingo\quizzes\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\quizzes\urls.py ###
from django.urls import path
from .views import CreateQuizView, GenerateQuestionView, QuizListCreateView, QuizQuestionsView, QuizRetrieveUpdateDestroyView

urlpatterns = [
    path('', QuizListCreateView.as_view(), name='quiz-list-create'),
    path('<int:pk>/', QuizRetrieveUpdateDestroyView.as_view(), name='quiz-retrieve-update-destroy'),
    path('<int:quiz_id>/generate-question/', GenerateQuestionView.as_view(), name='generate-question'),
    path('create/', CreateQuizView.as_view(), name='create-quiz'),
    path('<int:quiz_id>/questions/', QuizQuestionsView.as_view(), name='quiz-questions'),
]

### .\aiLingo\quizzes\views.py ###
import re
from django.conf import settings
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Attempt, Question, Quiz
from .serializers import AttemptSerializer, QuestionSerializer, QuizSerializer
import google.generativeai as genai
from analytics.models import Analytics
from analytics.serializers import AnalyticsSerializer

class GenerateQuestionView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = QuestionSerializer

    def post(self, request, quiz_id):
        quiz_id = self.kwargs['quiz_id']
        quiz = Quiz.objects.get(id=quiz_id)
        prompt = request.data['prompt']
        language = quiz.language
        # Configure the Gemini AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        prompt_parts = [
            f"You are a teacher of the {language} language. Reply in {language} and make sure to provide examples of use cases when teaching. Be supportive and helpful. Unless specified, generate 5 example questions. When giving the answer key to questions, use the following format: 888333 ANSWERKEY 888333 followed by the answers on the next line.",
            f"input: {prompt}",
            "output: ",
        ]

        response = model.generate_content(prompt_parts)
        generated_text = response.text

        # Extract the generated question and answer key
        question_text = generated_text.split('888333 ANSWERKEY 888333')[0].strip()
        answer_key = generated_text.split('888333 ANSWERKEY 888333')[1].strip()

        question_data = {
            'quiz': quiz.id,
            'text': question_text,
            'answer': answer_key
        }

        if 'choices' in generated_text:
            choices = generated_text.split('choices:')[1].strip().split('\n')
            question_data['choices'] = choices

        serializer = QuestionSerializer(data=question_data)
        serializer.is_valid(raise_exception=True)
        question = serializer.save()

        return Response({'question': serializer.data}, status=status.HTTP_201_CREATED)

class QuizListCreateView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
    def get_queryset(self):
        return Quiz.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class QuizRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer
class CreateQuizView(generics.CreateAPIView):
    serializer_class = QuizSerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    def post(self, request, *args, **kwargs):
        serializer = QuizSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        quiz = serializer.instance

        # Configure the Generative AI API
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                      generation_config=generation_config,
                                      safety_settings=safety_settings)

        home_language = request.user.home_language.name if request.user.home_language else 'English'
        prompt = f"Generate 5 multiple-choice questions for a quiz titled '{quiz.title}' in the {quiz.language} language. Provide explanations for each answer choice in the user's home language: {home_language}. Use the following strict format for each question:\n\nq: <question_text>\nc1: <choice_1>\ne1: <explanation_for_choice_1>\nc2: <choice_2>\ne2: <explanation_for_choice_2>\nc3: <choice_3>\ne3: <explanation_for_choice_3>\nc4: <choice_4>\ne4: <explanation_for_choice_4>\na: <correct_answer_choice_number>\n\nMake sure to include all the required components (q, c1, e1, c2, e2, c3, e3, c4, e4, a) for each question, and provide the correct answer as a choice number (1, 2, 3, or 4). Here's an example of the format for a single question:\n\nq: What is the capital of France?\nc1: London\ne1: London is the capital of the United Kingdom, not France.\nc2: Paris\ne2: Paris is the correct answer. It is the capital of France.\nc3: Berlin\ne3: Berlin is the capital of Germany, not France.\nc4: Madrid\ne4: Madrid is the capital of Spain, not France.\na: 2\n\nPlease generate the questions in this exact format, with each question on a new line."

        response = model.generate_content(prompt)

        generated_text = response.text.strip()

        # Extract the generated questions and answer choices
        questions_data = self.parse_generated_questions(generated_text)
        # Save the generated questions to the database
        for question_data in questions_data:
            question_data['quiz'] = quiz.id
            serializer = QuestionSerializer(data=question_data)
            serializer.is_valid(raise_exception=True)
            serializer.save()
        
        user = request.user
        prompt = f"Update the analytics data for user '{user.username}' based on the quiz '{quiz.title}' they created. Include metrics such as quiz count, average score, and topic preferences."

        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)
        model = genai.GenerativeModel(model_name="gemini-1.0")
        response = model.generate_content(prompt)

        analytics_data = response.text.strip()

        # Update the user's analytics
        analytics_obj, _ = Analytics.objects.get_or_create(user=user)
        analytics_obj.data = analytics_data
        analytics_obj.save()

        return Response(QuizSerializer(quiz).data, status=status.HTTP_201_CREATED)

    def parse_generated_questions(self, text):
        questions_data = []
        question_blocks = text.strip().split("\n\n")

        for block in question_blocks:
            question_data = {}
            lines = block.strip().split("\n")

            for line in lines:
                if ": " in line:
                    key, value = line.split(": ", 1)
                    if key == "q":
                        question_data['text'] = value
                    elif key.startswith("c"):
                        if 'choices' not in question_data:
                            question_data['choices'] = []
                        question_data['choices'].append(value)
                    elif key.startswith("e"):
                        if 'explanations' not in question_data:
                            question_data['explanations'] = []
                        question_data['explanations'].append(value)
                    elif key == "a":
                        question_data['answer'] = int(value)

            if 'text' in question_data and 'choices' in question_data and 'answer' in question_data and 'explanations' in question_data:
                questions_data.append(question_data)

        return questions_data
class QuizQuestionsView(generics.ListAPIView):
    serializer_class = QuestionSerializer

    def get_queryset(self):
        quiz_id = self.kwargs['quiz_id']
        return Question.objects.filter(quiz_id=quiz_id)
class UserAttemptView(generics.CreateAPIView):
    serializer_class = AttemptSerializer

    def post(self, request, *args, **kwargs):
        quiz_id = request.data.get('quiz')
        score = request.data.get('score')

        attempt = Attempt.objects.create(user=request.user, quiz_id=quiz_id, score=score)
        serializer = self.get_serializer(attempt)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

### .\aiLingo\users\admin.py ###
from django.contrib import admin
from .models import User

admin.site.register(User)

### .\aiLingo\users\apps.py ###
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


### .\aiLingo\users\models.py ###
from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractUser
from django.db import models
from languages.models import Language
class User(AbstractUser):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    profile_pic = models.ImageField(upload_to='profile_pics', blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    is_premium = models.BooleanField(default=False)
    home_language = models.ForeignKey(Language, on_delete=models.SET_NULL, null=True, blank=True)

### .\aiLingo\users\serializers.py ###
from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'home_language']

class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ['id', 'email', 'name', 'profile_pic', 'date_joined', 'is_premium', 'password']


### .\aiLingo\users\tests.py ###
from django.test import TestCase

# Create your tests here.


### .\aiLingo\users\urls.py ###
from django.urls import path
from .views import RegisterView, LoginView, ProfileView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('profile/', ProfileView.as_view(), name='profile'),
]

### .\aiLingo\users\views.py ###
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer, UserRegistrationSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework_simplejwt.token_blacklist.models import OutstandingToken

class RegisterView(APIView):
    permission_classes = []
    def post(self, request):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LoginView(APIView):
    permission_classes = []
    def post(self, request):
        email = request.data.get('email')
        password = request.data.get('password')

        if not email or not password:
            return Response({'error': 'Please provide both email and password'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)

        user = authenticate(request, username=user.username, password=password)

        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token),
                'user': {
                    'id': user.id,
                    'name': user.name,
                    'email': user.email,
                },
            }, status=status.HTTP_200_OK)
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
class ProfileView(APIView):
    def get(self, request):
        user = request.user
        serializer = UserSerializer(user)
        return Response(serializer.data)

### .\requirements.txt ###
django==4.2.11
djangorestframework==3.15.1
google-generativeai
requests
python-dotenv
djangorestframework-simplejwt
Pillow
django-cors-headers


### .\tempfront\ailingo-frontend\.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


### .\tempfront\ailingo-frontend\package.json ###
{
  "name": "ailingo-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "bootstrap": "^5.3.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.2",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.22.3",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


### .\tempfront\ailingo-frontend\public\index.html ###
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


### .\tempfront\ailingo-frontend\public\manifest.json ###
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


### .\tempfront\ailingo-frontend\public\robots.txt ###
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


### .\tempfront\ailingo-frontend\README.md ###
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


### .\tempfront\ailingo-frontend\src\App.css ###
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


### .\tempfront\ailingo-frontend\src\App.js ###
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Navigation from './components/Navigation';
import Home from './components/Home';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import Languages from './components/Languages';
import Lessons from './components/Lessons';
import Quizzes from './components/Quizzes';
import QuizDetails from './components/QuizDetails';
import GenerateQuestion from './components/GenerateQuestion';
import CreateQuiz from './components/CreateQuiz';
import Profile from './components/Profile';
function App() {
  return (
    <Router>
      <div>
        <Navigation />
        <div className="container">
          <Routes>
            <Route exact path="/" element={<Home />} />
            <Route path="/register" element={<Register />} />
            <Route path="/login" element={<Login />} />
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/languages" element={<Languages />} />
            <Route path="/lessons" element={<Lessons />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/generate-question" element={<GenerateQuestion />} />
            <Route path="/create-quiz" element={<CreateQuiz />} />
            <Route path="/quizzes" element={<Quizzes />} />
            <Route path="/quizzes/:id" element={<QuizDetails />} />
            <Route path="/profile" element={<Profile />} />
          </Routes>
        </div>
      </div>
    </Router>
  );
}

export default App;

### .\tempfront\ailingo-frontend\src\App.test.js ###
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


### .\tempfront\ailingo-frontend\src\components\Analytics.js ###
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Analytics() {
  const [analyticsData, setAnalyticsData] = useState(null);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      const response = await axiosInstance.get('/analytics/');
      setAnalyticsData(response.data);
    } catch (error) {
      console.error('Error fetching analytics data:', error);
    }
  };

  return (
    <Container>
      <h1>Analytics</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Analytics</Card.Title>
              {analyticsData && (
                <div>
                  <p>{analyticsData.data}</p>
                </div>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default Analytics;

### .\tempfront\ailingo-frontend\src\components\CreateQuiz.js ###
import React, { useState, useEffect } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom';

function CreateQuiz() {
  const [title, setTitle] = useState('');
  const [language, setLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const response = await axiosInstance.post('http://localhost:8000/api/quizzes/create/', {
        title,
        language,
        duration: 10,
        passing_score: 50,
      });
      console.log(response.data);
      setSuccess(true);
      setError('');
      setLoading(false);
      navigate('/quizzes');
    } catch (error) {
      console.error(error);
      setError('Failed to create quiz. Please try again.');
      setSuccess(false);
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <div className="create-quiz-form">
        <h2>Create Quiz</h2>
        {success && <p className="success">Quiz created successfully!</p>}
        {error && <p className="error">{error}</p>}
        {loading ? (
          <div className="loading">
            <p>Creating quiz...</p>
            <div className="loading-spinner"></div>
          </div>
        ) : (
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              placeholder="Quiz Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
            <select
              value={language}
              onChange={(e) => setLanguage(e.target.value)}
              required
            >
              <option value="">Select Language</option>
              {languages.map((lang) => (
                <option key={lang.id} value={lang.id}>
                  {lang.name}
                </option>
              ))}
            </select>
            <button type="submit">Create Quiz</button>
          </form>
        )}
      </div>
    </div>
  );
}

export default CreateQuiz;

### .\tempfront\ailingo-frontend\src\components\Dashboard.js ###
import React from 'react';
import Profile from './Profile';

function Dashboard() {
  return (
    <div className="container">
      <h2>Welcome to the Dashboard</h2>
      <Profile />
    </div>
  );
}

export default Dashboard;

### .\tempfront\ailingo-frontend\src\components\GenerateQuestion.js ###
import React, { useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function GenerateQuestion() {
  const [quizId, setQuizId] = useState('');
  const [prompt, setPrompt] = useState('');
  const [question, setQuestion] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axiosInstance.post(`http://localhost:8000/api/quizzes/${quizId}/generate-question/`, { prompt });
      setQuestion(response.data.question);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Generate Question</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="number"
          placeholder="Quiz ID"
          value={quizId}
          onChange={(e) => setQuizId(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          required
        />
        <button type="submit">Generate</button>
      </form>
      {question && (
        <div>
          <h3>Generated Question:</h3>
          <p>{question.text}</p>
          <p>Answer: {question.answer}</p>
        </div>
      )}
    </div>
  );
}

export default GenerateQuestion;

### .\tempfront\ailingo-frontend\src\components\Home.js ###
import React from 'react';
import { Container, Row, Col, Button } from 'react-bootstrap';

function Home() {
  return (
    <div className="home">
      <Container>
        <Row className="hero">
          <Col>
            <h1>Welcome to aiLingo</h1>
            <p>Explore languages, lessons, and quizzes.</p>
            <Button variant="primary" size="lg">Get Started</Button>
          </Col>
        </Row>
      </Container>
    </div>
  );
}

export default Home;

### .\tempfront\ailingo-frontend\src\components\Languages.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Languages() {
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="container">
      <h2>Languages</h2>
      <ul>
        {languages.map((language) => (
          <li key={language.id}>{language.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default Languages;

### .\tempfront\ailingo-frontend\src\components\Lessons.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Lessons() {
  const [lessons, setLessons] = useState([]);

  useEffect(() => {
    fetchLessons();
  }, []);

  const fetchLessons = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/lessons/');
      setLessons(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Lessons</h2>
      <ul>
        {lessons.map((lesson) => (
          <li key={lesson.id}>{lesson.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default Lessons;

### .\tempfront\ailingo-frontend\src\components\Login.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();
  
  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
  }, [navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/login/', { email, password });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      localStorage.setItem('user', JSON.stringify(response.data.user));
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Invalid credentials. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="container">
      <h2>User Login</h2>
      {success && <p className="success">Login successful!</p>}
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default Login;

### .\tempfront\ailingo-frontend\src\components\Navigation.js ###
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav } from 'react-bootstrap';

function Navigation() {
  return (
    <Navbar bg="dark" variant="dark" expand="lg">
      <Navbar.Brand as={Link} to="/">aiLingo</Navbar.Brand>
      <Navbar.Toggle aria-controls="basic-navbar-nav" />
      <Navbar.Collapse id="basic-navbar-nav">
        <Nav className="ml-auto">
          <Nav.Link as={Link} to="/">Home</Nav.Link>
          <Nav.Link as={Link} to="/register">Register</Nav.Link>
          <Nav.Link as={Link} to="/login">Login</Nav.Link>
          <Nav.Link as={Link} to="/languages">Languages</Nav.Link>
          <Nav.Link as={Link} to="/lessons">Lessons</Nav.Link>
          <Nav.Link as={Link} to="/quizzes">Quizzes</Nav.Link>
          <Nav.Link as={Link} to="/profile">Profile</Nav.Link>
        </Nav>
      </Navbar.Collapse>
    </Navbar>
  );
}

export default Navigation;

### .\tempfront\ailingo-frontend\src\components\PrivateRoute.js ###
import React from 'react';
import { Route, Navigate } from 'react-router-dom';

const PrivateRoute = ({ element: Component, ...rest }) => {
    const isAuthenticated = !!localStorage.getItem('access_token');

    return (
        <Route
            {...rest}
            element={isAuthenticated ? <Component {...rest} /> : <Navigate to="/login" />}
        />
    );
};

export default PrivateRoute;

### .\tempfront\ailingo-frontend\src\components\Profile.js ###
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';

function Profile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchUserData();
    console.log("hello");
  }, []);

  const fetchUserData = async () => {
    try {
      const response = await axiosInstance.get('/users/profile/');
      setUser(response.data);
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  const handleLogout = async () => {
    try {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      navigate('/login');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <Container>
      <h1>Profile</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Card.Title>User Information</Card.Title>
              <p>Name: {user.name}</p>
              <p>Email: {user.email}</p>
              {/* Display other user information */}
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Row>
        <Col>
          <Button variant="danger" onClick={handleLogout}>
            Logout
          </Button>
        </Col>
      </Row>
    </Container>
  );
}

export default Profile;

### .\tempfront\ailingo-frontend\src\components\QuizDetails.js ###
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';

function QuizDetails() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [score, setScore] = useState(0);

  useEffect(() => {
    fetchQuizDetails();
    fetchQuestions();
  }, []);

  const fetchQuizDetails = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/`);
      setQuiz(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await axiosInstance.get(`http://localhost:8000/api/quizzes/${id}/questions/`);
      setQuestions(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleAnswerSelect = (questionId, selectedAnswer) => {
    setQuestions((prevQuestions) =>
      prevQuestions.map((question) =>
        question.id === questionId
          ? { ...question, selectedAnswer, showExplanation: true }
          : question
      )
    );
  };

  const handleQuizSubmit = async () => {
    const attemptData = {
      quiz: quiz.id,
      score: score,
    };

    try {
      await axiosInstance.post('http://localhost:8000/api/quizzes/attempt/', attemptData);
      // Redirect to a quiz results page or display a success message
    } catch (error) {
      console.error(error);
    }
  };

  if (!quiz) {
    return <div>Loading...</div>;
  }

  return (
    <div className="quiz-details">
      <h2>{quiz.title}</h2>
      <h3>Questions:</h3>
      <ul>
        {questions.map((question) => (
          <li key={question.id} className="question-item">
            <div className="question-text">{question.text}</div>
            <ul className="question-choices">
              {question.choices.map((choice, index) => (
                <li
                  key={index}
                  className={`choice ${
                    question.selectedAnswer === index + 1 ? 'selected' : ''
                  } ${
                    question.showExplanation && question.selectedAnswer === index + 1
                      ? question.answer === index + 1
                        ? 'correct'
                        : 'incorrect'
                      : ''
                  }`}
                  onClick={() => handleAnswerSelect(question.id, index + 1)}
                >
                  {choice}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <span className="choice-icon">
                      {question.answer === index + 1 ? '✔' : '✘'}
                    </span>
                  )}
                  {question.showExplanation && question.selectedAnswer === index + 1 && (
                    <div className="choice-explanation">
                      <strong>Explanation:</strong> {question.explanations[index]}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
      <button onClick={handleQuizSubmit}>Submit Quiz</button>
    </div>
  );
}

export default QuizDetails;

### .\tempfront\ailingo-frontend\src\components\Quizzes.js ###
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';

function Quizzes() {
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const fetchQuizzes = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/quizzes/');
      setQuizzes(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="quizzes">
      <Container>
        <h2>Quizzes</h2>
        <Row>
          {quizzes.map((quiz) => (
            <Col md={4} key={quiz.id}>
              <Card>
                <Card.Body>
                  <Card.Title>{quiz.title}</Card.Title>
                  <Card.Text>Language: {quiz.language}</Card.Text>
                  <Card.Text>Duration: {quiz.duration} minutes</Card.Text>
                  <Card.Text>Passing Score: {quiz.passing_score}%</Card.Text>
                  <Button variant="primary" as={Link} to={`/quizzes/${quiz.id}`}>
                    Take Quiz
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
    </div>
  );
}

export default Quizzes;

### .\tempfront\ailingo-frontend\src\components\Register.js ###
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Form, Button, Alert } from 'react-bootstrap';

function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [homeLanguage, setHomeLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    // Check if the user is already logged in
    const token = localStorage.getItem('access_token');
    if (token) {
      navigate('/profile');
    }
    else {
      fetchLanguages();
    }
  }, [navigate]);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('http://localhost:8000/api/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/users/register/', {
        name,
        email,
        password,
        home_language: homeLanguage,
      });
      console.log(response.data);
      localStorage.setItem('access_token', response.data.access);
      localStorage.setItem('refresh_token', response.data.refresh);
      setSuccess(true);
      setError('');
      navigate('/dashboard');
    } catch (error) {
      console.error(error);
      setError('Registration failed. Please try again.');
      setSuccess(false);
    }
  };

  return (
    <div className="register">
      <h2>User Registration</h2>
      {success && <Alert variant="success">Registration successful! You can now log in.</Alert>}
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="name">
          <Form.Label>Name</Form.Label>
          <Form.Control
            type="text"
            placeholder="Enter your name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </Form.Group>
        <input
          type="text"
          placeholder="Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          required
        />
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <select
          value={homeLanguage}
          onChange={(e) => setHomeLanguage(e.target.value)}
          required
        >
          <option value="">Select Home Language</option>
          {languages.map((language) => (
            <option key={language.id} value={language.id}>
              {language.name}
            </option>
          ))}
        </select>
        <Button variant="primary" type="submit">Register</Button>
        </Form>
    </div>
  );
}

export default Register;

### .\tempfront\ailingo-frontend\src\index.css ###
/* Global Styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #333;
  color: #fff;
  padding: 10px;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

nav ul li {
  display: inline-block;
  margin-right: 10px;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 5px 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

nav ul li a:hover {
  background-color: #555;
}

/* Form Styles */
form {
  margin-bottom: 20px;
  background-color: #fff;
  padding: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

form input {
  display: block;
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

form button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #555;
}

/* Button Styles */
.btn {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #555;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

/* Error Styles */
.error {
  color: red;
  margin-bottom: 10px;
}

/* Success Styles */
.success {
  color: green;
  margin-bottom: 10px;
}
.profile {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #333;
}

.profile p {
  margin-bottom: 10px;
}

.profile button {
  padding: 10px 20px;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #555;
}
.create-quiz-form {
  max-width: 400px;
  margin: 0 auto;
}

.create-quiz-form h2 {
  font-size: 24px;
  margin-bottom: 20px;
}

.create-quiz-form input {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.create-quiz-form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.create-quiz-form button:hover {
  background-color: #0056b3;
}

.create-quiz-form .success {
  color: green;
  margin-bottom: 10px;
}

.create-quiz-form .error {
  color: red;
  margin-bottom: 10px;
}
/* Global Styles */
body {
  font-family: 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

/* Navigation Styles */
nav {
  background-color: #2c3e50;
  padding: 15px;
  border-bottom: 4px solid #1abc9c;
}

nav ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: space-around;
}

nav ul li {
  display: inline-block;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  padding: 10px 20px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
  font-size: 18px;
  font-weight: bold;
}

nav ul li a:hover {
  background-color: #1abc9c;
}

/* Form Styles */
form {
  background-color: #fff;
  padding: 30px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

form input,
form select {
  width: 100%;
  padding: 12px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 16px;
  outline: none;
}

form input:focus,
form select:focus {
  border-color: #1abc9c;
}

form button {
  width: 100%;
  padding: 12px;
  background-color: #1abc9c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 18px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

form button:hover {
  background-color: #16a085;
}

/* Card Styles */
.card {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
}

.card h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 24px;
}

/* Success and Error Styles */
.success {
  color: #1abc9c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

.error {
  color: #e74c3c;
  margin-bottom: 10px;
  font-size: 18px;
  font-weight: bold;
}

/* Profile Styles */
.profile {
  background-color: #fff;
  padding: 30px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.profile h3 {
  margin-top: 0;
  margin-bottom: 10px;
  color: #2c3e50;
  font-size: 28px;
}

.profile p {
  margin-bottom: 20px;
  color: #555;
  font-size: 18px;
}

.profile button {
  padding: 10px 20px;
  background-color: #e74c3c;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

.profile button:hover {
  background-color: #c0392b;
}
.quiz-list {
  list-style-type: none;
  padding: 0;
}

.quiz-list li {
  margin-bottom: 10px;
}

.quiz-list a {
  display: block;
  padding: 10px;
  background-color: #f5f5f5;
  color: #333;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.quiz-list a:hover {
  background-color: #e0e0e0;
}

/* Quiz Details Styles */
.quiz-details {
  margin-top: 20px;
}

.quiz-details h3 {
  margin-top: 0;
}

.quiz-details ul {
  list-style-type: none;
  padding: 0;
}

.quiz-details li {
  margin-bottom: 10px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}
.question-item {
  cursor: pointer;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-item:hover {
  background-color: #e8e8e8;
}

.question-text {
  font-size: 18px;
  font-weight: bold;
}

.question-answer {
  margin-top: 10px;
  padding: 10px;
  background-color: #e0f0ff;
  border-radius: 4px;
}
.question-item {
  margin-bottom: 30px;
}

.question-text {
  cursor: pointer;
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: background-color 0.3s ease;
}

.question-text:hover {
  background-color: #e8e8e8;
}

.question-choices {
  margin-top: 10px;
  margin-bottom: 10px;
  padding-left: 20px;
}

.question-choices li {
  margin-bottom: 5px;
}

.question-answer {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.5s ease;
  background-color: #e0f0ff;
  padding: 0 15px;
  border-radius: 4px;
}

.question-answer.show {
  max-height: 100px;
  padding: 15px;
}
.question-choices li {
  cursor: pointer;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.question-choices li:hover {
  background-color: #f0f0f0;
}

.question-choices li.selected {
  background-color: #e0f0ff;
}

.question-choices li.correct {
  background-color: #d4edda;
}

.question-choices li.incorrect {
  background-color: #f8d7da;
}

.choice-icon {
  margin-left: 10px;
  font-size: 18px;
}

.question-explanation {
  margin-top: 10px;
  padding: 15px;
  background-color: #f8f8f8;
  border-radius: 4px;
}
@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loading-spinner {
  width: 50px;
  height: 50px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spinner 1.5s linear infinite;
  margin: 20px auto;
}

### .\tempfront\ailingo-frontend\src\index.js ###
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

### .\tempfront\ailingo-frontend\src\logo.svg ###
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

### .\tempfront\ailingo-frontend\src\reportWebVitals.js ###
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


### .\tempfront\ailingo-frontend\src\setupTests.js ###
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


### .\tempfront\ailingo-frontend\src\utils\axiosInstance.js ###
import axios from 'axios';

const axiosInstance = axios.create({
  baseURL: 'http://localhost:8000/api/',
});

axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem('access_token');
  if (token) {
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
});

export default axiosInstance;

### .\tempfront\package.json ###
{
  "dependencies": {
    "axios": "^1.6.8",
    "react-router-dom": "^6.22.3"
  }
}


### .\tempfront\test.py ###
import os

def merge_text_files(folder_path, output_file):
    with open(output_file, 'w', encoding='utf-8') as output:
        for root, dirs, files in os.walk(folder_path):
            if 'node_modules' in dirs:
                dirs.remove('node_modules')  # Skip 'node_modules' folder
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    with open(file_path, 'r', encoding='utf-8') as input_file:
                        content = input_file.read()
                        output.write(f"------------------------\n")
                        output.write(f"File: {file_path}\n")
                        output.write(f"------------------------\n")
                        output.write(content)
                        output.write("\n\n")
                except (UnicodeDecodeError, PermissionError, IOError):
                    print(f"Skipping unreadable file: {file_path}")
                    continue

# Example usage
folder_path = "ailingo-frontend\\src"
output_file = "merged_text_files.txt"
merge_text_files(folder_path, output_file)

### .\test\api\admin.py ###
from django.contrib import admin
# Register your models here.


### .\test\api\apps.py ###
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'


### .\test\api\authentication.py ###
from rest_framework.authentication import TokenAuthentication as BaseTokenAuthentication
class TokenAuthentication(BaseTokenAuthentication):
    keyword = 'Bearer'

    

### .\test\api\mixins.py ###
from rest_framework import permissions
from .permissions import IsStaffEditorPermission    

class StaffEditorPermissionMixIn():
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

### .\test\api\models.py ###
from django.db import models

# Create your models here.


### .\test\api\permissions.py ###
from rest_framework import permissions

class IsStaffEditorPermission(permissions.DjangoModelPermissions):
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }
    # def has_permission(self, request, view):
    #     if not request.user.is_staff:
    #         return False
    #     return super().has_permission(request, view)
    # def has_permission(self, request, view):
    #     user = request.user
    #     if user.is_staff:
    #         if(user.has_perm("products.view_product")):
    #             return True
    #         if(user.has_perm("products.change_product")):
    #             return True
    #         if(user.has_perm("products.add_product")):
    #             return True
    #         if(user.has_perm("products.delete_product")):
    #             return True
    #     return False


### .\test\api\tests.py ###
from django.test import TestCase
from django.urls import reverse
from products.models import Product
# Create your tests here.

class BasicTest(TestCase):
    @classmethod
    def setUpTestData(cls) -> None:
        Product.objects.create(title="ti")
    # def test_url_exist(self):
    #     url = reverse("home")
    #     self.assertEqual(self.client.get(url).status_code,200)
    #     print(self.client.get(url).content)

### .\test\api\urls.py ###
from django.urls import path
from rest_framework.authtoken.views import obtain_auth_token
from . import views

urlpatterns = [
    path('auth/', obtain_auth_token,name="auth"),
    path('',views.api_home,name="home")
]


### .\test\api\views.py ###
from django.http import JsonResponse
from products.serializers import ProductSerializer
from products.models import Product
from rest_framework.response import Response
from rest_framework.decorators import api_view
# Create your views here.

@api_view(["POST"])
def api_home(request, *args, **kwargs):
    serializer = ProductSerializer(data=request.data)
    if serializer.is_valid(raise_exception=True):
        # data = serializer.save()
        return Response(serializer.data)

### .\test\cfehome\asgi.py ###
"""
ASGI config for cfehome project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_asgi_application()


### .\test\cfehome\routers.py ###
#Normally would go to urls.py
from rest_framework.routers import DefaultRouter
from products.viewsets import ProductViewSet, ProductGenericViewSet

router = DefaultRouter()
router.register('products-abc', ProductGenericViewSet, basename='products')

urlpatterns = router.urls

### .\test\cfehome\settings.py ###
"""
Django settings for cfehome project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o32l^k3%9ztw*2%11alx3ziu!4^66xouwc39v!_b@fby_&j%s_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'products',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cfehome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cfehome.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'api.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


### .\test\cfehome\urls.py ###
"""
URL configuration for cfehome project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls')),
    path('api/products/',include('products.urls')),
    path('api/v2/',include('cfehome.routers')),
]


### .\test\cfehome\wsgi.py ###
"""
WSGI config for cfehome project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_wsgi_application()


### .\test\example.py ###
from flask import Flask, jsonify
"""
GET /languages: Get a list of all languages
GET /languages/<int:language_id>: Get details of a specific language
GET /languages/<int:language_id>/lessons: Get a list of lessons for a specific language
GET /lessons/<int:lesson_id>: Get details of a specific lesson
GET /languages/<int:language_id>/quizzes: Get a list of quizzes for a specific language
GET /quizzes/<int:quiz_id>: Get details of a specific quiz, including its questions

to run:
make a venv (python -m venv .venv)
activate the venv (source .venv/Scripts/activate for windows, source .venv/bin/activate for mac)
pip install flask
flask -app example.py

"""
app = Flask(__name__)
from flask_cors import CORS

CORS(app)
# Languages Models
languages = [
    {
        "id": 1,
        "name": "English",
        "code": "en"
    },
    {
        "id": 2,
        "name": "Spanish",
        "code": "es"
    },
    {
        "id": 3,
        "name": "French",
        "code": "fr"
    }
]

lessons = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Basics",
        "content": "This is the content for the English Grammar Basics lesson.",
        "tags": ["beginner", "english", "grammar"]
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary",
        "content": "This is the content for the Spanish Vocabulary lesson.",
        "tags": ["beginner", "spanish", "vocabulary"]
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation",
        "content": "This is the content for the French Pronunciation lesson.",
        "tags": ["intermediate", "french", "pronunciation"]
    }
]

quizzes = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Quiz",
        "questions": [1, 2],
        "duration": 30,
        "passing_score": 80
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary Quiz",
        "questions": [3, 4],
        "duration": 45,
        "passing_score": 75
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation Quiz",
        "questions": [5, 6],
        "duration": 20,
        "passing_score": 70
    }
]

questions = [
    {
        "id": 1,
        "text": "What is the correct way to use the verb 'to be' in the present tense?",
        "choices": ["I is", "I am", "I are", "I be"],
        "answer": 1
    },
    {
        "id": 2,
        "text": "What is the plural form of 'child'?",
        "choices": ["childs", "childrens", "children", "childres"],
        "answer": 2
    },
    {
        "id": 3,
        "text": "What is the Spanish word for 'book'?",
        "choices": ["libro", "papel", "cuaderno", "lapiz"],
        "answer": 0
    },
    {
        "id": 4,
        "text": "How do you say 'Hello' in Spanish?",
        "choices": ["Hola", "Adios", "Gracias", "Buenos dias"],
        "answer": 0
    },
    {
        "id": 5,
        "text": "How is the word 'bonjour' pronounced in French?",
        "choices": ["bon-jour", "bon-zhoor", "bon-joor", "bon-jure"],
        "answer": 1
    },
    {
        "id": 6,
        "text": "What is the correct pronunciation of the French word 'merci'?",
        "choices": ["mer-see", "mer-see", "mer-chi", "mer-key"],
        "answer": 1
    }
]

# Routes
@app.route('/languages', methods=['GET'])
def get_languages():
    return jsonify(languages)

@app.route('/languages/<int:language_id>', methods=['GET'])
def get_language(language_id):
    language = next((l for l in languages if l['id'] == language_id), None)
    if language:
        return jsonify(language)
    else:
        return jsonify({"error": "Language not found"}), 404

@app.route('/languages/<int:language_id>/lessons', methods=['GET'])
def get_language_lessons(language_id):
    lessons_for_language = [l for l in lessons if l['language'] == language_id]
    if lessons_for_language:
        return jsonify(lessons_for_language)
    else:
        return jsonify({"error": "No lessons found for this language"}), 404

@app.route('/lessons/<int:lesson_id>', methods=['GET'])
def get_lesson(lesson_id):
    lesson = next((l for l in lessons if l['id'] == lesson_id), None)
    if lesson:
        return jsonify(lesson)
    else:
        return jsonify({"error": "Lesson not found"}), 404

@app.route('/languages/<int:language_id>/quizzes', methods=['GET'])
def get_language_quizzes(language_id):
    quizzes_for_language = [q for q in quizzes if q['language'] == language_id]
    if quizzes_for_language:
        return jsonify(quizzes_for_language)
    else:
        return jsonify({"error": "No quizzes found for this language"}), 404

@app.route('/quizzes/<int:quiz_id>', methods=['GET'])
def get_quiz(quiz_id):
    quiz = next((q for q in quizzes if q['id'] == quiz_id), None)
    if quiz:
        quiz_questions = [q for q in questions if q['id'] in quiz['questions']]
        quiz['questions'] = quiz_questions
        return jsonify(quiz)
    else:
        return jsonify({"error": "Quiz not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)


### .\test\manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


### .\test\products\admin.py ###
from django.contrib import admin
from .models import Product

# Register your models here.

admin.site.register(Product)

### .\test\products\apps.py ###
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


### .\test\products\models.py ###
from django.db import models

# Create your models here.
class Product(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True,null=True)
    price = models.DecimalField(max_digits=15, decimal_places=2,default=99.99)

    @property
    def sale_price(self):
        return f"{float(self.price) * 0.9:.2f}"
    
    def get_discount_price(self):
        return f"{float(self.price) * 0.8:.2f}"


### .\test\products\serializers.py ###
from rest_framework import serializers

from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = Product
        fields = ['pk','title', 'content', 'price', 'sale_price','my_discount']
    
    def get_my_discount(self, obj):
        if not hasattr(obj,'id'):
            return None
        if not isinstance(obj, Product):
            return None
        return obj.get_discount_price()


### .\test\products\tests.py ###
from django.test import RequestFactory, TestCase
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from .models import Product
# Create your tests here.


class TestProductApi(APITestCase):
    def setUp(self):
        self.factory = RequestFactory()
        Product.objects.create(title="First Product", content="First Content", price=100)
    def test_product_detail(self):
        url = reverse("product-detail", args=[1])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_product_detail_404(self):
        url = reverse("product-detail", args=[1000])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)


### .\test\products\urls.py ###
from django.urls import path
from . import views

urlpatterns = [
    path("", views.ProductListCreateApiView.as_view(), name="product-create-list"),
    path("<int:pk>/update/", views.ProductUpdateApiView.as_view(), name="product-detail"),
    path("<int:pk>/delete/", views.ProductDeleteApiView.as_view(), name="product-detail"),
    path("<int:pk>", views.ProductDetailApiView.as_view(), name="product-detail"),
]

### .\test\products\views.py ###
from rest_framework import generics, mixins, permissions, authentication
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Product
from django.shortcuts import get_object_or_404
from api.authentication import TokenAuthentication
from .serializers import ProductSerializer
from api.mixins import StaffEditorPermissionMixIn

class ProductMixinView(StaffEditorPermissionMixIn, generics.GenericAPIView, mixins.ListModelMixin, mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    

    def get(self, request, *args, **kwargs):
        if kwargs.get('pk'):
            return self.retrieve(request, *args, **kwargs)
        return self.list(request, *args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)
    


class ProductDetailApiView(StaffEditorPermissionMixIn, generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductListCreateApiView(StaffEditorPermissionMixIn, generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    #Set which fields to be used for creating the new model
    def perform_create(self, serializer):
        # serializer.save(user=self.request.user)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') or None
        if content is None:
            content=title
        serializer.save(content=content)

class ProductListApiView(StaffEditorPermissionMixIn, generics.ListAPIView):
    #Going to use ListCreateAPIView instead of ListAPIView.

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductUpdateApiView(StaffEditorPermissionMixIn,generics.UpdateAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title
            instance.save()

class ProductDeleteApiView(StaffEditorPermissionMixIn,generics.DestroyAPIView):
    
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


@api_view(['GET', 'POST'])

def product_alt_view(request, pk=None, *args, **kwargs):
    if request.method == 'GET':
        if pk is not None:
            product = get_object_or_404(Product, pk=pk)
            data = ProductSerializer(product).data
            return Response(data)
        
        products = Product.objects.all()
        data = ProductSerializer(products, many=True).data
        return Response(data)
    elif request.method == 'POST':
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            title = serializer.validated_data.get('title')
            content = serializer.validated_data.get('content') or None
            if content is None:
                content=title
            serializer.save(content=content)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)

### .\test\products\viewsets.py ###
#Normally goes into views.py
from rest_framework import mixins, viewsets

from .models import Product
from .serializers import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

class ProductGenericViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.RetrieveModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

### .\test\requirments.txt ###
django==4.2.11
djangorestframework
pyyaml
requests
django-cors-headers

### .\test.py ###
import os

# Function to read a file and return its contents
def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        return content
    except Exception:
        return ""

# Function to write contents to a file
def write_to_file(file_path, content):
    try:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(content)
    except Exception:
        pass

# Function to traverse the folder and subfolders
def traverse_folder(folder_path, combined_content):
    # Loop through all files and folders in the current folder
    for item in os.listdir(folder_path):
        item_path = os.path.join(folder_path, item)
        
        # If the item is a folder, recursively traverse it
        if os.path.isdir(item_path) and not item.startswith("node_modules") and not item.startswith('migrations') and not item.startswith('.'):
            combined_content = traverse_folder(item_path, combined_content)
        # If the item is a file, read its contents and add them to the combined content
        elif os.path.isfile(item_path) and item_path.find("package-lock.json")==-1 and item_path != output_file_path:
            file_content = read_file(item_path)
            if file_content:
                combined_content += f"### {os.path.join(folder_path, item)} ###\n{file_content}\n\n"
    
    return combined_content

# Get the folder path from the user
folder_path = "."

# Initialize an empty string to store the combined contents
combined_content = ""
output_file_path = "test.txt"

# Traverse the folder and subfolders
combined_content = traverse_folder(folder_path, combined_content)

# Get the output file path from the user

# Write the combined content to the output file
write_to_file(output_file_path, combined_content)

print("Files combined successfully!")





