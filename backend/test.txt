### /workspaces/aiLingo/backend/run.sh ###
#!/bin/bash

# Set the path to your desired directory
directoryPath="/home/oohben/aiLingo/backend/tempfront/ailingo-frontend"

# Run npm start with the specified directory path
cd $directoryPath && sudo npm start &

# Activate the virtual environment
venvPath="/home/oohben/aiLingo/backend/aiLingo/.venv/bin/activate"
source $venvPath

# Run the Django server
pythonPath="/home/oohben/aiLingo/backend/aiLingo/.venv/bin/python"
managePyPath="/home/oohben/aiLingo/backend/aiLingo/manage.py"
$pythonPath $managePyPath runserver

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/public/manifest.json ###
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/public/robots.txt ###
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/public/index.html ###
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/README.md ###
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/App.js ###
// App.js

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { useState } from 'react';
import { Container } from 'react-bootstrap';
import Navigation from './components/Navigation';
import Home from './components/Home';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';
import Languages from './components/Languages';
import Lessons from './components/Lessons';
import Quizzes from './components/Quizzes';
import QuizDetails from './components/QuizDetails';
import GenerateQuestion from './components/GenerateQuestion';
import CreateQuiz from './components/CreateQuiz';
import Profile from './components/Profile';
import QuizAttempt from './components/QuizAttempt';
import Chat from './components/Chat';
import Analytics from './components/Analytics';
import { AuthProvider } from './components/contexts/AuthContext';
function App() {
  const [darkMode, setDarkMode] = useState(false);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  return (
    <AuthProvider>
      <Router>
        <div className={darkMode ? 'dark-mode' : ''}>
          <Navigation darkMode={darkMode} toggleDarkMode={toggleDarkMode} />
          <Container>
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/register" element={<Register />} />
              <Route path="/login" element={<Login />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/languages" element={<Languages />} />
              <Route path="/lessons" element={<Lessons />} />
              <Route path="/quizzes" element={<Quizzes />} />
              <Route path="/quizzes/:id" element={<QuizAttempt />} />
              <Route path="/generate-question" element={<GenerateQuestion />} />
              <Route path="/create-quiz" element={<CreateQuiz />} />
              <Route path="/profile" element={<Profile />} />
              <Route path="/chat" element={<Chat />} />
              <Route path="/analytics" element={<Analytics />} />
            </Routes>
          </Container>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/App.test.js ###
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/styles/global.css ###
/* global.css */

:root {
  --primary-color: #007bff;
  --secondary-color: #6c757d;
  --light-color: #f8f9fa;
  --dark-color: #343a40;
  --dark-secondary-color: #495057;
}
html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

#root {
  width: 100%;
  height: 100%;
}
body {
  background-color: var(--light-color);
  color: var(--dark-color);
}

.dark-mode {
  background-color: var(--dark-color);
  color: var(--light-color);
}

.dark-mode .card {
  background-color: var(--dark-secondary-color);
  border-color: var(--dark-secondary-color);
  color: var(--light-color);
}

.dark-mode .list-group-item {
  background-color: var(--dark-secondary-color);
  color: var(--light-color);
  border-color: var(--dark-color);
}

.dark-mode .form-control {
  background-color: var(--dark-secondary-color);
  color: var(--light-color);
  border-color: var(--dark-color);
}

.dark-mode .btn-primary {
  background-color: var(--primary-color);
  border-color: var(--primary-color);
  color: var(--light-color);
}

.dark-mode .btn-secondary {
  background-color: var(--secondary-color);
  border-color: var(--secondary-color);
  color: var(--light-color);
}

.dark-mode .navbar {
  background-color: var(--dark-secondary-color);
  border-color: var(--dark-color);
}

.dark-mode .chat-messages,
.dark-mode .messages {
  background-color: var(--dark-secondary-color);
  color: var(--light-color);
}

.dark-mode .user-message {
  background-color: var(--primary-color);
  color: var(--light-color);
}

.dark-mode .ai-message {
  background-color: var(--secondary-color);
  color: var(--light-color);
}

.dark-mode .message-content table {
  border-collapse: collapse;
  width: 100%;
  margin-bottom: 1rem;
}

.dark-mode .message-content th,
.dark-mode .message-content td {
  border: 1px solid var(--dark-secondary-color);
  padding: 0.5rem;
}

.dark-mode .message-content th {
  background-color: var(--dark-color);
  color: var(--light-color);
}

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/utils/auth.js ###
import axios from 'axios';
import axiosInstance from './axiosInstance';

const BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://ailingo.onrender.com/api';

export const loginUser = async (email, password) => {
  try {
    const response = await axios.post(`${BASE_URL}/users/login/`, { email, password });
    localStorage.setItem('access_token', response.data.access);
    localStorage.setItem('refresh_token', response.data.refresh);
    localStorage.setItem('user', JSON.stringify(response.data.user));
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const registerUser = async (name, email, password, homeLanguage) => {
  try {
    const response = await axiosInstance.post('users/register/', {
      name,
      email,
      password,
      home_language: homeLanguage,
    });
    localStorage.setItem('access_token', response.data.access);
    localStorage.setItem('refresh_token', response.data.refresh);
    return response.data;
  } catch (error) {
    throw error.response.data;
  }
};

export const refreshAccessToken = async () => {
  const refreshToken = localStorage.getItem('refresh_token');
  if (!refreshToken) {
    throw new Error('Refresh token not found');
  }

  try {
    const response = await axios.post(`${BASE_URL}/users/refresh-token/`, { refresh: refreshToken });
    localStorage.setItem('access_token', response.data.access);
    return response.data.access;
  } catch (error) {
    // Remove the invalid refresh token from local storage
    localStorage.removeItem('refresh_token');
    throw error.response.data;
  }
};

export const logoutUser = () => {
  localStorage.removeItem('access_token');
  localStorage.removeItem('refresh_token');
  localStorage.removeItem('user');
};

export const isLoggedIn = () => {
    const accessToken = localStorage.getItem('access_token');
    return !!accessToken;
  };

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/utils/axiosInstance.js ###
import axios from 'axios';
import { refreshAccessToken, logoutUser } from './auth';


const BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://ailingo.onrender.com/api';
const axiosInstance = axios.create({
  baseURL: BASE_URL,
});

console.log('BASE_URL:', BASE_URL);


axiosInstance.interceptors.request.use(
  async (config) => {
    const token = localStorage.getItem('access_token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    if (error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const access_token = await refreshAccessToken();
        axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        // Logout the user if the refresh token is invalid
        logoutUser();
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/setupTests.js ###
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Home.js ###
import React from 'react';
import { Container, Row, Col, Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';

function Home() {
  return (
    <Container>
      <Row className="mt-5">
        <Col>
          <h1>Welcome to aiLingo</h1>
          <p>Learn languages with AI-powered lessons and quizzes.</p>
          <Button as={Link} to="/register" variant="primary" size="lg">
            Get Started
          </Button>
        </Col>
      </Row>
    </Container>
  );
}

export default Home;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Analytics.js ###
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import { Bar } from 'react-chartjs-2';
import axiosInstance from '../utils/axiosInstance';
import { Chart, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
Chart.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

function Analytics() {
  const [analyticsData, setAnalyticsData] = useState(null);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      const response = await axiosInstance.get('/analytics/user-analytics/');
      setAnalyticsData(response.data);
    } catch (error) {
      console.error('Error fetching analytics data:', error);
    }
  };

  const renderCharts = () => {
    if (!analyticsData) return null;

    const languageProgressData = {
      labels: Object.keys(analyticsData.language_progress),
      datasets: [
        {
          label: 'Completion Percentage',
          data: Object.values(analyticsData.language_progress).map(
            (progress) => progress.completion_percentage
          ),
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
      ],
    };

    const quizAnalyticsData = {
      labels: Object.keys(analyticsData.quiz_analytics),
      datasets: [
        {
          label: 'Total Quizzes',
          data: Object.values(analyticsData.quiz_analytics).map(
            (analytics) => analytics.total_quizzes
          ),
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
      ],
    };

    const chatAnalyticsData = {
      labels: Object.keys(analyticsData.chat_analytics),
      datasets: [
        {
          label: 'Total Chats',
          data: Object.values(analyticsData.chat_analytics).map(
            (analytics) => analytics.total_chats
          ),
          backgroundColor: 'rgba(75, 192, 192, 0.6)',
        },
      ],
    };

    const options = {
      scales: {
        x: {
          title: {
            display: true,
            text: 'Languages',
          },
        },
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: 'Value',
          },
        },
      },
    };

    return (
      <>
        <Row>
          <Col>
            <Card>
              <Card.Body>
                <Card.Title>Language Progress</Card.Title>
                <Bar data={languageProgressData} options={{ ...options, scales: { ...options.scales, y: { ...options.scales.y, title: { ...options.scales.y.title, text: 'Completion Percentage' } } } }} />
              </Card.Body>
            </Card>
          </Col>
        </Row>
        <Row>
          <Col>
            <Card>
              <Card.Body>
                <Card.Title>Quiz Analytics</Card.Title>
                <Bar data={quizAnalyticsData} options={{ ...options, scales: { ...options.scales, y: { ...options.scales.y, title: { ...options.scales.y.title, text: 'Total Quizzes' } } } }} />
              </Card.Body>
            </Card>
          </Col>
        </Row>
        <Row>
          <Col>
            <Card>
              <Card.Body>
                <Card.Title>Chat Analytics</Card.Title>
                <Bar data={chatAnalyticsData} options={{ ...options, scales: { ...options.scales, y: { ...options.scales.y, title: { ...options.scales.y.title, text: 'Total Chats' } } } }} />
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </>
    );
  };

  return (
    <Container>
      <h1>Analytics</h1>
      {analyticsData ? renderCharts() : <p>Loading analytics data...</p>}
    </Container>
  );
}

export default Analytics;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/QuizDetails.js ###
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useParams } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';

function QuizDetails() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState({});
  const navigate = useNavigate();
  useEffect(() => {
    fetchQuizDetails();
    fetchQuestions();
  }, []);

  const fetchQuizDetails = async () => {
    try {
      const response = await axiosInstance.get('quizzes/${id}/');
      setQuiz(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await axiosInstance.get(`quizzes/${id}/questions/`);
      setQuestions(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleAnswerSelect = (questionId, selectedAnswer) => {
    setUserAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionId]: selectedAnswer,
    }));
  };

  const calculateScore = () => {
    let totalScore = 0;
    let maxScore = 0;

    questions.forEach((question) => {
      maxScore += question.worth;
      if (userAnswers[question.id] === question.answer) {
        totalScore += question.worth;
      }
    });

    return (totalScore / maxScore) * 100;
  };

  const handleQuizSubmit = async () => {
    const attemptData = {
      quiz: quiz.id,
      user_answers: userAnswers,
    };

    try {
      await axiosInstance.post('/quizzes/attempt/', attemptData);
      // Redirect to the analytics dashboard or display a success message
      navigate('/analytics');
    } catch (error) {
      console.error(error);
    }
  };

  if (!quiz) {
    return <div>Loading...</div>;
  }

  return (
    <div className="quiz-details">
      {/* ... existing code ... */}
      <button onClick={handleQuizSubmit}>Submit Quiz</button>
    </div>
  );
}

export default QuizDetails;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Dashboard.js ###
import React from 'react';
import Profile from './Profile';

function Dashboard() {
  return (
    <div className="container">
      <h2>Welcome to the Dashboard</h2>
      <Profile />
    </div>
  );
}

export default Dashboard;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/contexts/AuthContext.js ###
import React, { createContext, useContext, useEffect, useState } from 'react';
import { isLoggedIn, logoutUser } from '../../utils/auth';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [loggedIn, setLoggedIn] = useState(isLoggedIn());

  useEffect(() => {
    const checkAuthStatus = () => {
      setLoggedIn(isLoggedIn());
    };

    window.addEventListener('storage', checkAuthStatus);

    return () => {
      window.removeEventListener('storage', checkAuthStatus);
    };
  }, []);

  const logout = () => {
    logoutUser();
    setLoggedIn(false);
  };

  return (
    <AuthContext.Provider value={{ loggedIn, setLoggedIn, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Languages.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { Button } from 'react-bootstrap';
function Languages() {
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('languages/');
      setLanguages(response.data);
      
    } catch (error) {
      console.error(error);
    }
  };
  const handleAddLanguage = async (e) => {
    e.preventDefault();
    const languageName = prompt('Enter the name of the new language:');
    const languageCode = prompt('Enter the code for the new language:');
    if (languageName && languageCode) {
      try {
        const response = await axiosInstance.post('languages/', {
          name: languageName,
          code: languageCode,
        });
        setLanguages([...languages, response.data]);
      } catch (error) {
        console.error('Error adding new language:', error);
      }
    }
  };



  return (
    <div className="container">
      <h2>Languages</h2>
      <ul>
        {languages.map((language) => (
          <li key={language.id}>{language.name}</li>
        ))}
      </ul>
      <Button variant="primary" onClick={handleAddLanguage}>
        Add Language
      </Button>
    </div>
  );}

export default Languages;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/AnalyticsDashboard.js ###
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card } from 'react-bootstrap';
import { Bar } from 'react-chartjs-2';
import axiosInstance from '../utils/axiosInstance';

function AnalyticsDashboard() {
  const [analyticsData, setAnalyticsData] = useState(null);

  useEffect(() => {
    fetchAnalyticsData();
  }, []);

  const fetchAnalyticsData = async () => {
    try {
      const response = await axiosInstance.get('/analytics/');
      setAnalyticsData(response.data);
    } catch (error) {
      console.error('Error fetching analytics data:', error);
    }
  };

  if (!analyticsData) {
    return <div>Loading...</div>;
  }

  const { metrics } = analyticsData.data;

  const chartData = {
    labels: metrics.map((metric, index) => `Metric ${index + 1}`),
    datasets: [
      {
        label: 'Analytics',
        data: metrics.map((metric) => parseFloat(metric.split(':')[1])),
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
      },
    ],
  };

  return (
    <Container>
      <h1>Analytics Dashboard</h1>
      <Row>
        <Col>
          <Card>
            <Card.Body>
              <Bar data={chartData} />
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Row>
        {metrics.map((metric, index) => (
          <Col key={index} md={4}>
            <Card>
              <Card.Body>
                <Card.Title>{metric.split(':')[0]}</Card.Title>
                <Card.Text>{metric.split(':')[1]}</Card.Text>
              </Card.Body>
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
}

export default AnalyticsDashboard;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Login.js ###
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';
import { loginUser } from '../utils/auth';

function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await loginUser(email, password);
      setSuccess(true);
      setError('');
      setTimeout(() => {
        navigate('/dashboard');
      }, 1500);
    } catch (error) {
      setError(error.error);
      setSuccess(false);
    }
  };

  return (
    <Container>
      <Row className="justify-content-center mt-5">
        <Col md={6}>
          <h2>User Login</h2>
          {success && <Alert variant="success">Login successful! Redirecting to dashboard...</Alert>}
          {error && <Alert variant="danger">{error}</Alert>}
          <Form onSubmit={handleSubmit}>
            <Form.Group controlId="email">
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </Form.Group>
            <Form.Group controlId="password">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="mt-3">
              Login
            </Button>
          </Form>
        </Col>
      </Row>
    </Container>
  );
}

export default Login;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/GenerateQuestion.js ###
import React, { useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function GenerateQuestion() {
  const [quizId, setQuizId] = useState('');
  const [prompt, setPrompt] = useState('');
  const [question, setQuestion] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axiosInstance.post(`/quizzes/${quizId}/generate-question/`, { prompt });
      setQuestion(response.data.question);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Generate Question</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="number"
          placeholder="Quiz ID"
          value={quizId}
          onChange={(e) => setQuizId(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Prompt"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          required
        />
        <button type="submit">Generate</button>
      </form>
      {question && (
        <div>
          <h3>Generated Question:</h3>
          <p>{question.text}</p>
          <p>Answer: {question.answer}</p>
        </div>
      )}
    </div>
  );
}

export default GenerateQuestion;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/CreateQuiz.js ###
import React, { useState, useEffect } from 'react';
import axiosInstance from '../utils/axiosInstance';
import { useNavigate } from 'react-router-dom';
import { Form, Button, Alert } from 'react-bootstrap';

function CreateQuiz() {
  const [title, setTitle] = useState('');
  const [language, setLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      const response = await axiosInstance.post('/quizzes/create/', {
        title,
        language,
      });
      if (response.data.questions && response.data.questions.length > 0) {
        setSuccess(true);
        setError('');
        setLoading(false);
        navigate('/quizzes');
      } else {
        setError('Failed to generate quiz questions.');
        setSuccess(false);
        setLoading(false);
      }
    } catch (error) {
      console.error(error);
      setError('Failed to create quiz. Please try again.');
      setSuccess(false);
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <h2>Create Quiz</h2>
      {success && <Alert variant="success">Quiz created successfully!</Alert>}
      {error && <Alert variant="danger">{error}</Alert>}
      <Form onSubmit={handleSubmit}>
        <Form.Group controlId="title">
          <Form.Label>Title</Form.Label>
          <Form.Control
            type="text"
            placeholder="Enter quiz title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </Form.Group>
        <Form.Group controlId="language">
          <Form.Label>Language</Form.Label>
          <Form.Control
            as="select"
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            required
          >
            <option value="">Select Language</option>
            {languages.map((lang) => (
              <option key={lang.id} value={lang.id}>
                {lang.name}
              </option>
            ))}
          </Form.Control>
        </Form.Group>
        <Button variant="primary" type="submit" disabled={loading}>
          {loading ? 'Creating...' : 'Create Quiz'}
        </Button>
      </Form>
    </div>
  );
}

export default CreateQuiz;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Profile.js ###
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';
import { logoutUser } from '../utils/auth';

function Profile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  useEffect(() => {
    fetchUserData();
  }, []);

  const fetchUserData = async () => {
    try {
      const response = await axiosInstance.get('/users/profile/');
      setUser(response.data);
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  const handleLogout = () => {
    logoutUser();
    navigate('/login');
  };

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <Container>
      <Row className="justify-content-center mt-5">
        <Col md={6}>
          <Card>
            <Card.Body>
              <Card.Title>Profile</Card.Title>
              <Card.Text>
                <strong>Name:</strong> {user.name}
              </Card.Text>
              <Card.Text>
                <strong>Email:</strong> {user.email}
              </Card.Text>
              <Button variant="primary" onClick={handleLogout}>
                Logout
              </Button>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default Profile;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Chat.js ###
import React, { useState, useEffect, useRef } from 'react';
import { Container, Row, Col, Form, Button, Card } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import Markdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

function Chat() {
  const [conversations, setConversations] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [newConversationLanguage, setNewConversationLanguage] = useState('');
  const [newConversationTitle, setNewConversationTitle] = useState('');
  const [languages, setLanguages] = useState([]);
  const [darkMode, setDarkMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();

  useEffect(() => {
    fetchConversations();
    fetchLanguages();
  }, []);

  useEffect(() => {
    if (selectedConversation) {
      fetchMessages();
    }
  }, [selectedConversation]);

  const fetchConversations = async () => {
    try {
      const response = await axiosInstance.get('/chat/conversations/');
      setConversations(response.data);
    } catch (error) {
      console.error('Error fetching conversations:', error);
    }
  };

  const fetchMessages = async () => {
    try {
      const response = await axiosInstance.get(`/chat/conversations/${selectedConversation.id}/messages/`);
      setMessages(response.data);
    } catch (error) {
      console.error('Error fetching messages:', error);
    }
  };

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error('Error fetching languages:', error);
    }
  };

  const handleConversationClick = (conversation) => {
    setSelectedConversation(conversation);
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (isLoading || !newMessage.trim()) return;

    setIsLoading(true);

    try {
      const response = await axiosInstance.post(`/chat/conversations/${selectedConversation.id}/messages/`, {
        content: newMessage,
      });
      setMessages([...messages, { sender: 'user', content: newMessage }, response.data]);
      setNewMessage('');

      if (response.data.content.includes('Quiz created successfully!')) {
        const quizLink = response.data.content.match(/\/quizzes\/\d+/)[0];
        navigate(quizLink);
      }
    } catch (error) {
      console.error('Error sending message:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleNewConversation = async (e) => {
    e.preventDefault();
    if (!newConversationTitle.trim() || !newConversationLanguage) return;

    try {
      const selectedLanguage = languages.find((lang) => lang.id === parseInt(newConversationLanguage));

      const response = await axiosInstance.post('/chat/conversations/', {
        language: selectedLanguage,
        title: newConversationTitle,
      });

      setConversations([...conversations, response.data]);
      setSelectedConversation(response.data);
      setNewConversationLanguage('');
      setNewConversationTitle('');
    } catch (error) {
      console.error('Error creating new conversation:', error);
    }
  };

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  const renderMarkdown = (content) => {
    const quizDataRegex = /(?:^|\n)___quiz!!!___\n([\s\S]*?)(?=\n___quiz!!!___|\n*$)/g;
    const quizData = [];

    let match;
    while ((match = quizDataRegex.exec(content)) !== null) {
      quizData.push(match[1]);
    }

    const formattedContent = content.replace(quizDataRegex, '');

    return (
      <>
        <Markdown remarkPlugins={[remarkGfm]}>{formattedContent}</Markdown>
        {quizData.map((data, index) => (
          <div key={index} className="quiz-container">
            <h4>Quiz</h4>
            <pre>{data}</pre>
          </div>
        ))}
      </>
    );
  };

  return (
    <Container fluid className={`chat-container ${darkMode ? 'dark-mode' : ''}`}>
      <Row>
        <Col md={4}>
          <Card className={`conversations-card ${darkMode ? 'dark-mode' : ''}`}>
            <Card.Header>
              <h4>Conversations</h4>
            </Card.Header>
            <Card.Body>
              <ul className="list-unstyled">
                {conversations.map((conversation) => (
                  <li
                    key={conversation.id}
                    className={`conversation-item ${conversation === selectedConversation ? 'active' : ''}`}
                    onClick={() => handleConversationClick(conversation)}
                  >
                    {conversation.title} ({conversation.language.name})
                  </li>
                ))}
              </ul>
              <Form onSubmit={handleNewConversation}>
                <Form.Group controlId="newConversationLanguage">
                  <Form.Label>Language</Form.Label>
                  <Form.Control
                    as="select"
                    value={newConversationLanguage}
                    onChange={(e) => setNewConversationLanguage(e.target.value)}
                    required
                  >
                    <option value="">Select Language</option>
                    {languages.map((language) => (
                      <option key={language.id} value={language.id}>
                        {language.name}
                      </option>
                    ))}
                  </Form.Control>
                </Form.Group>
                <Form.Group controlId="newConversationTitle">
                  <Form.Label>Title</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Enter conversation title"
                    value={newConversationTitle}
                    onChange={(e) => setNewConversationTitle(e.target.value)}
                    required
                  />
                </Form.Group>
                <Button variant="primary" type="submit" className="mt-3">
                  Create Conversation
                </Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>
        <Col md={8}>
          {selectedConversation ? (
            <Card className={`chat-card ${darkMode ? 'dark-mode' : ''}`}>
              <Card.Header>
                <h4>{selectedConversation.title}</h4>
              </Card.Header>
              <Card.Body>
                <div className="messages-container">
                  {messages.map((message, index) => (
                    <div
                      key={index}
                      className={`message ${message.sender === 'user' ? 'user-message' : 'ai-message'}`}
                    >
                      <strong>{message.sender === 'user' ? 'You' : 'AI Teacher'}:</strong>
                      <div className="message-content">{renderMarkdown(message.content)}</div>
                    </div>
                  ))}
                  <div ref={messagesEndRef} />
                </div>
                <Form onSubmit={handleSendMessage}>
                  <Form.Group controlId="newMessage">
                    <Form.Label>Message</Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      placeholder="Type your message..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      required
                    />
                  </Form.Group>
                  <Button variant="primary" type="submit" disabled={isLoading} className="mt-3">
                    {isLoading ? 'Sending...' : 'Send'}
                  </Button>
                </Form>
              </Card.Body>
            </Card>
          ) : (
            <Card className={`chat-card ${darkMode ? 'dark-mode' : ''}`}>
              <Card.Body>
                <h4>Select a conversation to start chatting.</h4>
              </Card.Body>
            </Card>
          )}
        </Col>
      </Row>
      <Button variant={darkMode ? 'light' : 'dark'} onClick={toggleDarkMode} className="mt-3">
        {darkMode ? 'Light Mode' : 'Dark Mode'}
      </Button>
    </Container>
  );
}

export default Chat;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Register.js ###
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Container, Row, Col, Form, Button, Alert } from 'react-bootstrap';
import { registerUser } from '../utils/auth';
import axiosInstance from '../utils/axiosInstance';

function Register() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [homeLanguage, setHomeLanguage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchLanguages();
  }, []);

  const fetchLanguages = async () => {
    try {
      const response = await axiosInstance.get('/languages/');
      setLanguages(response.data);
    } catch (error) {
      console.error('Error fetching languages:', error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await registerUser(name, email, password, homeLanguage);
      setSuccess(true);
      setError('');
      setTimeout(() => {
        navigate('/dashboard');
      }, 1500);
    } catch (error) {
      setError(error.error);
      setSuccess(false);
    }
  };

  return (
    <Container>
      <Row className="justify-content-center mt-5">
        <Col md={6}>
          <h2>User Registration</h2>
          {success && <Alert variant="success">Registration successful! Redirecting to dashboard...</Alert>}
          {error && <Alert variant="danger">{error}</Alert>}
          <Form onSubmit={handleSubmit}>
            <Form.Group controlId="name">
              <Form.Label>Name</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter your name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                required
              />
            </Form.Group>
            <Form.Group controlId="email">
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                placeholder="Enter your email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
            </Form.Group>
            <Form.Group controlId="password">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
            </Form.Group>
            <Form.Group controlId="homeLanguage">
              <Form.Label>Home Language</Form.Label>
              <Form.Control
                as="select"
                value={homeLanguage}
                onChange={(e) => setHomeLanguage(e.target.value)}
                required
              >
                <option value="">Select your home language</option>
                {languages.map((language) => (
                  <option key={language.id} value={language.id}>
                    {language.name}
                  </option>
                ))}
              </Form.Control>
            </Form.Group>
            <Button variant="primary" type="submit" className="mt-3">
              Register
            </Button>
          </Form>
        </Col>
      </Row>
    </Container>
  );
}

export default Register;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/QuizAttempt.js ###
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';

function QuizAttempt() {
  const { id } = useParams();
  const [quiz, setQuiz] = useState(null);
  const [questions, setQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState({});
  const [score, setScore] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    fetchQuizDetails();
    fetchQuestions();
  }, [id]);

  const fetchQuizDetails = async () => {
    try {
      const response = await axiosInstance.get(`quizzes/${id}/`);
      setQuiz(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const fetchQuestions = async () => {
    try {
      const response = await axiosInstance.get(`quizzes/${id}/questions/`);
      setQuestions(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleAnswerSelect = (questionId, selectedAnswer) => {
    setUserAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionId]: selectedAnswer,
    }));
  };
  const isSubmitDisabled = () => {
    return questions.some((question) => !userAnswers.hasOwnProperty(question.id));
  };
  const handleQuizSubmit = async () => {
    try {
      const response = await axiosInstance.post('quizzes/attempt/', {
        quiz: quiz.id,
        user_answers: userAnswers,
      });
      setScore(response.data.score);
    } catch (error) {
      console.error(error);
    }
  };

  if (!quiz || questions.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className="quiz-attempt">
      <h2>{quiz.title}</h2>
      <h3>Questions:</h3>
      <ul>
        {questions.map((question) => (
          <li key={question.id} className="question-item">
            <div className="question-text">{question.text}</div>
            <ul className="question-choices">
              {question.choices.map((choice, index) => (
                <li
                  key={index}
                  className={`choice ${
                    userAnswers[question.id] === index + 1 ? 'selected' : ''
                  }`}
                  onClick={() => handleAnswerSelect(question.id, index + 1)}
                >
                  {choice}
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
      {score === null ? (
        <button onClick={handleQuizSubmit} disabled={isSubmitDisabled()}>
          Submit Quiz
        </button>
      ) : (
        <div>
          <h3>Score: {score}%</h3>
          <button onClick={() => navigate('/analytics')}>View Analytics</button>
        </div>
      )}
    </div>
  );
}


export default QuizAttempt;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Lessons.js ###
import React, { useEffect, useState } from 'react';
import axiosInstance from '../utils/axiosInstance';

function Lessons() {
  const [lessons, setLessons] = useState([]);

  useEffect(() => {
    fetchLessons();
  }, []);

  const fetchLessons = async () => {
    try {
      const response = await axiosInstance.get('/lessons/');
      setLessons(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Lessons</h2>
      <ul>
        {lessons.map((lesson) => (
          <li key={lesson.id}>{lesson.title}</li>
        ))}
      </ul>
    </div>
  );
}

export default Lessons;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/PrivateRoute.js ###
import React from 'react';
import { Route, Navigate } from 'react-router-dom';

const PrivateRoute = ({ element: Component, ...rest }) => {
    const isAuthenticated = !!localStorage.getItem('access_token');

    return (
        <Route
            {...rest}
            element={isAuthenticated ? <Component {...rest} /> : <Navigate to="/login" />}
        />
    );
};

export default PrivateRoute;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Quizzes.js ###
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import axiosInstance from '../utils/axiosInstance';
import { Container, Row, Col, Card, Button } from 'react-bootstrap';

function Quizzes() {
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    fetchQuizzes();
  }, []);

  const fetchQuizzes = async () => {
    try {
      const response = await axiosInstance.get('quizzes/');
      setQuizzes(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="quizzes">
      <Container>
        <h2>Quizzes</h2>
        <Row>
          {quizzes.map((quiz) => (
            <Col md={4} key={quiz.id}>
              <Card>
                <Card.Body>
                  <Card.Title>{quiz.title}</Card.Title>
                  <Card.Text>Language: {quiz.language}</Card.Text>
                  <Card.Text>Duration: {quiz.duration} minutes</Card.Text>
                  <Card.Text>Passing Score: {quiz.passing_score}%</Card.Text>
                  <Button variant="primary" as={Link} to={`/quizzes/${quiz.id}`}>
                    Take Quiz
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>
      </Container>
    </div>
  );
}

export default Quizzes;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/Navigation.js ###
import React from 'react';
import { Link } from 'react-router-dom';
import { Navbar, Nav, Container, Button } from 'react-bootstrap';
import { useAuth } from './contexts/AuthContext';

function Navigation({ darkMode, toggleDarkMode }) {
    const { loggedIn, logout } = useAuth();


  
    return (
    <Navbar bg={darkMode ? 'dark' : 'light'} variant={darkMode ? 'dark' : 'light'} expand="lg">
      <Container>
        <Navbar.Brand as={Link} to="/">
          aiLingo
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="basic-navbar-nav" />
        <Navbar.Collapse id="basic-navbar-nav">
          <Nav className="ml-auto">
            <Nav.Link as={Link} to="/">
              Home
            </Nav.Link>
            {!loggedIn && (
              <>
                <Nav.Link as={Link} to="/register">
                  Register
                </Nav.Link>
                <Nav.Link as={Link} to="/login">
                  Login
                </Nav.Link>
              </>
            )}
            <Nav.Link as={Link} to="/languages">
              Languages
            </Nav.Link>
            <Nav.Link as={Link} to="/lessons">
              Lessons
            </Nav.Link>
            <Nav.Link as={Link} to="/quizzes">
              Quizzes
            </Nav.Link>
            {loggedIn && ( 
              <Nav.Link as={Link} to="/create-quiz">
                Create Quiz
              </Nav.Link>
            )}
            {loggedIn && (
              <Nav.Link as={Link} to="/profile">
                Profile
              </Nav.Link>
            )}
              {loggedIn && (
              <Nav.Link as={Link} to="/chat">
                Chat
              </Nav.Link>
            )}
              {loggedIn && (
              <Nav.Link as={Link} to="/analytics">
                Analytics
              </Nav.Link>
            )}
          </Nav>
        </Navbar.Collapse>
      </Container>
      <Button variant={darkMode ? 'light' : 'dark'} onClick={toggleDarkMode}>
        {darkMode ? 'Light Mode' : 'Dark Mode'}
      </Button>
    </Navbar>
);
}

export default Navigation;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/components/ConversationPage.js ###
// ConversationPage.js

import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Container, Row, Col, Card, Form, Button } from 'react-bootstrap';
import axiosInstance from '../utils/axiosInstance';
import ReactMarkdown from 'react-markdown';

function ConversationPage({ darkMode }) {
  const { id } = useParams();
  const [conversation, setConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');

  useEffect(() => {
    // fetchConversation();
    fetchMessages();
  }, [id]);

//   const fetchConversation = async () => {
//     try {
//       const response = await axiosInstance.get(`/chat/conversations/${id}/`);
//       setConversation(response.data);
//     } catch (error) {
//       console.error('Error fetching conversation:', error);
//     }
//   };

  const fetchMessages = async () => {
    try {
      const response = await axiosInstance.get(`/chat/conversations/${id}/messages/`);
      setMessages(response.data);
    } catch (error) {
      console.error('Error fetching messages:', error);
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    try {
      const response = await axiosInstance.post(`/chat/conversations/${id}/messages/`, {
        content: newMessage,
      });
      setMessages([...messages, response.data]);
      setNewMessage('');
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  if (!conversation) {
    return <div>Loading...</div>;
  }

  return (
    <Container className={darkMode ? 'dark-mode' : ''}>
      <Row>
        <Col>
          <h2>{conversation.language.name} Conversation</h2>
          <Card className={`mb-3 ${darkMode ? 'bg-dark text-light' : ''}`}>
            <Card.Body>
              <div className="chat-messages">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`message ${
                      message.sender === 'user' ? 'user-message' : 'ai-message'
                    } ${darkMode ? 'bg-secondary text-light' : ''}`}
                  >
                    <strong>{message.sender === 'user' ? 'You' : 'AI Teacher'}:</strong>
                    <ReactMarkdown>{message.content}</ReactMarkdown>
                  </div>
                ))}
              </div>
              <Form onSubmit={handleSendMessage}>
                <Form.Group controlId="newMessage">
                  <Form.Control
                    as="textarea"
                    rows={3}
                    placeholder="Type your message..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    required
                    className={darkMode ? 'bg-dark text-light' : ''}
                  />
                </Form.Group>
                <Button variant={darkMode ? 'light' : 'primary'} type="submit">
                  Send
                </Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}

export default ConversationPage;

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/logo.svg ###
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/index.css ###
.messages {
  height: 300px;
  overflow-y: auto;
  margin-bottom: 20px;
}

.message {
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
}

.message.user {
  background-color: #007bff;
  color: #fff;
  align-self: flex-end;
}

.message.assistant {
  background-color: #f1f0f0;
  align-self: flex-start;
}

.input-container {
  display: flex;
  margin-top: 20px;
}

.dark-mode {
  background-color: #343a40;
  color: #fff;
}

.dark-mode .card {
  background-color: #212529;
}

.dark-mode .list-group-item {
  background-color: #343a40;
  color: #fff;
}

.dark-mode .list-group-item.active {
  background-color: #007bff;
  border-color: #007bff;
}
.question-choices li {
  cursor: pointer;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

.question-choices li:hover {
  background-color: #f0f0f0;
}

.question-choices li.selected {
  background-color: #e0f0ff;
}

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/index.js ###
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import './styles/global.css';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);



### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/reportWebVitals.js ###
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/src/App.css ###
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/package.json ###
{
  "name": "ailingo-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.6.8",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.4.2",
    "react": "^18.2.0",
    "react-bootstrap": "^2.10.2",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.1",
    "react-router-dom": "^6.22.3",
    "react-scripts": "^5.0.1",
    "remark-gfm": "^4.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


### /workspaces/aiLingo/backend/tempfront/ailingo-frontend/.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

.vercel


### /workspaces/aiLingo/backend/aiLingo/chat/admin.py ###
from django.contrib import admin

# Register your models here.


### /workspaces/aiLingo/backend/aiLingo/chat/views.py ###
import json
from rest_framework import generics, status
from rest_framework.response import Response
from languages.models import Language
from quizzes.models import Quiz
from quizzes.serializers import QuestionSerializer
from .models import Conversation, Message
from .serializers import ConversationSerializer, MessageSerializer
from django.conf import settings
import google.generativeai as genai
from rest_framework.permissions import IsAuthenticated
from analytics.models import UserAnalytics

class ConversationListCreateView(generics.ListCreateAPIView):
    serializer_class = ConversationSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Conversation.objects.filter(user=self.request.user)
    def perform_create(self, serializer):
        language_id = self.request.data.get('language', {}).get('id')
        title = self.request.data.get('title')
        serializer.save(user=self.request.user, language_id=language_id, title=title)
class MessageListCreateView(generics.ListCreateAPIView):
    serializer_class = MessageSerializer
    permission_classes = [IsAuthenticated]

    def parse_quiz_data(self, text: str):
        quiz_data = {}
        lines = text[text.find("___quiz!!!___"):].strip().split("\n")

        for line in lines:
            if line.startswith("Quiz Title:"):
                quiz_data["title"] = line.split("Quiz Title:")[1].strip()
            elif line.startswith("Duration:"):
                quiz_data["duration"] = int(line.split("Duration:")[1].strip())
            elif line.startswith("Passing Score:"):
                quiz_data["passing_score"] = int(line.split("Passing Score:")[1].strip())
            elif line.startswith("q:"):
                if "questions" not in quiz_data:
                    quiz_data["questions"] = []
                question_data = {}
                question_data["text"] = line.split("q:")[1].strip()
            elif line.startswith("c"):
                if "choices" not in question_data:
                    question_data["choices"] = []
                question_data["choices"].append(line.split("c")[1].strip())
            elif line.startswith("e"):
                if "explanations" not in question_data:
                    question_data["explanations"] = []
                question_data["explanations"].append(line.split("e")[1].strip())
            elif line.startswith("a:"):
                question_data["answer"] = int(line.split("a:")[1].strip())
            elif line.startswith("w:"):
                question_data["worth"] = int(line.split("w:")[1].strip())
                quiz_data["questions"].append(question_data)

        return quiz_data if "title" in quiz_data and "duration" in quiz_data and "passing_score" in quiz_data and "questions" in quiz_data else None
    
    def extract_topic_scores(self, text):
        print(text)
        topic_scores = json.loads(text.strip().replace("'", "\""))
        print(topic_scores)
        return topic_scores

    def get_queryset(self):
        conversation_id = self.kwargs["conversation_id"]
        return Message.objects.filter(conversation_id=conversation_id)

    def create(self, request, *args, **kwargs):
        conversation_id = self.kwargs["conversation_id"]
        conversation = Conversation.objects.get(id=conversation_id)
        user_message = request.data["content"]

        user_message_serializer = MessageSerializer(
            data={
                "conversation": conversation_id,
                "sender": "user",
                "content": user_message,
            }
        )
        user_message_serializer.is_valid(raise_exception=True)
        user_message_serializer.save()

        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                              generation_config=generation_config,
                              safety_settings=safety_settings)

        conversation_messages = Message.objects.filter(
            conversation=conversation
        ).order_by("timestamp")
        conversation_history = "\n".join(
            [
                f"{message.sender}: {message.content}"
                for message in conversation_messages
            ]
        )
        home_language = (
            request.user.home_language.name if request.user.home_language else "English"
        )
        learning_language = conversation.language.name
        prompt_parts = [
            f"You are a teacher of the {learning_language} language. Reply in {home_language} and provide examples when teaching. Be supportive and helpful.",
            "Unless specified, generate 5 example questions.",
            "When giving the answer key to questions, ADD 888333 ANSWERKEY 888333, then on the next line, add the answers.",
            f"For newline characters inside table cells, use the special character sequence \"\\n\".",
            f"You are a teacher and master in the {learning_language} language. Use only markdown for outputting, including tables. For tables, use the following markdown rendering:",
            "\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |",
            "Your role is to teach and provide explanations without directing to outside sources. Provide your responses in markdown format.",
            f"If the user asks for a quiz, FIRST add ___quiz!!!___ then generate a quiz with the following strict format:",
            "Quiz Title: <quiz_title>",
            "Duration: <duration_in_minutes>",
            "Passing Score: <passing_score_percentage>",
            "Then generate 5 multiple-choice questions for the quiz, each with the following strict format:",
            "q: <question_text>",
            "c1: <choice_1>",
            "e1: <explanation_for_choice_1_in_{home_language}>",
            "c2: <choice_2>",
            "e2: <explanation_for_choice_2_in_{home_language}>",
            "c3: <choice_3>",
            "e3: <explanation_for_choice_3_in_{home_language}>",
            "c4: <choice_4>",
            "e4: <explanation_for_choice_4_in_{home_language}>",
            "a: <correct_answer_choice_number>",
            "w: <worth_of_question_as_integer>",
            "Make sure to include all the required components for the quiz and each question. Provide the entire quiz in the specified strict format, with each question starting on a new line. If the user's message does not explicitly ask for a quiz, do not generate one.",
            "Here's an example of a generated quiz:",
            "___quiz!!!___",
            "Quiz Title: French Greetings",
            "Duration: 10",
            "Passing Score: 80",
            "q: How do you say \"Hello\" in French?",
            "c1: Bonjour",
            "e1: Correct! \"Bonjour\" means \"Hello\" in French.",
            "c2: Au revoir",
            "e2: \"Au revoir\" means \"Goodbye\" in French.",
            "c3: Merci",
            "e3: \"Merci\" means \"Thank you\" in French.",
            "c4: Bonsoir",
            "e4: \"Bonsoir\" means \"Good evening\" in French.",
            "a: 1",
            "w: 2",
            "q: How do you say \"Good morning\" in French?",
            "c1: Bonsoir",
            "e1: \"Bonsoir\" means \"Good evening\" in French.",
            "c2: Bonjour",
            "e2: \"Bonjour\" is a general greeting that can be used throughout the day.",
            "c3: Bon matin",
            "e3: Correct! \"Bon matin\" means \"Good morning\" in French.",
            "c4: Bonne nuit",
            "e4: \"Bonne nuit\" means \"Good night\" in French.",
            "a: 3",
            "w: 2",
            "q: What is the French word for \"please\"?",
            "c1: Merci",
            "e1: \"Merci\" means \"Thank you\" in French.",
            "c2: S'il vous plaît",
            "e2: Correct! \"S'il vous plaît\" means \"Please\" in French.",
            "c3: Oui",
            "e3: \"Oui\" means \"Yes\" in French.",
            "c4: Non",
            "e4: \"Non\" means \"No\" in French.",
            "a: 2",
            "w: 2",
            "q: How do you say \"My name is...\" in French?",
            "c1: Je m'appelle...",
            "e1: Correct! \"Je m'appelle...\" means \"My name is...\" in French.",
            "c2: Quel est votre nom?",
            "e2: \"Quel est votre nom?\" means \"What is your name?\" in French.",
            "c3: Comment allez-vous?",
            "e3: \"Comment allez-vous?\" means \"How are you?\" in French.",
            "c4: Merci",
            "e4: \"Merci\" means \"Thank you\" in French.",
            "a: 1",
            "w: 3",
            "q: What is the French phrase for \"Have a nice day\"?",
            "c1: Bonne journée",
            "e1: Correct! \"Bonne journée\" means \"Have a nice day\" in French.",
            "c2: Bon appétit",
            "e2: \"Bon appétit\" means \"Enjoy your meal\" in French.",
            "c3: Au revoir",
            "e3: \"Au revoir\" means \"Goodbye\" in French.",
            "c4: Bien sûr",
            "e4: \"Bien sûr\" means \"Of course\" in French.",
            "a: 1",
            "w: 3",
            "At the end of each message, add a dictionary with the topic scores for the message, explaining what subjects you taught during this interaction. For example:",
            "!!!TOPICS!!!: {'subjunctive': 0.1, 'travel vocab': 0.3, 'past perfect': 0.6}",
            "Make sure to include the entire dictionary with the topic scores at the end of each message, in the format of the example. It should be the last lines of the message. Begin the dictionary with !!!TOPICS!!!: and then the dictionary in the format shown.",
            f"Conversation history:\n{conversation_history}",
            f"User: {user_message}",
            "AI Teacher:",
        ]

        prompt = "\n".join(prompt_parts)

        response = model.generate_content(prompt)
        topics = response.text[response.text.find("!!!TOPICS!!!") + 13 :]
        response = response.text[: response.text.find("!!!TOPICS!!!")]
        bot_response = response.replace("\n", "\\n")

        if "___quiz!!!___" in response:
            quiz_data = self.parse_quiz_data(response)
            if quiz_data:
                quiz = Quiz.objects.create(
                    language=conversation.language,
                    user=request.user,
                    title=quiz_data["title"],
                    duration=quiz_data["duration"],
                    passing_score=quiz_data["passing_score"],
                )
                questions_data = quiz_data["questions"]
                for question_data in questions_data:
                    question_data["quiz"] = quiz.id
                    serializer = QuestionSerializer(data=question_data)
                    serializer.is_valid(raise_exception=True)
                    serializer.save()
                
                # Reformat the quiz data for better user experience
                formatted_quiz_data = {
                    "id": quiz.id,
                    "title": quiz.title,
                    "duration": quiz.duration,
                    "passing_score": quiz.passing_score,
                    "questions": [],
                }
                for question in quiz.question_set.all():
                    formatted_question = {
                        "id": question.id,
                        "text": question.text,
                        "choices": question.choices,
                        "explanations": question.explanations,
                    }
                    formatted_quiz_data["questions"].append(formatted_question)

                bot_response += f"\n\nQuiz created successfully! You can access the quiz here: [Take Quiz](/quizzes/{quiz.id+1})"
                # bot_response += f"\n\nQuiz Data:\n```json\n{json.dumps(formatted_quiz_data, indent=2)}\n```"
        
        bot_message_serializer = MessageSerializer(
            data={
                "conversation": conversation_id,
                "sender": "bot",
                "content": bot_response,
            }
        )
        bot_message_serializer.is_valid(raise_exception=True)
        bot_message_serializer.save()

        topic_scores = self.extract_topic_scores(topics)
        user_analytics, _ = UserAnalytics.objects.get_or_create(user=request.user)
        user_analytics.update_chat_analytics(conversation.language, len(user_message), topic_scores)

        return Response(bot_message_serializer.data, status=status.HTTP_201_CREATED)

### /workspaces/aiLingo/backend/aiLingo/chat/urls.py ###
from django.urls import path
from .views import ConversationListCreateView, MessageListCreateView

urlpatterns = [
    path(
        "conversations/",
        ConversationListCreateView.as_view(),
        name="conversation-list-create",
    ),
    path(
        "conversations/<int:conversation_id>/messages/",
        MessageListCreateView.as_view(),
        name="message-list-create",
    ),
]


### /workspaces/aiLingo/backend/aiLingo/chat/apps.py ###
from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "chat"


### /workspaces/aiLingo/backend/aiLingo/chat/serializers.py ###
from rest_framework import serializers

from languages.models import Language
from .models import Conversation, Message
from languages.serializers import LanguageSerializer


class ConversationSerializer(serializers.ModelSerializer):
    language = LanguageSerializer(read_only=True)

    class Meta:
        model = Conversation
        fields = ["id", "language", "title", "created_at"]

    def create(self, validated_data):
        language_id = validated_data.pop("language_id")
        language = Language.objects.get(id=language_id)
        title = validated_data.pop("title")
        conversation = Conversation.objects.create(language=language, title=title, **validated_data)
        return conversation
class MessageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Message
        fields = ["id", "conversation", "sender", "content", "timestamp"]


### /workspaces/aiLingo/backend/aiLingo/chat/models.py ###
from django.conf import settings
from django.db import models

from languages.models import Language


class Conversation(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user} - {self.title}"

class Message(models.Model):
    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE)
    sender = models.CharField(max_length=50)  # 'user' or 'bot'
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.conversation} - {self.sender}: {self.content[:50]}"


### /workspaces/aiLingo/backend/aiLingo/chat/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/users/admin.py ###
from django.contrib import admin
from .models import User

admin.site.register(User)


### /workspaces/aiLingo/backend/aiLingo/users/views.py ###
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer, UserRegistrationSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework_simplejwt.exceptions import TokenError, InvalidToken


class RegisterView(APIView):
    permission_classes = []

    def post(self, request):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                    "user": UserSerializer(user).data,
                },
                status=status.HTTP_201_CREATED,
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LoginView(APIView):
    permission_classes = []

    def post(self, request):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response(
                {"error": "Please provide both email and password"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        user = authenticate(request, username=email, password=password)

        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                    "user": UserSerializer(user).data,
                },
                status=status.HTTP_200_OK,
            )
        else:
            return Response(
                {"error": "Invalid credentials"}, status=status.HTTP_401_UNAUTHORIZED
            )


class ProfileView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        serializer = UserSerializer(user)
        data = serializer.data
        data["is_superuser"] = user.is_superuser
        return Response(data)


class RefreshTokenView(APIView):
    permission_classes = []

    def post(self, request):
        refresh_token = request.data.get("refresh")
        if refresh_token is None:
            return Response(
                {"error": "Refresh token is required"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        try:
            refresh = RefreshToken(refresh_token)
            access_token = str(refresh.access_token)
            return Response({"access": access_token}, status=status.HTTP_200_OK)
        except (TokenError, InvalidToken):
            return Response(
                {"error": "Invalid refresh token"}, status=status.HTTP_401_UNAUTHORIZED
            )


### /workspaces/aiLingo/backend/aiLingo/users/urls.py ###
from django.urls import path
from .views import RegisterView, LoginView, ProfileView, RefreshTokenView

urlpatterns = [
    path("register/", RegisterView.as_view(), name="register"),
    path("login/", LoginView.as_view(), name="login"),
    path("profile/", ProfileView.as_view(), name="profile"),
    path("refresh-token/", RefreshTokenView.as_view(), name="refresh_token"),
]


### /workspaces/aiLingo/backend/aiLingo/users/apps.py ###
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "users"


### /workspaces/aiLingo/backend/aiLingo/users/serializers.py ###
from rest_framework import serializers

from .models import User


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = [
            "id",
            "email",
            "name",
            "profile_pic",
            "date_joined",
            "is_premium",
            "home_language",
        ]


class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = [
            "id",
            "email",
            "name",
            "profile_pic",
            "date_joined",
            "is_premium",
            "password",
            "home_language",
        ]

    def create(self, validated_data):
        password = validated_data.pop("password")
        user = User.objects.create(**validated_data)
        user.set_password(password)
        user.save()
        return user


### /workspaces/aiLingo/backend/aiLingo/users/models.py ###
from django.contrib.auth.models import (
    AbstractBaseUser,
    BaseUserManager,
    PermissionsMixin,
)
from django.db import models
from languages.models import Language


class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, password, **extra_fields)


class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    profile_pic = models.ImageField(upload_to="profile_pics", blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    is_premium = models.BooleanField(default=False)
    home_language = models.ForeignKey(
        Language, on_delete=models.SET_NULL, null=True, blank=True
    )
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name"]

    objects = UserManager()

    def __str__(self):
        return self.email


### /workspaces/aiLingo/backend/aiLingo/users/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/requirements.txt ###
django==4.2.11
djangorestframework==3.15.1
google-generativeai
requests
python-dotenv
djangorestframework-simplejwt
Pillow
django-cors-headers
gunicorn
psycopg2-binary
dj_database_url

### /workspaces/aiLingo/backend/aiLingo/quizzes/admin.py ###
from django.contrib import admin
from .models import Quiz, Question, Attempt


@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    list_display = ("title", "language", "duration", "passing_score")
    list_filter = ("language",)
    search_fields = ("title",)


@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ("text", "quiz")
    list_filter = ("quiz",)
    search_fields = ("text",)


@admin.register(Attempt)
class AttemptAdmin(admin.ModelAdmin):
    list_display = ("user", "quiz", "score", "date")
    list_filter = ("quiz", "user")
    search_fields = ("user__username",)


### /workspaces/aiLingo/backend/aiLingo/quizzes/views.py ###
import re
from django.conf import settings
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Attempt, Question, Quiz
from .serializers import AttemptSerializer, QuestionSerializer, QuizSerializer
import google.generativeai as genai
from analytics.models import UserAnalytics

class CreateQuizView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        home_language = request.user.home_language.name if request.user.home_language else "English"

        generation_config = {
        "temperature": 0.9,
        "top_p": 1,
        "top_k": 1,
        "max_output_tokens": 2048,
        }

        safety_settings = [
        {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.0-pro",
                                    generation_config=generation_config,
                                    safety_settings=safety_settings)

        prompt_parts = [
        "You are a language teacher responsible for creating quizzes to assess students' proficiency in various languages. You only respond using plaintext, you do not use markdown, bold, italics, lists, or anything else just plaintext. Your task is to generate a quiz with the following specifications:\n\n1. The quiz should have 5 multiple-choice questions with 4 answer choices each.\n2. The questions should focus on basic vocabulary and grammar concepts appropriate for beginners.\n3. Include the quiz title, duration in minutes, and the passing score percentage.\n4. For each question, provide an explanation for each answer choice in the language of instruction specified.\n5. Specify the point value of each question as an integer.\n\nPlease provide the quiz in the following format:\n\nQuiz Title:",
        "input: Generate a quiz titled \"French Greetings\" for English speakers learning French.",
        "output: Quiz Title: French Greetings\nDuration: 10\nPassing Score: 80\nq: How do you say \"Hello\" in French?\nc1: Bonjour\ne1: Correct! \"Bonjour\" means \"Hello\" in French.\nc2: Au revoir\ne2: \"Au revoir\" means \"Goodbye\" in French.\nc3: Merci\ne3: \"Merci\" means \"Thank you\" in French.\nc4: Bonsoir\ne4: \"Bonsoir\" means \"Good evening\" in French.\na: 1\nw: 2\nq: How do you say \"Good morning\" in French?\nc1: Bonsoir\ne1: \"Bonsoir\" means \"Good evening\" in French.\nc2: Bonjour\ne2: \"Bonjour\" is a general greeting that can be used throughout the day.\nc3: Bon matin\ne3: Correct! \"Bon matin\" means \"Good morning\" in French.\nc4: Bonne nuit\ne4: \"Bonne nuit\" means \"Good night\" in French.\na: 3\nw: 2\nq: What is the French word for \"please\"?\nc1: Merci\ne1: \"Merci\" means \"Thank you\" in French.\nc2: S'il vous plaît\ne2: Correct! \"S'il vous plaît\" means \"Please\" in French.\nc3: Oui\ne3: \"Oui\" means \"Yes\" in French.\nc4: Non\ne4: \"Non\" means \"No\" in French.\na: 2\nw: 2\nq: How do you say \"My name is...\" in French?\nc1: Je m'appelle...\ne1: Correct! \"Je m'appelle...\" means \"My name is...\" in French.\nc2: Quel est votre nom?\ne2: \"Quel est votre nom?\" means \"What is your name?\" in French.\nc3: Comment allez-vous?\ne3: \"Comment allez-vous?\" means \"How are you?\" in French.\nc4: Merci\ne4: \"Merci\" means \"Thank you\" in French.\na: 1\nw: 3\nq: What is the French phrase for \"Have a nice day\"?\nc1: Bonne journée\ne1: Correct! \"Bonne journée\" means \"Have a nice day\" in French.\nc2: Bon appétit\ne2: \"Bon appétit\" means \"Enjoy your meal\" in French.\nc3: Au revoir\ne3: \"Au revoir\" means \"Goodbye\" in French.\nc4: Bien sûr\ne4: \"Bien sûr\" means \"Of course\" in French.\na: 1\nw: 3",
        "input: Generate a quiz titled \"Gli Articoli\" for English speakers learning French.",
        "output: Quiz Title: Gli Articoli\nDuration: 12\nPassing Score: 75\nq: What is the definite article for \"il libro\" (the book) in Italian?\nc1: il\ne1: Correct! \"Il\" is the definite article for masculine singular nouns in Italian.\nc2: la\ne2: \"La\" is the definite article for feminine singular nouns in Italian.\nc3: i\ne3: \"I\" is the definite article for masculine plural nouns in Italian.\nc4: le\ne4: \"Le\" is the definite article for feminine plural nouns in Italian.\na: 1\nw: 2q: What is the indefinite article for \"una penna\" (a pen) in Italian?\nc1: il\ne1: \"Il\" is the definite article for masculine singular nouns in Italian.\nc2: un\ne2: Correct! \"Un\" is the indefinite article for masculine singular nouns in Italian.\nc3: una\ne3: \"Una\" is the indefinite article for feminine singular nouns in Italian.\nc4: dei\ne4: \"Dei\" is the plural indefinite article for masculine nouns in Italian.\na: 2\nw: 2\nq: Which article should be used before \"studenti\" (students)?\nc1: il\ne1: \"Il\" is for singular masculine nouns in Italian.\nc2: la\ne2: \"La\" is for singular feminine nouns in Italian.\nc3: i\ne3: Correct! \"I\" is the definite plural article for masculine nouns like \"studenti\".\nc4: le\ne4: \"Le\" is the definite plural article for feminine nouns in Italian.\na: 3\nw: 3\nq: What is the correct way to say \"the girls\" in Italian?\nc1: i ragazze\ne1: This is incorrect. \"I\" is for masculine plural nouns.\nc2: la ragazze\ne2: This is incorrect. \"La\" is for singular feminine nouns.\nc3: le ragazze\ne3: Correct! \"Le ragazze\" means \"the girls\" using the feminine plural article.\nc4: un ragazze\ne4: This is incorrect. \"Un\" is the indefinite masculine singular article.\na: 3\nw: 2\nq: How do you say \"a book\" in Italian?\nc1: il libro\ne1: \"Il libro\" means \"the book\" using the definite article.\nc2: un libro\ne2: Correct! \"Un libro\" means \"a book\" using the indefinite masculine singular article.\nc3: una libro\ne3: This is incorrect. \"Una\" is for feminine singular nouns.\nc4: i libri\ne4: \"I libri\" means \"the books\" using the masculine plural definite article.\na: 2\nw: 3",
        "input: Generate a quiz titled \"Del español al alemán\" for Spanish speakers learning German.",
        "output: Quiz Title: Del español al alemán\nDuration: 20\nPassing Score: 75\nq: How do you say \"Hola\" (Hello) in German?\nc1: Tschüss\ne1: \"Tschüss\" means \"Goodbye\" in German.\nc2: Hallo\ne2: Correct! \"Hallo\" means \"Hello\" in German.\nc3: Guten Tag\ne3: \"Guten Tag\" means \"Good day\" in German.\nc4: Danke\ne4: \"Danke\" means \"Thank you\" in German.\na: 2\nw: 2q: What is the German translation for \"Gracias\" (Thank you)?\nc1: Bitte\ne1: \"Bitte\" means \"Please\" in German.\nc2: Nein\ne2: \"Nein\" means \"No\" in German.\nc3: Danke\ne3: Correct! \"Danke\" means \"Thank you\" in German.\nc4: Ja\ne4: \"Ja\" means \"Yes\" in German.\na: 3\nw: 2q: How would you say \"El perro\" (The dog) in German?\nc1: Der Hund\ne1: Correct! \"Der Hund\" means \"The dog\" in German.\nc2: Die Katze\ne2: \"Die Katze\" means \"The cat\" in German.\nc3: Das Pferd\ne3: \"Das Pferd\" means \"The horse\" in German.\nc4: Die Maus\ne4: \"Die Maus\" means \"The mouse\" in German.\na: 1\nw: 3q: Translate \"Comer\" (To eat) to German.\nc1: Trinken\ne1: \"Trinken\" means \"To drink\" in German.\nc2: Essen\ne2: Correct! \"Essen\" means \"To eat\" in German.\nc3: Schlafen\ne3: \"Schlafen\" means \"To sleep\" in German.\nc4: Lesen\ne4: \"Lesen\" means \"To read\" in German.\na: 2\nw: 3q: How do you say \"La casa\" (The house) in German?\nc1: Das Haus\ne1: Correct! \"Das Haus\" means \"The house\" in German.\nc2: Der Baum\ne2: \"Der Baum\" means \"The tree\" in German.\nc3: Die Blume\ne3: \"Die Blume\" means \"The flower\" in German.\nc4: Der Apfel\ne4: \"Der Apfel\" means \"The apple\" in German.\na: 1\nw: 2Prompt: Create an English to Spanish vocabulary quiz titled \"Vocabulario básico\" for beginner Spanish learners.Quiz Title: Vocabulario básico\nDuration: 10\nPassing Score: 70q: What is the Spanish word for \"hello\"?\nc1: Adiós\ne1: \"Adiós\" means \"goodbye\" in Spanish.\nc2: Hola\ne2: Correct! \"Hola\" means \"hello\" in Spanish.\nc3: Gracias\ne3: \"Gracias\" means \"thank you\" in Spanish.\nc4: Sí\ne4: \"Sí\" means \"yes\" in Spanish.\na: 2\nw: 2q: How do you say \"water\" in Spanish?\nc1: Leche\ne1: \"Leche\" means \"milk\" in Spanish.\nc2: Jugo\ne2: \"Jugo\" means \"juice\" in Spanish.\nc3: Agua\ne3: Correct! \"Agua\" means \"water\" in Spanish.\nc4: Vino\ne4: \"Vino\" means \"wine\" in Spanish.\na: 3\nw: 2q: What is the Spanish translation for \"book\"?\nc1: Lápiz\ne1: \"Lápiz\" means \"pencil\" in Spanish.\nc2: Libro\ne2: Correct! \"Libro\" means \"book\" in Spanish.\nc3: Mochila\ne3: \"Mochila\" means \"backpack\" in Spanish.\nc4: Regla\ne4: \"Regla\" means \"ruler\" in Spanish.\na: 2\nw: 3q: Translate \"apple\" to Spanish.\nc1: Plátano\ne1: \"Plátano\" means \"banana\" in Spanish.\nc2: Naranja\ne2: \"Naranja\" means \"orange\" in Spanish.\nc3: Manzana\ne3: Correct! \"Manzana\" means \"apple\" in Spanish.\nc4: Sandía\ne4: \"Sandía\" means \"watermelon\" in Spanish.\na: 3\nw: 2q: How would you say \"house\" in Spanish?\nc1: Carro\ne1: \"Carro\" means \"car\" in Spanish.\nc2: Casa\ne2: Correct! \"Casa\" means \"house\" in Spanish.\nc3: Perro\ne3: \"Perro\" means \"dog\" in Spanish.\nc4: Escuela\ne4: \"Escuela\" means \"school\" in Spanish.\na: 2\nw: 3",
        "input: Generate a quiz titled \"El Subjuntivo\" for English speakers learning Spanish.",
        "output: Quiz Title: El Subjuntivo\nDuration: 15\nPassing Score: 75\nq: Which verb form correctly completes the sentence \"Quiero que tú _____ conmigo\" (I want you to come with me)?\nc1: vienes\ne1: \"Vienes\" is the present indicative form, used for facts or certainty.\nc2: vengas\ne2: Correct! \"Vengas\" is the present subjunctive form, used for wishes, desires, or uncertainty.\nc3: viniste\ne3: \"Viniste\" is the preterite indicative form, used for completed actions in the past.\nc4: vendrás\ne4: \"Vendrás\" is the future indicative form, used for actions that will happen in the future.\na: 2\nw: 3\nq: Choose the correct subjunctive form of the verb \"ser\" (to be) in the sentence \"Es importante que _____ honesto\" (It's important that you be honest).\nc1: eres\ne1: \"Eres\" is the present indicative form, used for facts or certainty.\nc2: seas\ne2: Correct! \"Seas\" is the present subjunctive form, used for wishes, desires, or uncertainty.\nc3: fuiste\ne3: \"Fuiste\" is the preterite indicative form, used for completed actions in the past.\nc4: serás\ne4: \"Serás\" is the future indicative form, used for actions that will happen in the future.\na: 2\nw: 3\nq: Which sentence correctly uses the subjunctive mood?\nc1: Creo que ella es inteligente.\ne1: This sentence uses the indicative mood, stating a fact or belief.\nc2: Es posible que él venga mañana.\ne2: Correct! This sentence uses the subjunctive mood to express possibility or uncertainty.\nc3: Sé que ellos viven en Madrid.\ne3: This sentence uses the indicative mood, stating a known fact.\nc4: Estoy seguro de que aprobará el examen.\ne4: This sentence uses the indicative mood, expressing certainty about a future event.\na: 2\nw: 3\nq: Complete the sentence with the correct subjunctive form: \"Ojalá _____ buen tiempo mañana\" (I hope the weather is good tomorrow).\nc1: hace\ne1: \"Hace\" is the present indicative form, used for facts or certainty.\nc2: haga\ne2: Correct! \"Haga\" is the present subjunctive form, used for wishes, desires, or uncertainty.\nc3: hizo\ne3: \"Hizo\" is the preterite indicative form, used for completed actions in the past.\nc4: hará\ne4: \"Hará\" is the future indicative form, used for actions that will happen in the future.\na: 2\nw: 3\nq: Choose the correct verb form for the sentence \"Te sugiero que _____ más ejercicio\" (I suggest that you exercise more).\nc1: haces\ne1: \"Haces\" is the present indicative form, used for facts or certainty.\nc2: hagas\ne2: Correct! \"Hagas\" is the present subjunctive form, used for suggestions, advice, or uncertainty.\nc3: hiciste\ne3: \"Hiciste\" is the preterite indicative form, used for completed actions in the past.\nc4: harás\ne4: \"Harás\" is the future indicative form, used for actions that will happen in the future.\na: 2\nw: 3",
        "input: Generate a quiz titled \"Präpositionen\" for English speakers learning German.",
        "output: Quiz Title: Präpositionen\nDuration: 12\nPassing Score: 80\nq: Which preposition correctly completes the sentence \"Ich gehe _____ Hause\" (I'm going home)?\nc1: zu\ne1: Correct! \"Zu\" is used to indicate movement towards a destination, such as \"to\" or \"towards\" in English.\nc2: auf\ne2: \"Auf\" means \"on\" or \"onto\" in English, usually referring to a surface or a direction upwards.\nc3: in\ne3: \"In\" is used to indicate location inside something, such as \"in\" or \"into\" in English.\nc4: an\ne4: \"An\" is used to indicate proximity or contact, such as \"at,\" \"on,\" or \"by\" in English.\na: 1\nw: 3\nq: Choose the correct preposition for the sentence \"Das Buch liegt _____ dem Tisch\" (The book is lying on the table).\nc1: in\ne1: \"In\" is used to indicate location inside something, such as \"in\" or \"into\" in English.\nc2: an\ne2: \"An\" is used to indicate proximity or contact, such as \"at,\" \"on,\" or \"by\" in English.\nc3: auf\ne3: Correct! \"Auf\" means \"on\" or \"onto\" in English, usually referring to a surface or a direction upwards.\nc4: über\ne4: \"Über\" means \"over\" or \"above\" in English, indicating a higher position without contact.\na: 3\nw: 3\nq: Which preposition is used in the sentence \"Ich komme _____ Berlin\" (I come from Berlin)?\nc1: aus\ne1: Correct! \"Aus\" is used to indicate origin or source, such as \"from\" or \"out of\" in English.\nc2: von\ne2: \"Von\" also means \"from\" in English but is used differently than \"aus,\" often with people or in abstract contexts.\nc3: bei\ne3: \"Bei\" means \"at,\" \"near,\" or \"with\" in English, often referring to people or locations.\nc4: nach\ne4: \"Nach\" means \"to\" or \"towards\" in English, indicating direction or destination.\na: 1\nw: 3\nq: Complete the sentence with the correct preposition: \"Er wartet _____ seine Freundin\" (He is waiting for his girlfriend).\nc1: für\ne1: \"Für\" means \"for\" in English, but it is used to indicate purpose, benefit, or a recipient.\nc2: um\ne2: \"Um\" means \"around\" or \"at\" in English, often referring to time or location.\nc3: auf\ne3: Correct! \"Auf\" is used with the verb \"warten\" (to wait) to mean \"for\" in English.\nc4: zu\ne4: \"Zu\" is used to indicate movement towards a destination, such as \"to\" or \"towards\" in English.\na: 3\nw: 3\nq: Choose the correct preposition for the sentence \"Wir fahren _____ den Urlaub\" (We are going on vacation).\nc1: in\ne1: Correct! \"In\" is used with the accusative case to indicate a destination or a period of time, such as \"on\" vacation.\nc2: an\ne2: \"An\" is used to indicate proximity or contact, such as \"at,\" \"on,\" or \"by\" in English.\nc3: auf\ne3: \"Auf\" means \"on\" or \"onto\" in English, usually referring to a surface or a direction upwards.\nc4: zu\ne4: \"Zu\" is used to indicate movement towards a destination, such as \"to\" or \"towards\" in English.\na: 1\nw: 3",
        "input: Generate a quiz titled \"Cooking Vocabulary\" for Italian speakers learning English",
        "output: Quiz Title: Cooking Vocabulary\nDuration: 10\nPassing Score: 80\nq: What is the English word for \"friggere\" (to fry)?\nc1: Boil\ne1: \"Boil\" significa \"bollire\" in italiano, non \"friggere\".\nc2: Bake\ne2: \"Bake\" significa \"cuocere al forno\" in italiano, non \"friggere\".\nc3: Fry\ne3: Correct! \"Fry\" significa \"friggere\" in italiano.\nc4: Grill\ne4: \"Grill\" significa \"grigliare\" in italiano, non \"friggere\".\na: 3\nw: 2\nq: How do you say \"mescolare\" (to stir) in English?\nc1: Mix\ne1: \"Mix\" significa \"miscelare\" o \"mescolare\" in italiano, ma è meno specifico di \"stir\".\nc2: Blend\ne2: \"Blend\" significa \"frullare\" o \"mescolare\" in italiano, di solito riferendosi a ingredienti liquidi o morbidi.\nc3: Stir\ne3: Correct! \"Stir\" significa \"mescolare\" in italiano.\nc4: Beat\ne4: \"Beat\" significa \"sbattere\" in italiano, non \"mescolare\".\na: 3\nw: 2\nq: What is the English translation for \"pentola\" (pot)?\nc1: Pan\ne1: \"Pan\" significa \"padella\" o \"tegame\" in italiano, non \"pentola\".\nc2: Pot\ne2: Correct! \"Pot\" significa \"pentola\" in italiano.\nc3: Kettle\ne3: \"Kettle\" significa \"bollitore\" in italiano, utilizzato per riscaldare l'acqua, non per cucinare.\nc4: Bowl\ne4: \"Bowl\" significa \"ciotola\" in italiano, non \"pentola\".\na: 2\nw: 3\nq: Translate \"affettare\" (to slice) to English.\nc1: Cut\ne1: \"Cut\" significa \"tagliare\" in italiano, che è più generico di \"affettare\".\nc2: Chop\ne2: \"Chop\" significa \"tritare\" o \"sminuzzare\" in italiano, non \"affettare\".\nc3: Slice\ne3: Correct! \"Slice\" significa \"affettare\" in italiano.\nc4: Dice\ne4: \"Dice\" significa \"tagliare a dadini\" in italiano, non \"affettare\".\na: 3\nw: 2\nq: How would you say \"grattugiare\" (to grate) in English?\nc1: Grind\ne1: \"Grind\" significa \"macinare\" in italiano, non \"grattugiare\".\nc2: Shred\ne2: \"Shred\" significa \"sminuzzare\" o \"grattugiare\" in italiano, ma di solito si riferisce a ingredienti come il formaggio o il cavolo.\nc3: Mince\ne3: \"Mince\" significa \"tritare finemente\" in italiano, non \"grattugiare\".\nc4: Grate\ne4: Correct! \"Grate\" significa \"grattugiare\" in italiano.\na: 4\nw: 2",
        f"input: Generate a quiz titled \"{request.data['title']}\" for {home_language} speakers learning {request.data['language']}.",
        "output: ",
        ]

        response = model.generate_content(prompt_parts)

        generated_text = response.text.strip()

        quiz_data = self.parse_generated_questions(generated_text)
        
        quiz = Quiz.objects.create(
            user=self.request.user,
            title=quiz_data.get("title"),
            duration=quiz_data.get("duration"),
            passing_score=quiz_data.get("passing_score"),
            language_id=request.data["language"],
        )
        quiz.save()

        questions_data = quiz_data.get("questions", [])
        for question_data in questions_data:
            serializer = QuestionSerializer(data=question_data)
            serializer.is_valid(raise_exception=True)
            question = serializer.save(quiz=quiz)

        quiz_serializer = QuizSerializer(quiz)
        return Response(quiz_serializer.data, status=status.HTTP_201_CREATED)

    def parse_generated_questions(self, text):
        questions_data = []
        lines = text.split("\n")
        title = ""
        duration = 0
        passing_score = 0
        question_data = {}
        for line in lines:
            if line.startswith("Quiz Title:"):
                title = line.split(":")[1].strip()
            elif line.startswith("Duration:"):
                duration = int(line.split(":")[1].strip())
            elif line.startswith("Passing Score:"):
                passing_score = int(line.split(":")[1].strip())
            elif line.startswith("q:"):
                if question_data:
                    questions_data.append(question_data)
                question_data = {"text": line.split(":")[1].strip(), "choices": [], "explanations": [], "worth": 1}
            elif line.startswith("c"):
                question_data["choices"].append(line.split(":")[1].strip())
            elif line.startswith("e"):
                question_data["explanations"].append(line.split(":")[1].strip())
            elif line.startswith("a:"):
                question_data["answer"] = int(line.split(":")[1].strip())
            elif line.startswith("w:"):
                question_data["worth"] = int(line.split(":")[1].strip())

        if question_data:
            questions_data.append(question_data)

        return {
            "title": title,
            "duration": duration,
            "passing_score": passing_score,
            "questions": questions_data,
        }
        
class QuizListCreateView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class QuizRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer

class QuizQuestionsView(generics.ListAPIView):
    serializer_class = QuestionSerializer

    def get_queryset(self):
        quiz_id = self.kwargs["quiz_id"]
        return Question.objects.filter(quiz_id=quiz_id)

class QuizAttemptView(generics.CreateAPIView):
    serializer_class = AttemptSerializer
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        quiz_id = request.data.get("quiz")
        user_answers = request.data.get("user_answers")

        quiz = Quiz.objects.get(id=quiz_id)
        user = request.user

        total_score = 0
        max_score = 0

        for question_id, user_answer in user_answers.items():
            question = Question.objects.get(id=question_id)
            max_score += question.worth
            if question.answer == user_answer:
                total_score += question.worth

        score = (total_score / max_score) * 100
        attempt = Attempt.objects.create(user=user, quiz=quiz, score=score)
        serializer = self.get_serializer(attempt)

        topic_scores = {}
        for question in quiz.question_set.all():
            if question.answer == user_answers.get(str(question.id)):
                topic_scores[question.text] = question.worth

        user_analytics, _ = UserAnalytics.objects.get_or_create(user=user)
        user_analytics.update_quiz_analytics(quiz.language, score, topic_scores)

        return Response(serializer.data, status=status.HTTP_201_CREATED)

### /workspaces/aiLingo/backend/aiLingo/quizzes/urls.py ###
from django.urls import path
from .views import (
    QuizAttemptView,
    QuizListCreateView,
    QuizRetrieveUpdateDestroyView,
    CreateQuizView,
    QuizQuestionsView,
)

urlpatterns = [
    path("", QuizListCreateView.as_view(), name="quiz-list-create"),
    path(
        "<int:pk>/",
        QuizRetrieveUpdateDestroyView.as_view(),
        name="quiz-retrieve-update-destroy",
    ),

    path("create/", CreateQuizView.as_view(), name="create-quiz"),
    path(
        "<int:quiz_id>/questions/", QuizQuestionsView.as_view(), name="quiz-questions"
    ),
    path("attempt/", QuizAttemptView.as_view(), name="quiz-attempt"),
]


### /workspaces/aiLingo/backend/aiLingo/quizzes/apps.py ###
from django.apps import AppConfig


class QuizzesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "quizzes"



### /workspaces/aiLingo/backend/aiLingo/quizzes/serializers.py ###
from rest_framework import serializers
from .models import Question, Quiz, Attempt


class QuestionSerializer(serializers.ModelSerializer):
    #how to make quiz add after the rest is but pass the is_valid() test
    
    class Meta:
        model = Question
        fields = ["id", "quiz", "text", "choices", "answer", "explanations", "worth"]
        extra_kwargs = {
            "quiz": {"required": False},
        }

class QuizSerializer(serializers.ModelSerializer):
    questions = QuestionSerializer(many=True, read_only=True)

    class Meta:
        model = Quiz
        fields = ['id', 'language', 'title', 'duration', 'passing_score', 'questions']


class AttemptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attempt
        fields = ["id", "user", "quiz", "score", "date"]


### /workspaces/aiLingo/backend/aiLingo/quizzes/models.py ###
from django.db import models

# Create your models here.
from django.db import models
from users.models import User
from languages.models import Language

from django.db import models
from django.conf import settings


class Quiz(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, default=1
    )
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    duration = models.IntegerField()
    passing_score = models.IntegerField()

    def __str__(self):
        return self.title


class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    text = models.TextField()
    choices = models.JSONField()
    answer = models.IntegerField()
    explanations = models.JSONField(null=True, blank=True)
    worth = models.IntegerField(default=1)

    def __str__(self):
        return self.text[:50]


class Attempt(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.username} - {self.quiz.title} - {self.score}%"


### /workspaces/aiLingo/backend/aiLingo/quizzes/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/aiLingo/urls.py ###
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/users/", include("users.urls")),
    path("api/languages/", include("languages.urls")),
    path("api/quizzes/", include("quizzes.urls")),
    path("api/lessons/", include("lessons.urls")),
    path("api/analytics/", include("analytics.urls")),
    path("api/chat/", include("chat.urls")),
]


### /workspaces/aiLingo/backend/aiLingo/aiLingo/wsgi.py ###
"""
WSGI config for aiLingo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")

application = get_wsgi_application()


### /workspaces/aiLingo/backend/aiLingo/aiLingo/settings.py ###
"""
Django settings for aiLingo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url
load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")
ALLOWED_HOSTS = ["localhost", "127.0.0.1","ailingo.onrender.com"]


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
 
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0b3)jdf!ev5a)r4bloar5gpgdi5%7kvzdn)g2$bmdxs&ed$hwp"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "users",
    "lessons",
    "languages",
    "quizzes",
    "analytics",
    "chat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "aiLingo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aiLingo.wsgi.application"

CORS_ORIGIN_WHITELIST = ['https://ailingo-temp.vercel.app','http://localhost:3000']

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASE_URL = os.getenv("DATABASE_URL")
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
AUTH_USER_MODEL = "users.User"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
GOOGLE_GENERATIVE_AI_API_KEY = os.getenv("GOOGLE_GENERATIVE_AI_API_KEY")
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}


### /workspaces/aiLingo/backend/aiLingo/aiLingo/asgi.py ###
"""
ASGI config for aiLingo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")

application = get_asgi_application()


### /workspaces/aiLingo/backend/aiLingo/Procfile ###
web: gunicorn aiLingo.wsgi

### /workspaces/aiLingo/backend/aiLingo/analytics/admin.py ###
from django.contrib import admin

# Register your models here.


### /workspaces/aiLingo/backend/aiLingo/analytics/views.py ###
from rest_framework import generics
from .models import UserAnalytics
from .serializers import UserAnalyticsSerializer
from rest_framework.permissions import IsAuthenticated

class UserAnalyticsView(generics.RetrieveAPIView):
    serializer_class = UserAnalyticsSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        user = self.request.user
        obj, _ = UserAnalytics.objects.get_or_create(user=user)
        return obj

### /workspaces/aiLingo/backend/aiLingo/analytics/urls.py ###
from django.urls import path
from .views import UserAnalyticsView

urlpatterns = [
    path("user-analytics/", UserAnalyticsView.as_view(), name="analytics"),
]


### /workspaces/aiLingo/backend/aiLingo/analytics/apps.py ###
from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "analytics"


### /workspaces/aiLingo/backend/aiLingo/analytics/serializers.py ###
from rest_framework import serializers
from .models import UserAnalytics

class UserAnalyticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserAnalytics
        fields = ['user', 'language_progress', 'quiz_analytics', 'chat_analytics']

### /workspaces/aiLingo/backend/aiLingo/analytics/models.py ###
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class UserAnalytics(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    language_progress = models.JSONField(default=dict)
    quiz_analytics = models.JSONField(default=dict)
    chat_analytics = models.JSONField(default=dict)

    def update_quiz_analytics(self, language, score, topic_scores):
        if language.name not in self.quiz_analytics:
            self.quiz_analytics[language.name] = {
                'total_quizzes': 0,
                'total_score': 0,
                'topic_scores': {},
            }

        self.quiz_analytics[language.name]['total_quizzes'] += 1
        self.quiz_analytics[language.name]['total_score'] += score

        for topic, score in topic_scores.items():
            if topic not in self.quiz_analytics[language.name]['topic_scores']:
                self.quiz_analytics[language.name]['topic_scores'][topic] = 0
            self.quiz_analytics[language.name]['topic_scores'][topic] += score

        self.calculate_completion_percentage(language.name)
        self.save()

    def update_chat_analytics(self, language, chat_score, topic_scores):
        if language.name not in self.chat_analytics:
            self.chat_analytics[language.name] = {
                'total_chats': 0,
                'total_score': 0,
                'topic_scores': {},
            }

        self.chat_analytics[language.name]['total_chats'] += 1
        self.chat_analytics[language.name]['total_score'] += chat_score

        for topic, score in topic_scores.items():
            if topic not in self.chat_analytics[language.name]['topic_scores']:
                self.chat_analytics[language.name]['topic_scores'][topic] = 0
            self.chat_analytics[language.name]['topic_scores'][topic] += score

        self.calculate_completion_percentage(language.name)
        self.save()

    def calculate_completion_percentage(self, language_name):
        if language_name not in self.language_progress:
            self.language_progress[language_name] = {
                'total_quizzes': 0,
                'total_chats': 0,
                'total_score': 0,
                'completion_percentage': 0,
            }

        self.language_progress[language_name]['total_quizzes'] = self.quiz_analytics.get(language_name, {}).get('total_quizzes', 0)
        self.language_progress[language_name]['total_chats'] = self.chat_analytics.get(language_name, {}).get('total_chats', 0)
        self.language_progress[language_name]['total_score'] = (
            self.quiz_analytics.get(language_name, {}).get('total_score', 0) +
            self.chat_analytics.get(language_name, {}).get('total_score', 0)
        )

        total_activities = self.language_progress[language_name]['total_quizzes'] + self.language_progress[language_name]['total_chats']
        if total_activities > 0:
            self.language_progress[language_name]['completion_percentage'] = (
                self.language_progress[language_name]['total_score'] / total_activities
            )
        else:
            self.language_progress[language_name]['completion_percentage'] = 0

### /workspaces/aiLingo/backend/aiLingo/analytics/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/lessons/admin.py ###
from django.contrib import admin
from .models import Lesson


@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ("title", "language")
    list_filter = ("language",)
    search_fields = ("title", "content")


### /workspaces/aiLingo/backend/aiLingo/lessons/views.py ###
from rest_framework import generics
from .models import Lesson, UserLesson
from .serializers import LessonSerializer, UserLessonSerializer

# class LessonListCreateView(generics.ListCreateAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

# class LessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer


class UserLessonListCreateView(generics.ListCreateAPIView):
    serializer_class = UserLessonSerializer

    def get_queryset(self):
        return UserLesson.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class UserLessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = UserLesson.objects.all()
    serializer_class = UserLessonSerializer


### /workspaces/aiLingo/backend/aiLingo/lessons/urls.py ###
from django.urls import path
from .views import (
    # LessonListCreateView,
    # LessonRetrieveUpdateDestroyView,
    UserLessonListCreateView,
    UserLessonRetrieveUpdateDestroyView,
)

urlpatterns = [
    # path('lessons/', LessonListCreateView.as_view(), name='lesson-list-create'),
    # path('lessons/<int:pk>/', LessonRetrieveUpdateDestroyView.as_view(), name='lesson-retrieve-update-destroy'),
    path("", UserLessonListCreateView.as_view(), name="user-lesson-list-create"),
    path(
        "<int:pk>/",
        UserLessonRetrieveUpdateDestroyView.as_view(),
        name="user-lesson-retrieve-update-destroy",
    ),
]


### /workspaces/aiLingo/backend/aiLingo/lessons/apps.py ###
from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "lessons"


### /workspaces/aiLingo/backend/aiLingo/lessons/serializers.py ###
from rest_framework import serializers
from .models import Lesson, UserLesson


class LessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Lesson
        fields = ["id", "language", "title", "content"]


class UserLessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLesson
        fields = ["id", "user", "lesson", "completed"]


### /workspaces/aiLingo/backend/aiLingo/lessons/models.py ###
from django.db import models
from users.models import User
from languages.models import Language


class Lesson(models.Model):
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title


class UserLesson(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    # Add any additional fields related to user's progress or interaction with the lesson


### /workspaces/aiLingo/backend/aiLingo/lessons/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/railway.json ###
{
    "$schema": "https://railway.app/railway.schema.json",
    "build": {
        "builder": "NIXPACKS"
    },
    "deploy": {
        "startCommand": "python manage.py makemigrations && python manage.py migrate  && gunicorn aiLingo.wsgi",
        "restartPolicyType": "ON_FAILURE",
        "restartPolicyMaxRetries": 10
    }
}

### /workspaces/aiLingo/backend/aiLingo/languages/admin.py ###
from django.contrib import admin
from .models import Language


@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ("name", "code")
    search_fields = ("name",)


### /workspaces/aiLingo/backend/aiLingo/languages/views.py ###
from rest_framework import generics
from .models import Language
from .serializers import LanguageSerializer
from rest_framework.permissions import IsAdminUser
from rest_framework.response import Response


class LanguageListCreateView(generics.ListCreateAPIView):
    permission_classes = []
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer


class LanguageRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer



    




### /workspaces/aiLingo/backend/aiLingo/languages/urls.py ###
from django.urls import path
from .views import (
    LanguageListCreateView,
    LanguageRetrieveUpdateDestroyView,
)

urlpatterns = [
    path("", LanguageListCreateView.as_view(), name="language-list"),
    path(
        "<int:pk>/",
        LanguageRetrieveUpdateDestroyView.as_view(),
        name="language-retrieve-update-destroy",
    ),
]


### /workspaces/aiLingo/backend/aiLingo/languages/apps.py ###
from django.apps import AppConfig


class LanguagesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "languages"


### /workspaces/aiLingo/backend/aiLingo/languages/serializers.py ###
from rest_framework import serializers
from .models import Language


class LanguageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Language
        fields = ["id", "name", "code"]


### /workspaces/aiLingo/backend/aiLingo/languages/models.py ###
from django.db import models

# Create your models here.
from django.db import models


class Language(models.Model):
    code = models.CharField(max_length=10)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


### /workspaces/aiLingo/backend/aiLingo/languages/tests.py ###
from django.test import TestCase

# Create your tests here.


### /workspaces/aiLingo/backend/aiLingo/manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


### /workspaces/aiLingo/backend/test/example.py ###
from flask import Flask, jsonify

"""
GET /languages: Get a list of all languages
GET /languages/<int:language_id>: Get details of a specific language
GET /languages/<int:language_id>/lessons: Get a list of lessons for a specific language
GET /lessons/<int:lesson_id>: Get details of a specific lesson
GET /languages/<int:language_id>/quizzes: Get a list of quizzes for a specific language
GET /quizzes/<int:quiz_id>: Get details of a specific quiz, including its questions

to run:
make a venv (python -m venv .venv)
activate the venv (source .venv/Scripts/activate for windows, source .venv/bin/activate for mac)
pip install flask
flask -app example.py

"""
app = Flask(__name__)
from flask_cors import CORS

CORS(app)
# Languages Models
languages = [
    {"id": 1, "name": "English", "code": "en"},
    {"id": 2, "name": "Spanish", "code": "es"},
    {"id": 3, "name": "French", "code": "fr"},
]

lessons = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Basics",
        "content": "This is the content for the English Grammar Basics lesson.",
        "tags": ["beginner", "english", "grammar"],
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary",
        "content": "This is the content for the Spanish Vocabulary lesson.",
        "tags": ["beginner", "spanish", "vocabulary"],
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation",
        "content": "This is the content for the French Pronunciation lesson.",
        "tags": ["intermediate", "french", "pronunciation"],
    },
]

quizzes = [
    {
        "id": 1,
        "language": 1,
        "title": "English Grammar Quiz",
        "questions": [1, 2],
        "duration": 30,
        "passing_score": 80,
    },
    {
        "id": 2,
        "language": 2,
        "title": "Spanish Vocabulary Quiz",
        "questions": [3, 4],
        "duration": 45,
        "passing_score": 75,
    },
    {
        "id": 3,
        "language": 3,
        "title": "French Pronunciation Quiz",
        "questions": [5, 6],
        "duration": 20,
        "passing_score": 70,
    },
]

questions = [
    {
        "id": 1,
        "text": "What is the correct way to use the verb 'to be' in the present tense?",
        "choices": ["I is", "I am", "I are", "I be"],
        "answer": 1,
    },
    {
        "id": 2,
        "text": "What is the plural form of 'child'?",
        "choices": ["childs", "childrens", "children", "childres"],
        "answer": 2,
    },
    {
        "id": 3,
        "text": "What is the Spanish word for 'book'?",
        "choices": ["libro", "papel", "cuaderno", "lapiz"],
        "answer": 0,
    },
    {
        "id": 4,
        "text": "How do you say 'Hello' in Spanish?",
        "choices": ["Hola", "Adios", "Gracias", "Buenos dias"],
        "answer": 0,
    },
    {
        "id": 5,
        "text": "How is the word 'bonjour' pronounced in French?",
        "choices": ["bon-jour", "bon-zhoor", "bon-joor", "bon-jure"],
        "answer": 1,
    },
    {
        "id": 6,
        "text": "What is the correct pronunciation of the French word 'merci'?",
        "choices": ["mer-see", "mer-see", "mer-chi", "mer-key"],
        "answer": 1,
    },
]


# Routes
@app.route("/languages", methods=["GET"])
def get_languages():
    return jsonify(languages)


@app.route("/languages/<int:language_id>", methods=["GET"])
def get_language(language_id):
    language = next((l for l in languages if l["id"] == language_id), None)
    if language:
        return jsonify(language)
    else:
        return jsonify({"error": "Language not found"}), 404


@app.route("/languages/<int:language_id>/lessons", methods=["GET"])
def get_language_lessons(language_id):
    lessons_for_language = [l for l in lessons if l["language"] == language_id]
    if lessons_for_language:
        return jsonify(lessons_for_language)
    else:
        return jsonify({"error": "No lessons found for this language"}), 404


@app.route("/lessons/<int:lesson_id>", methods=["GET"])
def get_lesson(lesson_id):
    lesson = next((l for l in lessons if l["id"] == lesson_id), None)
    if lesson:
        return jsonify(lesson)
    else:
        return jsonify({"error": "Lesson not found"}), 404


@app.route("/languages/<int:language_id>/quizzes", methods=["GET"])
def get_language_quizzes(language_id):
    quizzes_for_language = [q for q in quizzes if q["language"] == language_id]
    if quizzes_for_language:
        return jsonify(quizzes_for_language)
    else:
        return jsonify({"error": "No quizzes found for this language"}), 404


@app.route("/quizzes/<int:quiz_id>", methods=["GET"])
def get_quiz(quiz_id):
    quiz = next((q for q in quizzes if q["id"] == quiz_id), None)
    if quiz:
        quiz_questions = [q for q in questions if q["id"] in quiz["questions"]]
        quiz["questions"] = quiz_questions
        return jsonify(quiz)
    else:
        return jsonify({"error": "Quiz not found"}), 404


if __name__ == "__main__":
    app.run(debug=True)


### /workspaces/aiLingo/backend/test/requirments.txt ###
django==4.2.11
djangorestframework
pyyaml
requests
django-cors-headers

### /workspaces/aiLingo/backend/test/cfehome/urls.py ###
"""
URL configuration for cfehome project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/',include('api.urls')),
    path('api/products/',include('products.urls')),
    path('api/v2/',include('cfehome.routers')),
]


### /workspaces/aiLingo/backend/test/cfehome/wsgi.py ###
"""
WSGI config for cfehome project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_wsgi_application()


### /workspaces/aiLingo/backend/test/cfehome/settings.py ###
"""
Django settings for cfehome project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o32l^k3%9ztw*2%11alx3ziu!4^66xouwc39v!_b@fby_&j%s_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'api',
    'products',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cfehome.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cfehome.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'api.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


### /workspaces/aiLingo/backend/test/cfehome/routers.py ###
#Normally would go to urls.py
from rest_framework.routers import DefaultRouter
from products.viewsets import ProductViewSet, ProductGenericViewSet

router = DefaultRouter()
router.register('products-abc', ProductGenericViewSet, basename='products')

urlpatterns = router.urls

### /workspaces/aiLingo/backend/test/cfehome/asgi.py ###
"""
ASGI config for cfehome project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cfehome.settings')

application = get_asgi_application()


### /workspaces/aiLingo/backend/test/api/authentication.py ###
from rest_framework.authentication import TokenAuthentication as BaseTokenAuthentication
class TokenAuthentication(BaseTokenAuthentication):
    keyword = 'Bearer'

    

### /workspaces/aiLingo/backend/test/api/admin.py ###
from django.contrib import admin
# Register your models here.


### /workspaces/aiLingo/backend/test/api/views.py ###
from django.http import JsonResponse
from products.serializers import ProductSerializer
from products.models import Product
from rest_framework.response import Response
from rest_framework.decorators import api_view
# Create your views here.

@api_view(["POST"])
def api_home(request, *args, **kwargs):
    serializer = ProductSerializer(data=request.data)
    if serializer.is_valid(raise_exception=True):
        # data = serializer.save()
        return Response(serializer.data)

### /workspaces/aiLingo/backend/test/api/urls.py ###
from django.urls import path
from rest_framework.authtoken.views import obtain_auth_token
from . import views

urlpatterns = [
    path('auth/', obtain_auth_token,name="auth"),
    path('',views.api_home,name="home")
]


### /workspaces/aiLingo/backend/test/api/mixins.py ###
from rest_framework import permissions
from .permissions import IsStaffEditorPermission    

class StaffEditorPermissionMixIn():
    permission_classes = [permissions.IsAdminUser, IsStaffEditorPermission]

### /workspaces/aiLingo/backend/test/api/apps.py ###
from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'


### /workspaces/aiLingo/backend/test/api/models.py ###
from django.db import models

# Create your models here.


### /workspaces/aiLingo/backend/test/api/tests.py ###
from django.test import TestCase
from django.urls import reverse
from products.models import Product
# Create your tests here.

class BasicTest(TestCase):
    @classmethod
    def setUpTestData(cls) -> None:
        Product.objects.create(title="ti")
    # def test_url_exist(self):
    #     url = reverse("home")
    #     self.assertEqual(self.client.get(url).status_code,200)
    #     print(self.client.get(url).content)

### /workspaces/aiLingo/backend/test/api/permissions.py ###
from rest_framework import permissions

class IsStaffEditorPermission(permissions.DjangoModelPermissions):
    perms_map = {
        'GET': ['%(app_label)s.view_%(model_name)s'],
        'OPTIONS': [],
        'HEAD': [],
        'POST': ['%(app_label)s.add_%(model_name)s'],
        'PUT': ['%(app_label)s.change_%(model_name)s'],
        'PATCH': ['%(app_label)s.change_%(model_name)s'],
        'DELETE': ['%(app_label)s.delete_%(model_name)s'],
    }
    # def has_permission(self, request, view):
    #     if not request.user.is_staff:
    #         return False
    #     return super().has_permission(request, view)
    # def has_permission(self, request, view):
    #     user = request.user
    #     if user.is_staff:
    #         if(user.has_perm("products.view_product")):
    #             return True
    #         if(user.has_perm("products.change_product")):
    #             return True
    #         if(user.has_perm("products.add_product")):
    #             return True
    #         if(user.has_perm("products.delete_product")):
    #             return True
    #     return False


### /workspaces/aiLingo/backend/test/products/admin.py ###
from django.contrib import admin
from .models import Product

# Register your models here.

admin.site.register(Product)

### /workspaces/aiLingo/backend/test/products/views.py ###
from rest_framework import generics, mixins, permissions, authentication
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Product
from django.shortcuts import get_object_or_404
from api.authentication import TokenAuthentication
from .serializers import ProductSerializer
from api.mixins import StaffEditorPermissionMixIn

class ProductMixinView(StaffEditorPermissionMixIn, generics.GenericAPIView, mixins.ListModelMixin, mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    

    def get(self, request, *args, **kwargs):
        if kwargs.get('pk'):
            return self.retrieve(request, *args, **kwargs)
        return self.list(request, *args, **kwargs)
    
    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)
    


class ProductDetailApiView(StaffEditorPermissionMixIn, generics.RetrieveAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductListCreateApiView(StaffEditorPermissionMixIn, generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    #Set which fields to be used for creating the new model
    def perform_create(self, serializer):
        # serializer.save(user=self.request.user)
        title = serializer.validated_data.get('title')
        content = serializer.validated_data.get('content') or None
        if content is None:
            content=title
        serializer.save(content=content)

class ProductListApiView(StaffEditorPermissionMixIn, generics.ListAPIView):
    #Going to use ListCreateAPIView instead of ListAPIView.

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

class ProductUpdateApiView(StaffEditorPermissionMixIn,generics.UpdateAPIView):

    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def perform_update(self, serializer):
        instance = serializer.save()
        if not instance.content:
            instance.content = instance.title
            instance.save()

class ProductDeleteApiView(StaffEditorPermissionMixIn,generics.DestroyAPIView):
    
    queryset = Product.objects.all()
    serializer_class = ProductSerializer


@api_view(['GET', 'POST'])

def product_alt_view(request, pk=None, *args, **kwargs):
    if request.method == 'GET':
        if pk is not None:
            product = get_object_or_404(Product, pk=pk)
            data = ProductSerializer(product).data
            return Response(data)
        
        products = Product.objects.all()
        data = ProductSerializer(products, many=True).data
        return Response(data)
    elif request.method == 'POST':
        serializer = ProductSerializer(data=request.data)
        if serializer.is_valid():
            title = serializer.validated_data.get('title')
            content = serializer.validated_data.get('content') or None
            if content is None:
                content=title
            serializer.save(content=content)
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)

### /workspaces/aiLingo/backend/test/products/urls.py ###
from django.urls import path
from . import views

urlpatterns = [
    path("", views.ProductListCreateApiView.as_view(), name="product-create-list"),
    path("<int:pk>/update/", views.ProductUpdateApiView.as_view(), name="product-detail"),
    path("<int:pk>/delete/", views.ProductDeleteApiView.as_view(), name="product-detail"),
    path("<int:pk>", views.ProductDetailApiView.as_view(), name="product-detail"),
]

### /workspaces/aiLingo/backend/test/products/viewsets.py ###
#Normally goes into views.py
from rest_framework import mixins, viewsets

from .models import Product
from .serializers import ProductSerializer

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

class ProductGenericViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.RetrieveModelMixin):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    lookup_field = 'pk'

### /workspaces/aiLingo/backend/test/products/apps.py ###
from django.apps import AppConfig


class ProductsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'products'


### /workspaces/aiLingo/backend/test/products/serializers.py ###
from rest_framework import serializers

from .models import Product

class ProductSerializer(serializers.ModelSerializer):
    my_discount = serializers.SerializerMethodField(read_only=True)
    class Meta:
        model = Product
        fields = ['pk','title', 'content', 'price', 'sale_price','my_discount']
    
    def get_my_discount(self, obj):
        if not hasattr(obj,'id'):
            return None
        if not isinstance(obj, Product):
            return None
        return obj.get_discount_price()


### /workspaces/aiLingo/backend/test/products/models.py ###
from django.db import models

# Create your models here.
class Product(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True,null=True)
    price = models.DecimalField(max_digits=15, decimal_places=2,default=99.99)

    @property
    def sale_price(self):
        return f"{float(self.price) * 0.9:.2f}"
    
    def get_discount_price(self):
        return f"{float(self.price) * 0.8:.2f}"


### /workspaces/aiLingo/backend/test/products/tests.py ###
from django.test import RequestFactory, TestCase
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from .models import Product
# Create your tests here.


class TestProductApi(APITestCase):
    def setUp(self):
        self.factory = RequestFactory()
        Product.objects.create(title="First Product", content="First Content", price=100)
    def test_product_detail(self):
        url = reverse("product-detail", args=[1])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_product_detail_404(self):
        url = reverse("product-detail", args=[1000])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)


### /workspaces/aiLingo/backend/test/manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cfehome.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


### /workspaces/aiLingo/backend/proposal.txt ###
Proposal
Information0: Jiaying Zhu; 240465419; Junior; I have experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.

Information1: Benjamin Goihman; 204658306; Junior; I have experience in Java and Python, Java since 7th grade and Python since 9th. I have basic familiarity with Django, Flask and Fast API for Python and for Java I have some experience with Spring Boot.

Information2: Catherine Wijaya; 233190933; Junior; I have experience in coding with HTML, CSS since 9th grade, Python since 10th grade, and am currently learning Java.

Information3: Andrew Choi; 233508464; Junior; I have some experience with HTML, CSS, and Python since 10th grade, and am currently learning Java.
aiLingo
Proposal: Language Learning Platform with AI Tutoring
Introduction:
aiLingo is an AI-driven language learning platform that provides users with customized lessons, instant feedback, and cultural immersion for learners of all proficiency levels. This program aims to counter traditional language education by embracing a more personalized experience, along with interactive and engaging lessons, allowing users to reach their linguistic potential. To generate income, the program will have an optional paid premium membership allowing access to better AI models and extra features without diminishing the quality and user experience.
Objectives:
Create an AI-driven platform that offers multiple languages and caters to language learners across all proficiency levels.
Leverage AI to provide real-time feedback on pronunciation, grammar, and vocabulary usage.
Foster cultural immersion experiences and community interaction for enhanced language learning.
Outline:
Platform:
An interactive and user-friendly website that works on both mobile and desktop.
Various learning materials, such as lessons, quizzes, and cultural immersion for each language offered.
A sharing feature for users to post their learning process and achievements to social media.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.


AI Tutoring:
Use Google Makersuite and Gemini, to create specialized and trained responses to questions, and generate helpful responses that lead the user to better understanding.


Content Creation:
Present interactive exercises, live sessions with native speakers, and opportunities for language exchange within the platform’s community.


Monetization potential:
In the future create extra features such as video creation that only premium can use.
When Gemini Ultra comes, an optional upgrade for premium users.
Expected Outcomes:
An interactive and AI-driven language learning platform offering a diverse range of languages and catering to various proficiency levels.
Positive user feedback indicating increased engagement, improved language skills, and satisfaction with the platform’s features.
A growing user base and community engagement within the platform, fostering language learning and cultural exchange.
Conclusion:
The development of aiLingo aligns with the growing demand for effective and personalized language learning solutions. It aims to provide a comprehensive and engaging experience for language learners across all proficiency levels while utilizing technology to maximize learning outcomes.

Meeting #1
determine necessary features/deliverables

Have rough draft, bullet list of features by next meetings, assign priorities
P0 - need
P1 - nice
P2 - prob not going to happen but hope
google ai studio
Delegate tasks, probably find someone to manage ppl.
Use python for the AI.
Use flask or django more for backend.
Probably react/angular for the front end.
Meetings fri 5:30pm.
What is interesting to everyone individually, what do you want to take out of it?
Open questions:
Where to make designs for our ui?



Concrete Outline:
Timeline - work backwards, set deadlines, weekly increments. 
Clear Technical Design - React folder structure, breakdown features and modules. 
P0:
An interactive website that contains at least one language with lessons and quizzes, through the AI
UI, that connects to multiple api calls.
Split this up into sections like how the chat section will work, the dash board etc. 
Basically, call backend API for data then display.
An AI tutor
You can ask them to quiz you on a language. Teach you grammar lessons.
Practice specific grammar with specific vocab. 
Keep track of mastery of a topic. And what has been covered.
All chats go through api to the backend then that goes to google api for getting the info. Return the data at once. In database store that text as a list. Then make another call so django process last chat and update dashboard.
Diagnostic test - generated by AI syllabus based on it.
Special end point which generates test that then the other AI endpoints work with.
Dashboard with analytics
Django api end point, two options either always update dashboard so quicker when you request but each chat is more heavy on server or only update dashboard when request. 
User authentication (:
Key: email and password, + forgot password OR just social media log in. Then attempt to allow both types of login.
Custom user model for future upgradeability.
Probably use JWT to keep track of login.
P1:
Use OCR/AI, to take images as input and critique you on your homework answers.
Peer-to-peer chat platform that enables users to engage in conversations with both friends and strangers, enhancing language learning of their preferred language.
Sub type where you speak with someone fluent in the language you're learning and you are fluent in the language they are learning.
In those messages also add AI made translation if, what is said by user is unclear
Add filters 
Cultural Immersion
A sharing feature for users to post their learning process and achievements to social media.
Multiple languages
Extra features:
Use AI image generation, mainly for vocab. 
Takes voice input.
P2: 
Live sessions with native speakers, and opportunities for language exchange within the platform’s community.
Monetized videos

https://makersuite.google.com/app/
Django documentation goes with Django REST framework
React, probably can't get away with just doing this,React Foundations | Next.js  then learn more about nextjs and Next.js 
For learning order:
Backend:
First find a video on basic django, but like this is the core so make sure its comprehensive.
Then learn about the django rest framework, it just uses django views in a different way.
OR: watch like a mega tutorial that does both:
Build a Django REST API with the Django Rest Framework. Complete Tutorial.

Front end:
HTML - honestly probably fine dont even bother
CSS - KEY, if not it will look hideous really spend time I’m doing this CSS Crash Course for Beginners
Only then go to NextJs tutorial. 
Learn Next.js | Next.js by Vercel - The React Framework MAKE SURE to go through react foundations. Should also probably skim mozilla js for the js syntax.
Split up:
Options:
2 front end 2 back end
4 of us do it all
2 front and 1 back or 2 back and 1 front, then the other person learns all and helps both sides. Probably good but a lot of work the  person needs to learn both technologies, this or we all do everything.

Start with a broad description and then think of the product - 20%
How are you going to build it - design - 20%
Code it and test - 40%
20% - thin air
Work with https://makersuite.google.com/ test it out. 
Next Week:
Figure out spec including UI 
Begin design
Learn technologies
Prob React


Django Backend:
Name on the left is which app it is in
users Models:
User
id
email
name
profile_pic
date_joined
is_premium
UserLanguage
user
language
UserLesson
user
lesson
date_viewed
languages Models:
Language
id
name
code
Lesson
id
language
title
content
tags
Quiz
id
language
title
questions (M2M to Question)
duration
passing_score
Question
id
text
choices
answer
quizzes Models:
Attempt
user
quiz
score
date
analytics Models:
UserLesson (defined above)

For login with JWT, Google login and Email/password
he recommends typescript

Necessary components for the front end:
Homepage: A welcoming landing page that introduces the platform, highlights its key features, and encourages users to sign up or log in.
Language Selection: A section where users can choose the language they want to learn from the available options.
User Registration/Login: A registration and login interface for new and existing users to access the platform's features and track their progress.
Profile Dashboard: A personalized dashboard for each user to track their learning progress, view achievements, and access recommended lessons and activities.
Interactive Lessons: Interactive lessons tailored to users' proficiency levels, including exercises for vocabulary, grammar, pronunciation, and cultural immersion.
Quizzes and Assessments: Assessments and quizzes to evaluate users’ language skills and progress.
Community Features: Integration of social features such as user profiles, forums, and chat platforms for peer-to-peer interaction, language exchange, and sharing learning experiences.
AI Tutoring Integration: Integration of AI-driven tutoring features for providing real-time feedback on pronunciation, grammar, and vocabulary usage.
Content Sharing: A feature that allows users to share their learning progress, achievements, and experiences on social media platforms.
Responsive Design: A responsive and mobile-friendly design to ensure accessibility and usability across various devices and screen sizes.
Navigation Menu: Clear and intuitive navigation menus to help users easily find and access different sections of the platform.
Search Functionality: A search bar or filter options to help users quickly find specific lessons, topics, or resources.
Feedback Mechanism: A mechanism for users to provide feedback on lessons, features, and overall user experience, enabling continuous improvement.
Premium Membership Features: Integration of features exclusive to premium members, such as advanced AI models, extra lessons, and video creation tools.
Monetization Options: Implementation of mechanisms for monetization, such as premium membership subscriptions or optional upgrades for access to additional features.
Privacy and Security: Implementation of robust privacy and security measures to protect user data and ensure a safe learning environment.




### /workspaces/aiLingo/backend/run.ps1 ###
# Set the path to your desired directory
$directoryPath = "D:\aiLingo\backend\tempfront\ailingo-frontend"

# Run npm start with the specified directory path
Start-Job -ScriptBlock {
    npm start --prefix $using:directoryPath
}

# Activate the virtual environment
$venvPath = "D:\aiLingo\backend\.venv\Scripts\Activate.ps1"
& $venvPath

# Run the Django server
$pythonPath = "D:\aiLingo\backend\.venv\Scripts\python.exe"
$managePyPath = "D:\aiLingo\backend\aiLingo\manage.py"
& $pythonPath $managePyPath runserver

