### backend/aiLingo/requirements.txt ###
django==4.2.11
djangorestframework==3.15.1
google-generativeai
requests
python-dotenv
djangorestframework-simplejwt
Pillow
django-cors-headers
gunicorn
psycopg2-binary

### backend/aiLingo/.env ###
SECRET_KEY=4412421124142
DEBUG=True
ALLOWED_HOSTS=127.0.0.1
DB_NAME=defaultdb
DB_USER=avnadmin
DB_PASSWORD=AVNS_MBcXZmLbf6nQdl_HUBc
DB_HOST=pg-2251b571-ailingo.a.aivencloud.com
DB_PORT=17618
GOOGLE_GENERATIVE_AI_API_KEY=AIzaSyAycw0N3czwCu-m3B1ZQ6apwQLN8QLLwFU

### backend/aiLingo/manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


### backend/aiLingo/Procfile ###
web: gunicorn aiLingo.wsgi

### backend/aiLingo/railway.json ###
{
    "$schema": "https://railway.app/railway.schema.json",
    "build": {
        "builder": "NIXPACKS"
    },
    "deploy": {
        "startCommand": "python manage.py makemigrations && python manage.py migrate  && gunicorn aiLingo.wsgi",
        "restartPolicyType": "ON_FAILURE",
        "restartPolicyMaxRetries": 10
    }
}

### backend/aiLingo/chat/models.py ###
from django.conf import settings
from django.db import models

from languages.models import Language


class Conversation(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user} - {self.title}"

class Message(models.Model):
    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE)
    sender = models.CharField(max_length=50)  # 'user' or 'bot'
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.conversation} - {self.sender}: {self.content[:50]}"


### backend/aiLingo/chat/serializers.py ###
from rest_framework import serializers

from languages.models import Language
from .models import Conversation, Message
from languages.serializers import LanguageSerializer


class ConversationSerializer(serializers.ModelSerializer):
    language = LanguageSerializer(read_only=True)

    class Meta:
        model = Conversation
        fields = ["id", "language", "title", "created_at"]

    def create(self, validated_data):
        language_id = validated_data.pop("language_id")
        language = Language.objects.get(id=language_id)
        title = validated_data.pop("title")
        conversation = Conversation.objects.create(language=language, title=title, **validated_data)
        return conversation
class MessageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Message
        fields = ["id", "conversation", "sender", "content", "timestamp"]


### backend/aiLingo/chat/apps.py ###
from django.apps import AppConfig


class ChatConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "chat"


### backend/aiLingo/chat/admin.py ###
from django.contrib import admin

# Register your models here.


### backend/aiLingo/chat/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/chat/urls.py ###
from django.urls import path
from .views import ConversationListCreateView, MessageListCreateView

urlpatterns = [
    path(
        "conversations/",
        ConversationListCreateView.as_view(),
        name="conversation-list-create",
    ),
    path(
        "conversations/<int:conversation_id>/messages/",
        MessageListCreateView.as_view(),
        name="message-list-create",
    ),
]


### backend/aiLingo/chat/views.py ###
import json
from rest_framework import generics, status
from rest_framework.response import Response
from languages.models import Language
from quizzes.models import Quiz
from quizzes.serializers import QuestionSerializer
from .models import Conversation, Message
from .serializers import ConversationSerializer, MessageSerializer
from django.conf import settings
import google.generativeai as genai
from rest_framework.permissions import IsAuthenticated
from analytics.models import UserAnalytics

class ConversationListCreateView(generics.ListCreateAPIView):
    serializer_class = ConversationSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Conversation.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        language_id = self.request.data.get('language')
        title = self.request.data.get('title')
        serializer.save(user=self.request.user, language_id=language_id, title=title)

class MessageListCreateView(generics.ListCreateAPIView):
    serializer_class = MessageSerializer
    permission_classes = [IsAuthenticated]

    def parse_generated_questions(self, text):
        questions_data = []
        lines = text.split("\n")
        title = ""
        duration = 0
        passing_score = 0
        question_data = {}
        for line in lines:
            if line.startswith("Quiz Title:"):
                title = line.split(":")[1].strip()
            elif line.startswith("Duration:"):
                duration = int(line.split(":")[1].strip())
            elif line.startswith("Passing Score:"):
                passing_score_str = line.split(":")[1].strip()
                passing_score = int(passing_score_str)
            elif line.startswith("q:"):
                if question_data:
                    questions_data.append(question_data)
                    question_data = {}
                question_data["text"] = line.split(":")[1].strip()
                question_data["choices"] = []
                question_data["explanations"] = []
            elif line.startswith("c:"):
                question_data["choices"].append(line.split(":")[1].strip())
            elif line.startswith("e:"):
                question_data["explanations"].append(line.split(":")[1].strip())
            elif line.startswith("a:"):
                question_data["answer"] = int(line.split(":")[1].strip())
            elif line.startswith("w:"):
                question_data["worth"] = int(line.split(":")[1].strip())

        if question_data:
            questions_data.append(question_data)

        return {
            "title": title,
            "duration": duration,
            "passing_score": passing_score,
            "questions": questions_data,
        }

    def get_queryset(self):
        conversation_id = self.kwargs["conversation_id"]
        return Message.objects.filter(conversation_id=conversation_id)

    def create(self, request, *args, **kwargs):
        conversation_id = self.kwargs["conversation_id"]
        conversation = Conversation.objects.get(id=conversation_id)
        user_message = request.data["content"]

        user_message_serializer = MessageSerializer(
            data={
                "conversation": conversation_id,
                "sender": "user",
                "content": user_message,
            }
        )
        user_message_serializer.is_valid(raise_exception=True)
        user_message_serializer.save()

        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        generation_config = {
            "temperature": 0.9,
            "top_p": 1,
            "top_k": 1,
            "max_output_tokens": 2048,
        }

        safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE",
            },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", generation_config=generation_config, safety_settings=safety_settings)

        conversation_messages = Message.objects.filter(conversation=conversation).order_by("timestamp")
        conversation_history = "\n".join([f"{message.sender}: {message.content}" for message in conversation_messages])
        home_language = request.user.home_language.name if request.user.home_language else "English"
        learning_language = conversation.language.name
        prompt_parts = [
            "When the user submits a request, analyze the text to identify if it is asking for a quiz by detecting keywords such as \"quiz\", \"test\", \"questionnaire\",  \"exam\", or any other phrases or words that would make you think the user is asking for a quiz.\n\nIf quiz-related keywords are detected:\n- Append the tag ___QUIZ___ at the top of the response to indicate a quiz-based response.\n- Format the quiz response to include exactly five questions, and ensure each quiz contains the following elements:\n  - Quiz Title\n  - Duration: Time allocated for completing the quiz (in minutes).\n  - Passing Score: Minimum score required to pass (as an integer).\n  - Questions (q:) in the user's home language, each followed by:\n    - Choices (c:): 4 multiple-choice options for the answer in the target language.\n    - Correct Answer (a:): The index of the correct choice (0-based index), varying the position of the correct answer.\n    - Explanations (e:): Explanation for why the correct answer is right, in the user's home language.\n    - Worth (w:): Points awarded for each correct answer.\n\nIf no quiz-related keywords are detected or if you can not make a quiz from the requested text then you are to :\n- Respond to the user's request as a regular chat interaction, providing relevant information, answers, or engaging in conversation based on the user's input.\n\nWhen making a quiz, make sure to follow the exact format of the examples and use a variety of correct answer positions, not just the first choice.",
            "input: Quiz on Basic Vocabulary (User's Home Language: French, Learning: Italian)",
            "output: ___QUIZ___\nQuiz Title: Test de vocabulaire italien de base\nDuration: 15\nPassing Score: 80\nq: Comment dit-on \"livre\" en italien ?\nc: libro\nc: penna\nc: quaderno\nc: tavolo\ne: 'Libro' est le mot italien pour 'livre'.\na: 0\nw: 10\nq: Quel est le mot italien pour \"eau\" ?\nc: latte\nc: succo\nc: acqua\nc: vino\ne: 'Acqua' est la traduction correcte de 'eau' en italien.\na: 2\nw: 10\nq: Traduisez \"maison\" en italien.\nc: macchina\nc: casa\nc: cane\nc: finestra\ne: 'Casa' signifie 'maison' en italien.\na: 1\nw: 10\nq: Comment dit-on \"pomme\" en italien ?\nc: banana\nc: arancia\nc: mela\nc: fragola\ne: 'Mela' est le mot italien pour 'pomme'.\na: 2\nw: 10\nq: Quel est le mot italien pour \"chien\" ?\nc: gatto\nc: cavallo\nc: uccello\nc: cane\ne: 'Cane' est le mot italien pour 'chien'.\na: 3\nw: 10",
            "input: What is the weather like today? (User's Home Language: English, Learning: Spanish)",
            "output: The weather today is sunny and warm, with clear skies and a gentle breeze. It's a perfect day to spend some time outdoors and enjoy the nice weather. Remember to stay hydrated and protect your skin from the sun if you plan to be outside for an extended period. You can say \"Hace sol y calor\" to describe sunny and hot weather in Spanish.",
            "conversation_history " + conversation_history,
            f"input: {user_message} (User's Home Language: {home_language}, Learning: {learning_language})",
            "output: ",
        ]

        prompt = "\n".join(prompt_parts)

        response = model.generate_content(prompt)
        response_text = response.text  # Access the correct property for text content
        # response_text = response_text[response_text.find:]

        if "___QUIZ___" in response_text:
            quiz_data = self.parse_generated_questions(response_text[response_text.find("___QUIZ___") + 11:])
            quiz = Quiz.objects.create(
                language=conversation.language,
                user=request.user,
                title=quiz_data["title"],
                duration=quiz_data["duration"],
                passing_score=quiz_data["passing_score"],
            )
            questions_data = quiz_data["questions"]
            for question_data in questions_data:
                question_data["quiz"] = quiz.id
                serializer = QuestionSerializer(data=question_data)
                serializer.is_valid(raise_exception=True)
                serializer.save()

            quiz_url = f"/quizzes/{quiz.id}/"
            bot_response = f"Quiz created successfully! You can take the quiz by clicking on this link: [Take the Quiz]({quiz_url})"
        else:
            bot_response = response_text.replace("\n", "\\n")

        bot_message_serializer = MessageSerializer(
            data={
                "conversation": conversation_id,
                "sender": "bot",
                "content": bot_response,
            }
        )
        bot_message_serializer.is_valid(raise_exception=True)
        bot_message_serializer.save()

        return Response(bot_message_serializer.data, status=status.HTTP_201_CREATED)


### backend/aiLingo/chat/migrations/0002_conversation_title.py ###
# Generated by Django 4.2.11 on 2024-04-06 03:47

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='conversation',
            name='title',
            field=models.CharField(default='old', max_length=255),
            preserve_default=False,
        ),
    ]


### backend/aiLingo/chat/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-05 04:18

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("languages", "0003_delete_lesson"),
    ]

    operations = [
        migrations.CreateModel(
            name="Conversation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="languages.language",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sender", models.CharField(max_length=50)),
                ("content", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chat.conversation",
                    ),
                ),
            ],
        ),
    ]


### backend/aiLingo/languages/models.py ###
from django.db import models

# Create your models here.
from django.db import models


class Language(models.Model):
    code = models.CharField(max_length=10)
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


### backend/aiLingo/languages/serializers.py ###
from rest_framework import serializers
from .models import Language


class LanguageSerializer(serializers.ModelSerializer):
    class Meta:
        model = Language
        fields = ["id", "name", "code"]


### backend/aiLingo/languages/apps.py ###
from django.apps import AppConfig


class LanguagesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "languages"


### backend/aiLingo/languages/admin.py ###
from django.contrib import admin
from .models import Language


@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ("name", "code")
    search_fields = ("name",)


### backend/aiLingo/languages/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/languages/urls.py ###
from django.urls import path
from .views import (
    LanguageListCreateView,
    LanguageRetrieveUpdateDestroyView,
)

urlpatterns = [
    path("", LanguageListCreateView.as_view(), name="language-list"),
    path(
        "<int:pk>/",
        LanguageRetrieveUpdateDestroyView.as_view(),
        name="language-retrieve-update-destroy",
    ),
]


### backend/aiLingo/languages/views.py ###
from rest_framework import generics
from .models import Language
from .serializers import LanguageSerializer
from rest_framework.permissions import IsAdminUser
from rest_framework.response import Response


class LanguageListCreateView(generics.ListCreateAPIView):
    permission_classes = []
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer


class LanguageRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Language.objects.all()
    serializer_class = LanguageSerializer



    




### backend/aiLingo/languages/migrations/0003_delete_lesson.py ###
# Generated by Django 4.2.11 on 2024-04-04 00:41

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("languages", "0002_alter_language_code"),
    ]

    operations = [
        migrations.DeleteModel(
            name="Lesson",
        ),
    ]


### backend/aiLingo/languages/migrations/0002_alter_language_code.py ###
# Generated by Django 4.2.11 on 2024-04-02 23:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("languages", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="language",
            name="code",
            field=models.CharField(max_length=10),
        ),
    ]


### backend/aiLingo/languages/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-02 21:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("code", models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="languages.language",
                    ),
                ),
            ],
        ),
    ]


### backend/aiLingo/users/models.py ###
from django.contrib.auth.models import (
    AbstractBaseUser,
    BaseUserManager,
    PermissionsMixin,
)
from django.db import models
from languages.models import Language


class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email field must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, password, **extra_fields)


class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255)
    profile_pic = models.ImageField(upload_to="profile_pics", blank=True)
    date_joined = models.DateTimeField(auto_now_add=True)
    is_premium = models.BooleanField(default=False)
    home_language = models.ForeignKey(
        Language, on_delete=models.SET_NULL, null=True, blank=True
    )
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name"]

    objects = UserManager()

    def __str__(self):
        return self.email


### backend/aiLingo/users/serializers.py ###
from rest_framework import serializers

from .models import User


class UserSerializer(serializers.ModelSerializer):
    profile_pic = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = [
            "id",
            "email",
            "name",
            "profile_pic",
            "date_joined",
            "is_premium",
            "home_language",
        ]

    def get_profile_pic(self, obj):
        if obj.profile_pic:
            return self.context.get('request').build_absolute_uri(obj.profile_pic.url)
        return None


class UserRegistrationSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
            model = User
            fields = [
                "id",
                "email",
                "name",
                "profile_pic",
                "date_joined",
                "is_premium",
                "password",
                "home_language",
        ]

    def create(self, validated_data):
        password = validated_data.pop("password")
        home_language_id = validated_data.pop("home_language", None)
        user = User.objects.create(**validated_data)
        user.set_password(password)
        if home_language_id:
            user.home_language_id = home_language_id
        user.save()
        return user


### backend/aiLingo/users/apps.py ###
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "users"


### backend/aiLingo/users/admin.py ###
from django.contrib import admin
from .models import User

admin.site.register(User)


### backend/aiLingo/users/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/users/urls.py ###
from django.urls import path
from .views import RegisterView, LoginView, ProfileView, RefreshTokenView

urlpatterns = [
    path("register/", RegisterView.as_view(), name="register"),
    path("login/", LoginView.as_view(), name="login"),
    path("profile/", ProfileView.as_view(), name="profile"),
    path("refresh-token/", RefreshTokenView.as_view(), name="refresh_token"),
]


### backend/aiLingo/users/views.py ###
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import User
from .serializers import UserSerializer, UserRegistrationSerializer
from django.contrib.auth import authenticate
from rest_framework.permissions import IsAuthenticated
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework_simplejwt.exceptions import TokenError, InvalidToken


class RegisterView(APIView):
    permission_classes = []

    def post(self, request):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                    "user": UserSerializer(user).data,
                },
                status=status.HTTP_201_CREATED,
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LoginView(APIView):
    permission_classes = []

    def post(self, request):
        email = request.data.get("email")
        password = request.data.get("password")

        if not email or not password:
            return Response(
                {"error": "Please provide both email and password"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        user = authenticate(request, username=email, password=password)

        if user is not None:
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                    "user": UserSerializer(user).data,
                },
                status=status.HTTP_200_OK,
            )
        else:
            return Response(
                {"error": "Invalid credentials"}, status=status.HTTP_401_UNAUTHORIZED
            )


class ProfileView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        serializer = UserSerializer(user)
        data = serializer.data
        data["is_superuser"] = user.is_superuser
        return Response(data)
    def patch(self, request):
        user = request.user
        serializer = UserSerializer(user, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)



class RefreshTokenView(APIView):
    permission_classes = []

    def post(self, request):
        refresh_token = request.data.get("refresh")
        if refresh_token is None:
            return Response(
                {"error": "Refresh token is required"},
                status=status.HTTP_400_BAD_REQUEST,
            )

        try:
            refresh = RefreshToken(refresh_token)
            access_token = str(refresh.access_token)
            return Response({"access": access_token}, status=status.HTTP_200_OK)
        except (TokenError, InvalidToken):
            return Response(
                {"error": "Invalid refresh token"}, status=status.HTTP_401_UNAUTHORIZED
            )


### backend/aiLingo/users/migrations/0003_alter_user_options_alter_user_managers_and_more.py ###
# Generated by Django 4.2.11 on 2024-04-04 23:46

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0002_user_home_language"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="user",
            options={},
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[],
        ),
        migrations.RemoveField(
            model_name="user",
            name="first_name",
        ),
        migrations.RemoveField(
            model_name="user",
            name="last_name",
        ),
        migrations.RemoveField(
            model_name="user",
            name="username",
        ),
        migrations.AlterField(
            model_name="user",
            name="is_active",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="is_staff",
            field=models.BooleanField(default=False),
        ),
    ]


### backend/aiLingo/users/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-02 21:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "profile_pic",
                    models.ImageField(blank=True, upload_to="profile_pics"),
                ),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("is_premium", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]


### backend/aiLingo/users/migrations/0002_user_home_language.py ###
# Generated by Django 4.2.11 on 2024-04-04 20:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("languages", "0003_delete_lesson"),
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="user",
            name="home_language",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="languages.language",
            ),
        ),
    ]


### backend/aiLingo/lessons/models.py ###
from django.db import models
from users.models import User
from languages.models import Language


class Lesson(models.Model):
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    content = models.TextField()

    def __str__(self):
        return self.title


class UserLesson(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE)
    completed = models.BooleanField(default=False)
    # Add any additional fields related to user's progress or interaction with the lesson


### backend/aiLingo/lessons/serializers.py ###
from rest_framework import serializers
from .models import Lesson, UserLesson


class LessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = Lesson
        fields = ["id", "language", "title", "content"]


class UserLessonSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLesson
        fields = ["id", "user", "lesson", "completed"]


### backend/aiLingo/lessons/apps.py ###
from django.apps import AppConfig


class LessonsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "lessons"


### backend/aiLingo/lessons/admin.py ###
from django.contrib import admin
from .models import Lesson


@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = ("title", "language")
    list_filter = ("language",)
    search_fields = ("title", "content")


### backend/aiLingo/lessons/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/lessons/urls.py ###
from django.urls import path
from .views import (
    # LessonListCreateView,
    # LessonRetrieveUpdateDestroyView,
    UserLessonListCreateView,
    UserLessonRetrieveUpdateDestroyView,
)

urlpatterns = [
    # path('lessons/', LessonListCreateView.as_view(), name='lesson-list-create'),
    # path('lessons/<int:pk>/', LessonRetrieveUpdateDestroyView.as_view(), name='lesson-retrieve-update-destroy'),
    path("", UserLessonListCreateView.as_view(), name="user-lesson-list-create"),
    path(
        "<int:pk>/",
        UserLessonRetrieveUpdateDestroyView.as_view(),
        name="user-lesson-retrieve-update-destroy",
    ),
]


### backend/aiLingo/lessons/views.py ###
from rest_framework import generics
from .models import Lesson, UserLesson
from .serializers import LessonSerializer, UserLessonSerializer

# class LessonListCreateView(generics.ListCreateAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer

# class LessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
#     queryset = Lesson.objects.all()
#     serializer_class = LessonSerializer


class UserLessonListCreateView(generics.ListCreateAPIView):
    serializer_class = UserLessonSerializer

    def get_queryset(self):
        return UserLesson.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class UserLessonRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = UserLesson.objects.all()
    serializer_class = UserLessonSerializer


### backend/aiLingo/lessons/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-04 00:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("languages", "0003_delete_lesson"),
    ]

    operations = [
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="languages.language",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("completed", models.BooleanField(default=False)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="lessons.lesson"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


### backend/aiLingo/aiLingo/asgi.py ###
"""
ASGI config for aiLingo project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")

application = get_asgi_application()


### backend/aiLingo/aiLingo/settings.py ###
"""
Django settings for aiLingo project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")
ALLOWED_HOSTS = ["localhost", "127.0.0.1","ailingo.onrender.com",'bold-ardath-ailingo-8339d7ad.koyeb.app','.koyeb.app']


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
 
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-0b3)jdf!ev5a)r4bloar5gpgdi5%7kvzdn)g2$bmdxs&ed$hwp"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "users",
    "lessons",
    "languages",
    "quizzes",
    "analytics",
    "chat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "aiLingo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aiLingo.wsgi.application"

# CORS_ORIGIN_WHITELIST = ['https://glowing-palm-tree-xqp96ggp7xg264gw-3000.app.github.dev','https://ailingo-temp.vercel.app','http://localhost:3000', 'http://127.0.0.1:3000']
#Make cors every origin
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASE_URL = os.getenv("DATABASE_URL")
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "/static/"
AUTH_USER_MODEL = "users.User"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
GOOGLE_GENERATIVE_AI_API_KEY = os.getenv("GOOGLE_GENERATIVE_AI_API_KEY")
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}


### backend/aiLingo/aiLingo/urls.py ###
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path("admin/", admin.site.urls),
    path("api/users/", include("users.urls")),
    path("api/languages/", include("languages.urls")),
    path("api/quizzes/", include("quizzes.urls")),
    path("api/lessons/", include("lessons.urls")),
    path("api/analytics/", include("analytics.urls")),
    path("api/chat/", include("chat.urls")),
    
]


### backend/aiLingo/aiLingo/wsgi.py ###
"""
WSGI config for aiLingo project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "aiLingo.settings")

application = get_wsgi_application()


### backend/aiLingo/quizzes/models.py ###
from django.db import models

# Create your models here.
from django.db import models
from users.models import User
from languages.models import Language

from django.db import models
from django.conf import settings


class Quiz(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE, default=1
    )
    language = models.ForeignKey(Language, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    duration = models.IntegerField()
    passing_score = models.IntegerField()

    def __str__(self):
        return self.title


class Question(models.Model):
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    text = models.TextField()
    choices = models.JSONField()
    answer = models.IntegerField()
    explanations = models.JSONField(null=True, blank=True)
    worth = models.IntegerField(default=1)

    def __str__(self):
        return self.text[:50]


class Attempt(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)
    score = models.IntegerField()
    date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user.email} - {self.quiz.title} - {self.score}%"


### backend/aiLingo/quizzes/serializers.py ###
from rest_framework import serializers
from .models import Question, Quiz, Attempt


class QuestionSerializer(serializers.ModelSerializer):
    #how to make quiz add after the rest is but pass the is_valid() test
    
    class Meta:
        model = Question
        fields = ["id", "quiz", "text", "choices", "answer", "explanations", "worth"]
        extra_kwargs = {
            "quiz": {"required": False},
        }

class QuizSerializer(serializers.ModelSerializer):
    questions = QuestionSerializer(many=True, read_only=True)

    class Meta:
        model = Quiz
        fields = ['id', 'language', 'title', 'duration', 'passing_score', 'questions']


class AttemptSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attempt
        fields = ["id", "user", "quiz", "score", "date"]


### backend/aiLingo/quizzes/apps.py ###
from django.apps import AppConfig


class QuizzesConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "quizzes"



### backend/aiLingo/quizzes/admin.py ###
from django.contrib import admin
from .models import Quiz, Question, Attempt


@admin.register(Quiz)
class QuizAdmin(admin.ModelAdmin):
    list_display = ("title", "language", "duration", "passing_score")
    list_filter = ("language",)
    search_fields = ("title",)


@admin.register(Question)
class QuestionAdmin(admin.ModelAdmin):
    list_display = ("text", "quiz")
    list_filter = ("quiz",)
    search_fields = ("text",)


@admin.register(Attempt)
class AttemptAdmin(admin.ModelAdmin):
    list_display = ("user", "quiz", "score", "date")
    list_filter = ("quiz", "user")
    search_fields = ("user__username",)


### backend/aiLingo/quizzes/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/quizzes/urls.py ###
from django.urls import path
from .views import (
    QuizAttemptView,
    QuizListCreateView,
    QuizRetrieveUpdateDestroyView,
    CreateQuizView,
    QuizQuestionsView,
    recent_quizzes,
)

urlpatterns = [
    path("", QuizListCreateView.as_view(), name="quiz-list-create"),
    path(
        "<int:pk>/",
        QuizRetrieveUpdateDestroyView.as_view(),
        name="quiz-retrieve-update-destroy",
    ),

    path("create/", CreateQuizView.as_view(), name="create-quiz"),
    path(
        "<int:quiz_id>/questions/", QuizQuestionsView.as_view(), name="quiz-questions"
    ),
    path("attempt/", QuizAttemptView.as_view(), name="quiz-attempt"),
    path("recent/", recent_quizzes, name="recent-quizzes"),

]


### backend/aiLingo/quizzes/views.py ###
import re
from django.conf import settings
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from .models import Attempt, Question, Quiz
from .serializers import AttemptSerializer, QuestionSerializer, QuizSerializer
import google.generativeai as genai
from analytics.models import UserAnalytics
from languages.models import Language
from rest_framework.decorators import api_view
from rest_framework.response import Response

@api_view(['GET'])
def recent_quizzes(request):
    user = request.user
    recent_quizzes = Quiz.objects.filter(user=user).order_by('-id')[:3]
    serializer = QuizSerializer(recent_quizzes, many=True)
    return Response(serializer.data)
class CreateQuizView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        genai.configure(api_key=settings.GOOGLE_GENERATIVE_AI_API_KEY)

        home_language = request.user.home_language.name if request.user.home_language else "English"
        learning_language = Language.objects.get(id=request.data["language"]).name
        generation_config = {
        "temperature": 0.9,
        "top_p": 1,
        "top_k": 1,
        "max_output_tokens": 2048,
        }

        safety_settings = [
        {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
            "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
        },
        ]

        model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                                    generation_config=generation_config,
                                    safety_settings=safety_settings)


        prompt_parts = [
            "You are a language teacher responsible for creating quizzes to assess students' proficiency in various languages. You only respond using plaintext, you do not use markdown, bold, italics, lists, or anything else just plaintext. Your task is to generate a quiz with the following specifications:\n\n1. The quiz should have 5 multiple-choice questions with 4 answer choices each.\n2. The questions should focus on basic vocabulary and grammar concepts appropriate for beginners.\n3. Include the quiz title, duration in minutes, and the passing score as an integer.\n4. The questions should be in the user's home language, and the answer choices should be in the target language they are learning.\n5. For each question, provide an explanation for the correct answer in the user's home language.\n6. Specify the point value of each question as an integer.\n\nPlease provide the quiz in the following format:\n\nQuiz Title:",
            "input: Generate a quiz titled \"French Greetings\" for English speakers learning French.",
            "output: Quiz Title: French Greetings\nDuration: 10\nPassing Score: 80\nq: How do you say \"Hello\" in French?\nc: Bonjour\nc: Au revoir\nc: Merci\nc: Bonsoir\ne: \"Bonjour\" means \"Hello\" in French.\na: 0\nw: 2\nq: What is the French phrase for \"Good morning\"?\nc: Bonsoir\nc: Bon matin\nc: Bonjour\nc: Bonne nuit\ne: \"Bon matin\" means \"Good morning\" in French.\na: 1\nw: 2\nq: How do you say \"please\" in French?\nc: Merci\nc: S'il vous plaît\nc: Oui\nc: Non\ne: \"S'il vous plaît\" means \"Please\" in French.\na: 1\nw: 2\nq: What is the French translation of \"My name is...\"?\nc: Je m'appelle...\nc: Quel est votre nom?\nc: Comment allez-vous?\nc: Merci\ne: \"Je m'appelle...\" means \"My name is...\" in French.\na: 0\nw: 3\nq: How do you say \"Have a nice day\" in French?\nc: Bonne journée\nc: Bon appétit\nc: Au revoir\nc: Bien sûr\ne: \"Bonne journée\" means \"Have a nice day\" in French.\na: 0\nw: 3",
            "input: Generate a quiz titled \"Gli Articoli\" for English speakers learning Italian.",
            "output: Quiz Title: Gli Articoli\nDuration: 12\nPassing Score: 75\nq: What is the definite article for \"the book\" in Italian?\nc: il libro\nc: la penna\nc: i quaderni\nc: le tavole\ne: \"il\" is the definite article for masculine singular nouns like \"libro\".\na: 0\nw: 2\nq: What is the indefinite article for \"a pen\" in Italian?\nc: il libro\nc: un libro\nc: una penna\nc: dei libri\ne: \"una\" is the indefinite article for feminine singular nouns like \"penna\".\na: 2\nw: 2\nq: Which article should be used before the plural masculine noun \"students\"?\nc: il\nc: la\nc: i\nc: le\ne: \"i\" is the definite plural article for masculine nouns like \"studenti\".\na: 2\nw: 3\nq: What is the correct way to say \"the girls\" in Italian?\nc: i ragazze\nc: la ragazza\nc: le ragazze\nc: un ragazzo\ne: \"le\" is the definite plural article for feminine nouns like \"ragazze\".\na: 2\nw: 2\nq: How do you say \"a book\" in Italian?\nc: il libro\nc: un libro\nc: una libro\nc: i libri\ne: \"un\" is the indefinite masculine singular article used for \"libro\".\na: 1\nw: 3",
            "input: Generate a quiz titled \"Del español al alemán\" for Spanish speakers learning German.",
            "output: Quiz Title: Del español al alemán\nDuration: 20\nPassing Score: 75\nq: ¿Cómo se dice \"Hola\" en alemán?\nc: Tschüss\nc: Hallo\nc: Guten Tag\nc: Danke\ne: \"Hallo\" significa \"Hola\" en alemán.\na: 1\nw: 2\nq: ¿Cuál es la traducción al alemán de \"Gracias\"?\nc: Bitte\nc: Nein\nc: Danke\nc: Ja\ne: \"Danke\" significa \"Gracias\" en alemán.\na: 2\nw: 2\nq: ¿Cómo se diría \"El perro\" en alemán?\nc: Der Hund\nc: Die Katze\nc: Das Pferd\nc: Die Maus\ne: \"Der Hund\" significa \"El perro\" en alemán.\na: 0\nw: 3\nq: Traduce \"Comer\" al alemán.\nc: Trinken\nc: Essen\nc: Schlafen\nc: Lesen\ne: \"Essen\" significa \"Comer\" en alemán.\na: 1\nw: 3\nq: ¿Cómo se dice \"La casa\" en alemán?\nc: Das Haus\nc: Der Baum\nc: Die Blume\nc: Der Apfel\ne: \"Das Haus\" significa \"La casa\" en alemán.\na: 0\nw: 2",
            "input: Generate a quiz titled \"Vocabulario básico\" for beginner Spanish learners whose native language is English.",
            "output: Quiz Title: Vocabulario básico\nDuration: 10\nPassing Score: 70\nq: What is the Spanish word for \"hello\"?\nc: Adiós\nc: Hola\nc: Gracias\nc: Sí\ne: \"Hola\" means \"hello\" in Spanish.\na: 1\nw: 2\nq: How do you say \"water\" in Spanish?\nc: Leche\nc: Jugo\nc: Agua\nc: Vino\ne: \"Agua\" means \"water\" in Spanish.\na: 2\nw: 2\nq: What is the Spanish translation for \"book\"?\nc: Lápiz\nc: Libro\nc: Mochila\nc: Regla\ne: \"Libro\" means \"book\" in Spanish.\na: 1\nw: 3\nq: Translate \"apple\" to Spanish.\nc: Plátano\nc: Naranja\nc: Manzana\nc: Sandía\ne: \"Manzana\" means \"apple\" in Spanish.\na: 2\nw: 2\nq: How would you say \"house\" in Spanish?\nc: Carro\nc: Casa\nc: Perro\nc: Escuela\ne: \"Casa\" means \"house\" in Spanish.\na: 1\nw: 3",
            "input: Generate a quiz titled \"El Subjuntivo\" for English speakers learning Spanish.",
            "output: Quiz Title: El Subjuntivo\nDuration: 15\nPassing Score: 75\nq: Which verb form correctly completes the sentence \"I want you to come with me\" in Spanish?\nc: vienes\nc: vengas\nc: viniste\nc: vendrás\ne: \"vengas\" is the present subjunctive form, used for wishes, desires, or uncertainty.\na: 1\nw: 3\nq: Choose the correct subjunctive form of the verb \"ser\" (to be) in the sentence \"It's important that you be honest\" in Spanish.\nc: eres\nc: seas\nc: fuiste\nc: serás\ne: \"seas\" is the present subjunctive form of \"ser\", used for expressing importance or necessity.\na: 1\nw: 3\nq: Which sentence correctly uses the subjunctive mood in Spanish?\nc: Creo que ella es inteligente.\nc: Es posible que él venga mañana.\nc: Sé que ellos viven en Madrid.\nc: Estoy seguro de que aprobará el examen.\ne: The sentence \"Es posible que él venga mañana\" uses the subjunctive mood to express possibility or uncertainty.\na: 1\nw: 3\nq: Complete the sentence with the correct subjunctive form in Spanish: \"I hope the weather is good tomorrow\".\nc: hace\nc: haga\nc: hizo\nc: hará\ne: \"haga\" is the present subjunctive form of \"hacer\", used to express hopes or wishes.\na: 1\nw: 3\nq: Choose the correct verb form for the sentence \"I suggest that you exercise more\" in Spanish.\nc: haces\nc: hagas\nc: hiciste\nc: harás\ne: \"hagas\" is the present subjunctive form of \"hacer\", used for giving suggestions or advice.\na: 1\nw: 3",
            "input: Generate a quiz titled \"Präpositionen\" for English speakers learning German.",
            "output: Quiz Title: Präpositionen\nDuration: 12\nPassing Score: 80\nq: Which preposition correctly completes the sentence \"I'm going home\" in German?\nc: zu Hause\nc: auf Hause\nc: in Hause\nc: an Hause\ne: \"zu\" is used to indicate movement towards a destination, such as \"to\" or \"towards\" in English.\na: 0\nw: 3\nq: Choose the correct preposition for the sentence \"The book is lying on the table\" in German.\nc: in dem Tisch\nc: an dem Tisch\nc: auf dem Tisch\nc: über dem Tisch\ne: \"auf\" means \"on\" or \"onto\" in English, usually referring to a surface or a direction upwards.\na: 2\nw: 3\nq: Which preposition is used in the sentence \"I come from Berlin\" in German?\nc: aus Berlin\nc: von Berlin\nc: bei Berlin\nc: nach Berlin\ne: \"aus\" is used to indicate origin or source, such as \"from\" or \"out of\" in English.\na: 0\nw: 3\nq: Complete the sentence with the correct preposition in German: \"He is waiting for his girlfriend\".\nc: für seine Freundin\nc: um seine Freundin\nc: auf seine Freundin\nc: zu seine Freundin\ne: \"auf\" is used with the verb \"warten\" (to wait) to mean \"for\" in English.\na: 2\nw: 3\nq: Choose the correct preposition for the sentence \"We are going on vacation\" in German.\nc: in den Urlaub\nc: an den Urlaub\nc: auf den Urlaub\nc: zu den Urlaub\ne: \"in\" is used with the accusative case to indicate a destination or a period of time, such as \"on\" vacation.\na: 0\nw: 3",
            "input: Generate a quiz titled \"Cooking Vocabulary\" for Italian speakers learning English.",
            "output: Quiz Title: Cooking Vocabulary\nDuration: 10\nPassing Score: 80\nq: Come si dice \"friggere\" in inglese?\nc: Boil\nc: Bake\nc: Fry\nc: Grill\ne: \"Fry\" significa \"friggere\" in inglese.\na: 2\nw: 2\nq: Qual è la traduzione di \"mescolare\" in inglese?\nc: Mix\nc: Blend\nc: Stir\nc: Beat\ne: \"Stir\" significa \"mescolare\" in inglese.\na: 2\nw: 2\nq: Come si traduce \"pentola\" in inglese?\nc: Pan\nc: Pot\nc: Kettle\nc: Bowl\ne: \"Pot\" significa \"pentola\" in inglese.\na: 1\nw: 3\nq: Qual è la traduzione di \"affettare\" in inglese?\nc: Cut\nc: Chop\nc: Slice\nc: Dice\ne: \"Slice\" significa \"affettare\" in inglese.\na: 2\nw: 2\nq: Come si dice \"grattugiare\" in inglese?\nc: Grind\nc: Shred\nc: Mince\nc: Grate\ne: \"Grate\" significa \"grattugiare\" in inglese.\na: 3\nw: 2",
            f"input: Generate a quiz about {learning_language} {request.data['title']} for {home_language} speakers learning {request.data['language']} title it appropriately. Passing score must be an integer not a percent, same with the time just an integer amount of minutes. Follow the examples given exactly in that format. In addition please make sure if a quiz is made all the questions ande explanations are made {home_language} and all the answers made in {request.data['language']}",
            "output: ",
        ]

        response = model.generate_content(prompt_parts)

        generated_text = response.text.strip()

        quiz_data = self.parse_generated_questions(generated_text)
        
        quiz = Quiz.objects.create(
            user=self.request.user,
            title=quiz_data.get("title"),
            duration=quiz_data.get("duration"),
            passing_score=quiz_data.get("passing_score"),
            language_id=request.data["language"],
        )
        quiz.save()

        questions_data = quiz_data.get("questions", [])
        for question_data in questions_data:
            serializer = QuestionSerializer(data=question_data)
            serializer.is_valid(raise_exception=True)
            question = serializer.save(quiz=quiz)

        quiz_serializer = QuizSerializer(quiz)
        return Response(quiz_serializer.data, status=status.HTTP_201_CREATED)

    def parse_generated_questions(self, text):
        questions_data = []
        lines = text.split("\n")
        title = ""
        duration = 0
        passing_score = 0
        question_data = {}
        for line in lines:
            if line.startswith("Quiz Title:"):
                title = line.split(":")[1].strip()
            elif line.startswith("Duration:"):
                duration = int(line.split(":")[1].strip())
            elif line.startswith("Passing Score:"):
                passing_score_str = line.split(":")[1].strip()
                passing_score = int(passing_score_str)
            elif line.startswith("q:"):
                if question_data:
                    questions_data.append(question_data)
                    question_data = {}
                question_data["text"] = line.split(":")[1].strip()
                question_data["choices"] = []
                question_data["explanations"] = []
            elif line.startswith("c"):
                question_data["choices"].append(line.split(":")[1].strip())
            elif line.startswith("e"):
                question_data["explanations"].append(line.split(":")[1].strip())
            elif line.startswith("a:"):
                question_data["answer"] = int(line.split(":")[1].strip())
            elif line.startswith("w:"):
                question_data["worth"] = int(line.split(":")[1].strip())

        if question_data:
            questions_data.append(question_data)

        return {
            "title": title,
            "duration": duration,
            "passing_score": passing_score,
            "questions": questions_data,
        }
class QuizListCreateView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    serializer_class = QuizSerializer

    def get_queryset(self):
        user = self.request.user
        return Quiz.objects.filter(user=user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class QuizRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    queryset = Quiz.objects.all()
    serializer_class = QuizSerializer

class QuizQuestionsView(generics.ListAPIView):
    serializer_class = QuestionSerializer

    def get_queryset(self):
        quiz_id = self.kwargs["quiz_id"]
        return Question.objects.filter(quiz_id=quiz_id)

class QuizAttemptView(generics.CreateAPIView):
    serializer_class = AttemptSerializer
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        quiz_id = request.data.get("quiz")
        user_answers = request.data.get("user_answers")

        quiz = Quiz.objects.get(id=quiz_id)
        user = request.user

        total_score = 0
        max_score = 0
        result = []

        for question in quiz.question_set.all():
            user_answer = user_answers.get(str(question.id))
            max_score += question.worth
            if question.answer == user_answer:
                total_score += question.worth
            result.append({
                'question': question.text,
                'user_answer_index': user_answer,
                'user_answer': question.choices[user_answer] if user_answer is not None and user_answer < len(question.choices) else None,
                'correct_answer_index': question.answer,
                'correct_answer': question.choices[question.answer] if question.answer < len(question.choices) else None,
                'explanation': question.explanations[question.answer] if question.explanations and question.answer < len(question.explanations) else None,
            })

        score = (total_score / max_score) * 100
        attempt = Attempt.objects.create(user=user, quiz=quiz, score=score)
        serializer = self.get_serializer(attempt)

        return Response({
            'attempt': serializer.data,
            'result': result,
        }, status=status.HTTP_201_CREATED)

### backend/aiLingo/quizzes/migrations/0004_quiz_user_alter_question_answer.py ###
# Generated by Django 4.2.11 on 2024-04-04 00:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("quizzes", "0003_alter_question_choices_alter_question_text"),
    ]

    operations = [
        migrations.AddField(
            model_name="quiz",
            name="user",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="question",
            name="answer",
            field=models.TextField(),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0009_question_worth.py ###
# Generated by Django 4.2.11 on 2024-04-04 23:37

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("quizzes", "0008_alter_quiz_user"),
    ]

    operations = [
        migrations.AddField(
            model_name="question",
            name="worth",
            field=models.IntegerField(default=1),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0002_initial.py ###
# Generated by Django 4.2.11 on 2024-04-02 21:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("quizzes", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="attempt",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0007_remove_question_explanation_question_explanations_and_more.py ###
# Generated by Django 4.2.11 on 2024-04-04 05:55

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("quizzes", "0006_question_explanation"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="question",
            name="explanation",
        ),
        migrations.AddField(
            model_name="question",
            name="explanations",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="answer",
            field=models.IntegerField(),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0005_alter_quiz_user.py ###
# Generated by Django 4.2.11 on 2024-04-04 05:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("quizzes", "0004_quiz_user_alter_question_answer"),
    ]

    operations = [
        migrations.AlterField(
            model_name="quiz",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0008_alter_quiz_user.py ###
# Generated by Django 4.2.11 on 2024-04-04 20:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("quizzes", "0007_remove_question_explanation_question_explanations_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="quiz",
            name="user",
            field=models.ForeignKey(
                default=1,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0003_alter_question_choices_alter_question_text.py ###
# Generated by Django 4.2.11 on 2024-04-02 23:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("quizzes", "0002_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="question",
            name="choices",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="text",
            field=models.TextField(),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0006_question_explanation.py ###
# Generated by Django 4.2.11 on 2024-04-04 05:34

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("quizzes", "0005_alter_quiz_user"),
    ]

    operations = [
        migrations.AddField(
            model_name="question",
            name="explanation",
            field=models.TextField(blank=True, null=True),
        ),
    ]


### backend/aiLingo/quizzes/migrations/0010_alter_question_choices.py ###
# Generated by Django 4.2.11 on 2024-04-07 00:13

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('quizzes', '0009_question_worth'),
    ]

    operations = [
        migrations.AlterField(
            model_name='question',
            name='choices',
            field=models.JSONField(default='old'),
            preserve_default=False,
        ),
    ]


### backend/aiLingo/quizzes/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-02 21:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("languages", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("duration", models.IntegerField()),
                ("passing_score", models.IntegerField()),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="languages.language",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.CharField(max_length=255)),
                ("choices", models.JSONField()),
                ("answer", models.CharField(max_length=255)),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="quizzes.quiz"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("score", models.IntegerField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="quizzes.quiz"
                    ),
                ),
            ],
        ),
    ]


### backend/aiLingo/analytics/models.py ###
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class UserAnalytics(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    language_progress = models.JSONField(default=dict)
    quiz_analytics = models.JSONField(default=dict)
    chat_analytics = models.JSONField(default=dict)

    def update_quiz_analytics(self, language, score, topic_scores):
        if language.name not in self.quiz_analytics:
            self.quiz_analytics[language.name] = {
                'total_quizzes': 0,
                'total_score': 0,
                'topic_scores': {},
            }

        self.quiz_analytics[language.name]['total_quizzes'] += 1
        self.quiz_analytics[language.name]['total_score'] += score

        for topic, score in topic_scores.items():
            if topic not in self.quiz_analytics[language.name]['topic_scores']:
                self.quiz_analytics[language.name]['topic_scores'][topic] = 0
            self.quiz_analytics[language.name]['topic_scores'][topic] += score

        self.calculate_completion_percentage(language.name)
        self.save()

    def update_chat_analytics(self, language, chat_score, topic_scores):
        if language.name not in self.chat_analytics:
            self.chat_analytics[language.name] = {
                'total_chats': 0,
                'total_score': 0,
                'topic_scores': {},
            }

        self.chat_analytics[language.name]['total_chats'] += 1
        self.chat_analytics[language.name]['total_score'] += chat_score

        for topic, score in topic_scores.items():
            if topic not in self.chat_analytics[language.name]['topic_scores']:
                self.chat_analytics[language.name]['topic_scores'][topic] = 0
            self.chat_analytics[language.name]['topic_scores'][topic] += score

        self.calculate_completion_percentage(language.name)
        self.save()

    def calculate_completion_percentage(self, language_name):
        if language_name not in self.language_progress:
            self.language_progress[language_name] = {
                'total_quizzes': 0,
                'total_chats': 0,
                'total_score': 0,
                'completion_percentage': 0,
            }

        self.language_progress[language_name]['total_quizzes'] = self.quiz_analytics.get(language_name, {}).get('total_quizzes', 0)
        self.language_progress[language_name]['total_chats'] = self.chat_analytics.get(language_name, {}).get('total_chats', 0)
        self.language_progress[language_name]['total_score'] = (
            self.quiz_analytics.get(language_name, {}).get('total_score', 0) +
            self.chat_analytics.get(language_name, {}).get('total_score', 0)
        )

        total_activities = self.language_progress[language_name]['total_quizzes'] + self.language_progress[language_name]['total_chats']
        if total_activities > 0:
            self.language_progress[language_name]['completion_percentage'] = (
                self.language_progress[language_name]['total_score'] / total_activities
            )
        else:
            self.language_progress[language_name]['completion_percentage'] = 0

### backend/aiLingo/analytics/serializers.py ###
from rest_framework import serializers
from .models import UserAnalytics

class UserAnalyticsSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserAnalytics
        fields = ['user', 'language_progress', 'quiz_analytics', 'chat_analytics']

### backend/aiLingo/analytics/apps.py ###
from django.apps import AppConfig


class AnalyticsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "analytics"


### backend/aiLingo/analytics/admin.py ###
from django.contrib import admin

# Register your models here.


### backend/aiLingo/analytics/tests.py ###
from django.test import TestCase

# Create your tests here.


### backend/aiLingo/analytics/urls.py ###
from django.urls import path
from .views import UserAnalyticsView

urlpatterns = [
    path("user-analytics/", UserAnalyticsView.as_view(), name="analytics"),
]


### backend/aiLingo/analytics/views.py ###
from rest_framework import generics
from .models import UserAnalytics
from .serializers import UserAnalyticsSerializer
from rest_framework.permissions import IsAuthenticated

class UserAnalyticsView(generics.RetrieveAPIView):
    serializer_class = UserAnalyticsSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        user = self.request.user
        obj, _ = UserAnalytics.objects.get_or_create(user=user)
        return obj

### backend/aiLingo/analytics/migrations/0002_useranalytics_delete_analytics.py ###
# Generated by Django 4.2.11 on 2024-04-06 02:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('analytics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_progress', models.JSONField(default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='Analytics',
        ),
    ]


### backend/aiLingo/analytics/migrations/0003_useranalytics_chat_analytics_and_more.py ###
# Generated by Django 4.2.11 on 2024-04-06 03:15

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('analytics', '0002_useranalytics_delete_analytics'),
    ]

    operations = [
        migrations.AddField(
            model_name='useranalytics',
            name='chat_analytics',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='useranalytics',
            name='quiz_analytics',
            field=models.JSONField(default=dict),
        ),
    ]


### backend/aiLingo/analytics/migrations/0001_initial.py ###
# Generated by Django 4.2.11 on 2024-04-04 20:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Analytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


### frontend/ailingo/postcss.config.mjs ###
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


### frontend/ailingo/next.config.mjs ###
/** @type {import('next').NextConfig} */
const nextConfig = {
    typescript: {
        ignoreBuildErrors: true,
      },
//disaslbe eslint

};
export default nextConfig;


### frontend/ailingo/next-env.d.ts ###
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


### frontend/ailingo/README.md ###
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.


### frontend/ailingo/tailwind.config.ts ###
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
          primary: '#007bff',
          secondary: '#6c757d',
          light: '#f8f9fa',
          dark: '#343a40',
          'dark-secondary': '#495057',
  
      },
    },
  },
  plugins: [],
};
export default config;


### frontend/ailingo/.gitignore ###
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


### frontend/ailingo/package.json ###
{
  "name": "ailingo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prebuild": "tsc --noEmit"    
  },
  "dependencies": {
    "axios": "^1.6.8",
    "next": "^14.2.3",
    "next-auth": "^4.24.7",
    "react": "^18",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18",
    "react-markdown": "^9.0.1",
    "remark-gfm": "^4.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


### frontend/ailingo/.env ###
NEXT_PUBLIC_API_BASE_URL=https://bold-ardath-ailingo-8339d7ad.koyeb.app/api
# NEXT_PUBLIC_API_BASE_URL=http://localhost:8000/api
NEXTAUTH_SECRET=secret-key

### frontend/ailingo/tsconfig.json ###
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "skipLibCheck": true,
    "noEmit": true,
    "noEmitOnError": false,
    "allowJs": true,
    "checkJs": false,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "strict": false,
    "noImplicitAny": false,
    "noImplicitThis": false,
    "strictNullChecks": false,
    "strictFunctionTypes": false,
    "strictPropertyInitialization": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "allowUnreachableCode": true,
    "allowUnusedLabels": true,
    "noImplicitReturns": false,
    "noFallthroughCasesInSwitch": false
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/app/context/AuthProvider."],
  "exclude": ["node_modules"]
}

### frontend/ailingo/public/vercel.svg ###
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>

### frontend/ailingo/public/next.svg ###
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

### frontend/ailingo/src/types/analytics.ts ###
export interface Analytics {
    [key: string]: number;
  }

### frontend/ailingo/src/types/language.ts ###
export interface Language {
    id: number;
    name: string;
    description: string;
  }

### frontend/ailingo/src/types/lesson.ts ###
export interface Lesson {
    id: number;
    title: string;
    description: string;
    content: string;
  }

### frontend/ailingo/src/types/index.ts ###
export * from './language';
export * from './lesson';
export * from './quiz';
export * from './analytics';

### frontend/ailingo/src/types/quiz.ts ###
export interface Question {
  id: number;
  text: string;
  choices: string[];
  correctAnswer: string;
}
  export interface Quiz {
    id: number;
    title: string;
    description: string;
    questions: Question[];
  }

### frontend/ailingo/src/app/layout.tsx ###
import Navbar from "../components/Navbar";
import { Inter } from "next/font/google";
import { Metadata } from "next";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "aiLingo",
  description: "ai Language Learning",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link
          href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
          rel="stylesheet"
        />
      </head>
      <body className={inter.className}>
        <Navbar />
        <main>{children}</main>
      </body>
    </html>
  );
}


### frontend/ailingo/src/app/page.tsx ###
import Image from "next/image";
import Link from "next/link";

export default function Home() {
  return (
    <main className="w-screen h-screen relative">
      <div
        className="flex items-center w-full h-full bg-cover bg-center relative"
        style={{ backgroundImage: "url(/homebg.jpg)" }}
      >
        <div
          className="pl-20 md:pl-40 pb-56 md:pb-20 flex flex-col gap-5 z-[10] max-w-[750px]"
          style={{ opacity: 0.9 }}
        >
          <span className="text-[55px] font-semibold text-transparent bg-clip-text bg-gradient-to-r from-blue-300 to-blue-600">
            {" "}
            Language Learning
          </span>
          <h1 className="text-[50px] text-white font-semibold opacity-100">
            made easy
          </h1>
          <p className="text-[17px] text-gray-200 hidden md:block opacity-100">
            {/*change description here*/}
            aiLingo offers a personal experience, interactive activities, and
            cultural immersion for enhanced language learning.
          </p>

          <div style={{ marginTop: "1 em" }}>
            <Link href="/register">
              <button className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
                Get Started
              </button>
            </Link>
          </div>
        </div>
      </div>

      <div className="bg-gray-900 flex items-center justify-between w-full h-full bg-cover bg-center relative">
        <div
          className="pl-20 md:pl-40 pb-56 md:pb-20 flex gap-5 z-[10] max-w-[750px]"
          style={{ opacity: 0.9 }}
        >
          <div className="flex-grow">
            <h1 className="text-[50px] text-white font-semibold opacity-100">
              Who we are
            </h1>
            <p className="text-[17px] text-gray-200 hidden md:block opacity-100">
              {/*change description here*/}
              aiLingo is an AI-driven language learning platform that provides
              users with customized lessons, instant feedback, and cultural
              immersion for learners of all proficiency levels. This program
              aims to counter traditional language education by embracing a more
              personalized experience, along with interactive and engaging
              lessons, allowing users to reach their linguistic potential. To
              generate income, the program will have an optional paid premium
              membership allowing access to better AI models and extra features
              without diminishing the quality and user experience.
            </p>
          </div>
        </div>
        <div
          className="flex justify-center items-center"
          style={{
            marginRight: "100px",
            marginBottom: "100px",
            marginLeft: "60px",
          }}
        >
          {/* Adjust the margin-right value as needed */}
          <Image
            src="/computer.png" // Replace image here
            alt="Image Description"
            width={250}
            height={250}
          />
        </div>
      </div>
    </main>
  );
}


### frontend/ailingo/src/app/globals.css ###
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}


### frontend/ailingo/src/app/providers.tsx ###
'use client';

import { SessionProvider } from 'next-auth/react';

export function Providers({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}

### frontend/ailingo/src/app/chat/page.tsx ###
'use client';

import { useAuth } from '../../lib/useAuth';
import { ChatInterface } from '../../components/ChatInterface';

export default function Chat() {
  const user = useAuth();

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">Chat</h1>
      <ChatInterface />
    </div>
  );
}

### frontend/ailingo/src/app/languages/page.tsx ###
"use client";

import { useAuth } from "../../lib/useAuth";
import { useEffect, useState } from "react";
import { getLanguages } from "../../lib/api";
import { LanguageList } from "../../components/LanguageList";

export default function Languages() {
  const user = useAuth();
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
      } catch (error) {
        console.error("Failed to fetch languages", error);
      }
    };

    if (user) {
      fetchLanguages();
    }
  }, [user]);

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-2xl font-bold">Loading...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Languages</h1>
      <div className="bg-white rounded-lg shadow-lg p-8">
        <LanguageList languages={languages} />
      </div>
    </div>
  );
}


### frontend/ailingo/src/app/dashboard/page.tsx ###
"use client";

import { useAuth } from "../../lib/useAuth";
import Link from "next/link";
import { useEffect, useState } from "react";
import { getQuizzes } from "../../lib/api";

export default function Dashboard() {
  const user = useAuth();
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        const data = await getQuizzes();
        setQuizzes(data);
      } catch (error) {
        console.error("Failed to fetch quizzes", error);
      }
    };

    if (user) {
      fetchQuizzes();
    }
  }, [user]);

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-2xl font-bold">Loading...</div>
      </div>
    );
  }

  const lastThreeQuizzes = quizzes.slice(-3).reverse();

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Dashboard</h1>
      <p className="text-xl mb-8">Welcome, {user.name}!</p>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div className="bg-blue-500 text-white rounded-lg shadow-lg p-8">
          <h2 className="text-2xl font-bold mb-4">Quizzes</h2>
          <p className="mb-4">Test your language skills with quizzes.</p>
          <Link href="/quizzes">
            <button className="bg-white text-blue-500 font-bold py-2 px-4 rounded">
              Go to Quizzes
            </button>
          </Link>
        </div>

        <div className="bg-green-500 text-white rounded-lg shadow-lg p-8">
          <h2 className="text-2xl font-bold mb-4">Lessons</h2>
          <p className="mb-4">Explore and learn new languages.</p>
          <Link href="/lessons">
            <button className="bg-white text-green-500 font-bold py-2 px-4 rounded">
              Go to Lessons
            </button>
          </Link>
        </div>

        <div className="bg-yellow-500 text-white rounded-lg shadow-lg p-8">
          <h2 className="text-2xl font-bold mb-4">Chat</h2>
          <p className="mb-4">Practice conversational skills with chat.</p>
          <Link href="/chat">
            <button className="bg-white text-yellow-500 font-bold py-2 px-4 rounded">
              Go to Chat
            </button>
          </Link>
        </div>
      </div>

      {lastThreeQuizzes.length > 0 && (
        <div className="mt-8">
          <h2 className="text-2xl font-bold mb-4">
            Recently Attempted Quizzes
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {lastThreeQuizzes.map((quiz) => (
              <div
                key={quiz.id}
                className="bg-blue-500 text-white rounded-lg shadow-lg p-4"
              >
                <p className="text-lg mb-2">{quiz.title}</p>
                <Link href={`/quizzes/${quiz.id}`}>
                  <button className="bg-white text-blue-500 font-bold py-1 px-2 rounded">
                    Resume Quiz
                  </button>
                </Link>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}


### frontend/ailingo/src/app/register/page.tsx ###
// frontend/ailingo/src/app/register/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { registerUser, getLanguages } from "../../lib/api";

export default function Register() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [homeLanguage, setHomeLanguage] = useState("");
  const [error, setError] = useState("");
  const [languages, setLanguages] = useState([]);
  const router = useRouter();

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
      } catch (error) {
        console.error("Failed to fetch languages", error);
      }
    };

    fetchLanguages();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
  
    try {
      const data = await registerUser(name, email, password, homeLanguage);
      localStorage.setItem("refresh_token", data.refresh);
      localStorage.setItem("access_token", data.access);
      localStorage.setItem("user", JSON.stringify(data.user));
      router.push("/dashboard");
      // Pause for .5 seconds to allow the router to finish the push
      await new Promise((resolve) => setTimeout(resolve, 100));
      window.location.reload();
    } catch (error) {
      setError("An error occurred during registration. Please try again.");
    }
  };
  return (
    <div className="max-w-md mx-auto mt-8">
      <h1 className="text-2xl font-bold mb-4">Register</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="name" className="block mb-1">
            Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <div>
          <label htmlFor="email" className="block mb-1">
            Email
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <div>
          <label htmlFor="password" className="block mb-1">
            Password
          </label>
          <input
            type="password"
            id="password"
            name="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <div>
          <label htmlFor="homeLanguage" className="block mb-1">
            Home Language
          </label>
          <select
            id="homeLanguage"
            name="homeLanguage"
            value={homeLanguage}
            onChange={(e) => setHomeLanguage(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          >
            <option value="">Select your home language</option>
            {languages.map((language) => (
              <option key={language.id} value={language.id}>
                {language.name}
              </option>
            ))}
          </select>
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 text-white px-4 py-2 rounded"
        >
          Register
        </button>
      </form>
      <p className="mt-4">
        Already have an account?{" "}
        <Link href="/login" className="text-blue-500 hover:underline">
          Login
        </Link>
      </p>
    </div>
  );
}

### frontend/ailingo/src/app/profile/page.tsx ###
// frontend/ailingo/src/app/profile/page.tsx
"use client";

import Image from "next/image";
import { useAuth } from "../../lib/useAuth";
import { useEffect, useState } from "react";
import { getUserDetails, getLanguages } from "../../lib/api";

export default function Profile() {
  const user = useAuth();
  const [homeLanguage, setHomeLanguage] = useState(null);
  const [languages, setLanguages] = useState([]);

  useEffect(() => {
    const fetchUserDetails = async () => {
      try {
        const data = await getUserDetails();
        setHomeLanguage(data.home_language);
      } catch (error) {
        console.error("Failed to fetch user details", error);
      }
    };

    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
      } catch (error) {
        console.error("Failed to fetch languages", error);
      }
    };

    if (user) {
      fetchUserDetails();
      fetchLanguages();
    }
  }, [user]);

  if (!user) {
    return <div>Loading...</div>;
  }

  const getHomeLanguageName = () => {
    const language = languages.find((lang) => lang.id === homeLanguage);
    return language ? language.name : "";
  };

  return (
    <div className="container mx-auto px-4 mt-8 max-w-md">
      <div className="bg-blue-500 text-white rounded-lg shadow-lg p-8 flex flex-col items-center">
        <h1 className="text-3xl font-bold mb-4">Profile</h1>

        <div className="rounded-full overflow-hidden border-2 border-white">
          <Image
            src="/cartoon-dog.png"
            alt="Profile Image"
            width={200}
            height={200}
          />
        </div>

        <div className="mt-8 text-center">
          <div className="mb-2">
            <span className="font-semibold">Name:</span>{" "}
            <span className="text-lg">{user.name}</span>
          </div>
          <div>
            <span className="font-semibold">Email:</span>{" "}
            <span className="text-lg">{user.email}</span>
          </div>
          {homeLanguage && (
            <div className="mb-2">
              <span className="font-semibold">Home Language:</span>{" "}
              <span className="text-lg">{getHomeLanguageName()}</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

### frontend/ailingo/src/app/lessons/page.tsx ###
// 'use client';

import exp from "constants";

// import { useAuth } from '../../lib/useAuth';
// import { useEffect, useState } from 'react';
// import { getLessons } from '../../lib/api';
// import { LessonList } from '../../components/LessonList';

// export default function Lessons() {
//   const user = useAuth();
//   const [lessons, setLessons] = useState([]);

//   useEffect(() => {
//     const fetchLessons = async () => {
//       try {
//         const data = await getLessons();
//         setLessons(data);
//       } catch (error) {
//         console.error('Failed to fetch lessons', error);
//       }
//     };

//     if (user) {
//       fetchLessons();
//     }
//   }, [user]);

//   if (!user) {
//     return <div>Loading...</div>;
//   }

//   return (
//     <div>
//       <h1 className="text-2xl font-bold mb-4">Lessons</h1>
//       <LessonList lessons={lessons} />
//     </div>
//   );
// }

// Make a nice looking not implemented page
export default function Lessons() {
  return (
    <div className="flex items-center justify-center h-screen">
      <h1 className="text-4xl font-bold">Not implemented yet</h1>
    </div>
  );
}

### frontend/ailingo/src/app/quizzes/page.tsx ###
'use client';

import { useAuth } from '../../lib/useAuth';
import { useEffect, useState } from 'react';
import { getQuizzes } from '../../lib/api';
import { QuizList } from '../../components/QuizList';

export default function Quizzes() {
  const user = useAuth();
  const [quizzes, setQuizzes] = useState([]);

  useEffect(() => {
    const fetchQuizzes = async () => {
      try {
        const data = await getQuizzes();
        setQuizzes(data);
      } catch (error) {
        console.error('Failed to fetch quizzes', error);
      }
    };

    if (user) {
      fetchQuizzes();
    }
  }, [user]);

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-2xl font-bold">Loading...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Quizzes</h1>
      <div className="bg-white rounded-lg shadow-lg p-8">
        <QuizList quizzes={quizzes} />
      </div>
    </div>
  );
}

### frontend/ailingo/src/app/quizzes/[id]/page.tsx ###
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { getQuizById } from "../../../lib/api";
import { QuizAttempt } from "../../../components/QuizAttempt";

export default function QuizPage({ params }: { params: { id: string } }) {
  const [user, setUser] = useState(null);
  const [quiz, setQuiz] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    } else {
      router.push("/login");
    }
  }, []);

  useEffect(() => {
    const fetchQuiz = async () => {
      try {
        const data = await getQuizById(params.id);
        setQuiz(data);
      } catch (error) {
        console.error("Failed to fetch quiz", error);
      }
    };

    if (user) {
      fetchQuiz();
    }
  }, [user, params.id]);

  if (!user || !quiz) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-2xl font-bold">Loading...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white text-black rounded-lg shadow-lg p-8">
        <h1 className=" text-4xl font-bold mb-8">{quiz.title}</h1>
        <QuizAttempt quiz={quiz} />
      </div>
    </div>
  );
}


### frontend/ailingo/src/app/quizzes/create/page.tsx ###
// src/app/quizzes/create/page.tsx
"use client";

import { useAuth } from "../../../lib/useAuth";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createQuiz, getLanguages } from "../../../lib/api";

export default function CreateQuiz() {
  const user = useAuth();
  const [title, setTitle] = useState("");
  const [language, setLanguage] = useState("");
  const [languages, setLanguages] = useState([]);
  const [error, setError] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchLanguages = async () => {
      try {
        const data = await getLanguages();
        setLanguages(data);
      } catch (error) {
        console.error("Failed to fetch languages:", error);
      }
    };

    fetchLanguages();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      await createQuiz({ title, language });
      router.push("/quizzes");
    } catch (error) {
      setError("An error occurred while creating the quiz. Please try again.");
    }
  };

  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div className="max-w-md mx-auto">
      <h1 className="text-2xl font-bold mb-4">Create Quiz</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="title" className="block mb-1">
            Title
          </label>
          <input
            type="text"
            id="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <div>
          <label htmlFor="language" className="block mb-1">
            Language
          </label>
          <select
            id="language"
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          >
            <option value="">Select Language</option>
            {languages.map((lang) => (
              <option key={lang.id} value={lang.id}>
                {lang.name}
              </option>
            ))}
          </select>
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 text-white px-4 py-2 rounded"
        >
          Create
        </button>
      </form>
    </div>
  );
}


### frontend/ailingo/src/app/login/page.tsx ###
"use client";

import { useRouter } from "next/navigation";
import { FormEvent, useState } from "react";
import axios from "axios";

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();

    try {
      const response = await axios.post(`${API_BASE_URL}/users/login/`, {
        email,
        password,
      });

      const { refresh, access, user } = response.data;

      if (access) {
        localStorage.setItem("refresh_token", refresh);
        localStorage.setItem("access_token", access);
        localStorage.setItem("user", JSON.stringify(user));
        router.push("/dashboard");
        // Pause for .5 seconds to allow the router to finish the push
        await new Promise((resolve) => setTimeout(resolve, 100));
        window.location.reload();
      } else {
        setError("Invalid email or password");
      }
    } catch (error) {
      if (error.response && error.response.status === 401) {
        localStorage.removeItem("refresh_token");
        localStorage.removeItem("access_token");
        localStorage.removeItem("user");
        setError("Session expired. Please login again.");
      } else {
        setError("An error occurred during login");
      }
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8">
      <h1 className="text-2xl font-bold mb-4">Login</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="email" className="block mb-1">
            Email
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <div>
          <label htmlFor="password" className="block mb-1">
            Password
          </label>
          <input
            type="password"
            id="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-full px-3 py-2 border border-gray-300 rounded text-black"
          />
        </div>
        <button
          type="submit"
          className="w-full bg-blue-500 text-white px-4 py-2 rounded"
        >
          Login
        </button>
      </form>
    </div>
  );
}


### frontend/ailingo/src/app/analytics/page.tsx ###
export default function Analytics() {
  return (
    <div className="flex items-center justify-center h-screen">
      <h1 className="text-4xl font-bold">Not implemented yet</h1>
    </div>
  );
}

### frontend/ailingo/src/components/Navbar.tsx ###
// frontend/ailingo/src/components/Navbar.tsx
"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { getUserDetails } from "../lib/api";

export default function Navbar() {
  const router = useRouter();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUserDetails = async () => {
      const accessToken = localStorage.getItem("access_token");
      if (accessToken) {
        try {
          const userDetails = await getUserDetails();
          setUser(userDetails);
        } catch (error) {
          console.error("Failed to fetch user details:", error);
          localStorage.removeItem("access_token");
          localStorage.removeItem("refresh_token");
          router.push("/login");
        }
      }
    };

    fetchUserDetails();
  }, []);

  useEffect(() => {
    const handleStorageChange = () => {
      const accessToken = localStorage.getItem("access_token");
      if (accessToken) {
        getUserDetails();
      } else {
        setUser(null);
      }
    };

    window.addEventListener("storage", handleStorageChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("refresh_token");
    localStorage.removeItem("access_token");
    setUser(null);
    router.push("/login");
  };

  return (
    <nav className="bg-blue-900 text-white p-6">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/" className="text-white font-bold text-xl">
          aiLingo
        </Link>
        <ul className="flex space-x-4">
          {user ? (
            <>
              <li>
                <Link href="/dashboard" className="text-blue-200 hover:text-white">
                  Dashboard
                </Link>
              </li>
              <li>
                <Link href="/profile" className="text-blue-200 hover:text-white">
                  Profile
                </Link>
              </li>
              <li>
                <Link href="/languages" className="text-blue-200 hover:text-white">
                  Languages
                </Link>
              </li>
              <li>
                <Link href="/lessons" className="text-blue-200 hover:text-white">
                  Lessons
                </Link>
              </li>
              <li>
                <Link href="/quizzes" className="text-blue-200 hover:text-white">
                  Quizzes
                </Link>
              </li>
              <li>
                <Link href="/quizzes/create" className="text-blue-200 hover:text-white">
                  Create Quiz
                </Link>
              </li>
              <li>
                <Link href="/chat" className="text-blue-200 hover:text-white">
                  Chat
                </Link>
              </li>
              <li>
                <Link href="/analytics" className="text-blue-200 hover:text-white">
                  Analytics
                </Link>
              </li>
              <li>
                <button onClick={handleLogout} className="text-blue-200 hover:text-white">
                  Logout
                </button>
              </li>
            </>
          ) : (
            <>
              <li>
                <Link href="/login" className="text-blue-200 hover:text-white">
                  Login
                </Link>
              </li>
              <li>
                <Link href="/register" className="text-blue-200 hover:text-white">
                  Register
                </Link>
              </li>
            </>
          )}
        </ul>
      </div>
    </nav>
  );
}

### frontend/ailingo/src/components/ChatInterface.tsx ###
// src/components/ChatInterface.tsx
'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { createConversation, sendMessage, getConversations, getMessages, getLanguages } from '../lib/api';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

export function ChatInterface() {
  const [conversations, setConversations] = useState([]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [languages, setLanguages] = useState([]);
  const [newConversationLanguage, setNewConversationLanguage] = useState('');
  const [newConversationTitle, setNewConversationTitle] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const router = useRouter();
  const chatContainerRef = useRef(null);

  useEffect(() => {
    setIsLoading(true);
    Promise.all([fetchConversations(), fetchLanguages()]).finally(() => {
      setIsLoading(false);
    });
  }, []);

  useEffect(() => {
    if (selectedConversation) {
      fetchMessages();
    }
  }, [selectedConversation]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const fetchConversations = async () => {
    try {
      const data = await getConversations();
      setConversations(data);
    } catch (error) {
      console.error('Failed to fetch conversations:', error);
    }
  };

  const fetchLanguages = async () => {
    try {
      const data = await getLanguages();
      setLanguages(data);
    } catch (error) {
      console.error('Failed to fetch languages:', error);
    }
  };

  const fetchMessages = async () => {
    try {
      const data = await getMessages(selectedConversation.id);
      setMessages(data);
    } catch (error) {
      console.error('Failed to fetch messages:', error);
    }
  };

  const handleConversationClick = (conversation) => {
    setSelectedConversation(conversation);
  };

  const handleSendMessage = async () => {
    if (inputMessage.trim() !== '' && !isSending) {
      setIsSending(true);
      try {
        const newMessage = {
          id: Date.now().toString(),
          conversation: selectedConversation.id,
          sender: 'user',
          content: inputMessage,
          timestamp: new Date().toISOString(),
        };

        setMessages((prevMessages) => [...prevMessages, newMessage]);
        setInputMessage('');

        const data = await sendMessage(selectedConversation.id, inputMessage);
        setMessages((prevMessages) => [...prevMessages, data]);
      } catch (error) {
        console.error('Failed to send message:', error);
      }

      setIsSending(false);
    }
  };

  const handleCreateConversation = async () => {
    if (!newConversationLanguage) {
      setErrorMessage('Please select a language.');
      return;
    }

    if (!newConversationTitle) {
      setErrorMessage('Please enter a conversation title.');
      return;
    }

    try {
      setErrorMessage('');
      const data = await createConversation(newConversationLanguage, newConversationTitle);
      setConversations([...conversations, data]);
      setSelectedConversation(data);
      setNewConversationLanguage('');
      setNewConversationTitle('');
    } catch (error) {
      console.error('Failed to create conversation:', error);
    }
  };

  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div className="flex">
      <div className="w-1/4 bg-gray-800 p-4 text-white">
        <h2 className="text-xl font-semibold mb-4">Conversations</h2>
        <ul>
          {conversations.map((conversation) => (
            <li
              key={conversation.id}
              className={`cursor-pointer mb-2 ${
                selectedConversation?.id === conversation.id ? 'font-bold text-blue-300' : ''
              }`}
              onClick={() => handleConversationClick(conversation)}
            >
              {conversation.title}
            </li>
          ))}
        </ul>
        <div className="mt-4">
          <h3 className="text-lg font-semibold mb-2">New Conversation</h3>
          {errorMessage && <p className="text-red-500 mb-2">{errorMessage}</p>}
          <select
            className="block w-full mb-2 bg-gray-700 text-white"
            value={newConversationLanguage}
            onChange={(e) => setNewConversationLanguage(e.target.value)}
          >
            <option value="">Select Language</option>
            {languages.map((language) => (
              <option key={language.id} value={language.id}>
                {language.name}
              </option>
            ))}
          </select>
          <input
            type="text"
            className="block w-full mb-2 bg-gray-700 text-white"
            placeholder="Conversation Title"
            value={newConversationTitle}
            onChange={(e) => setNewConversationTitle(e.target.value)}
          />
          <button
            className="bg-blue-600 text-white px-4 py-2 rounded-lg"
            onClick={handleCreateConversation}
          >
            Create Conversation
          </button>
        </div>
      </div>
      <div className="w-3/4 bg-gray-100 shadow-md rounded-lg p-4">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">
          {selectedConversation?.title || 'Select a conversation'}
        </h2>
        <div ref={chatContainerRef} className="h-64 overflow-y-auto mb-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`mb-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}
            >
              <span
                className={`inline-block px-3 py-2 rounded-lg ${
                  message.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-800'
                }`}
              >
                <ReactMarkdown
                  remarkPlugins={[remarkGfm]}
                  components={{
                    a: ({ node, ...props }) => <a {...props} className="text-blue-500 hover:underline" />,
                  }}
                >
                  {(message.content as string).replace(/\\n/g, '\n')}
                </ReactMarkdown>
              </span>
            </div>
          ))}
        </div>

        <div className="flex">
          <input
            type="text"
            className="flex-grow border border-gray-300 rounded-lg px-4 py-2 mr-2 text-black"
            placeholder="Type your message..."
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
          />
          <button
            className="bg-blue-600 text-white px-4 py-2 rounded-lg"
            onClick={handleSendMessage}
            disabled={!selectedConversation || isSending}
          >
            {isSending ? 'Sending...' : 'Send'}
          </button>
        </div>
      </div>
    </div>
  );
}


### frontend/ailingo/src/components/QuizList.tsx ###
import { Quiz } from '../types';
import Link from 'next/link';

type QuizListProps = {
  quizzes: Quiz[];
};

export function QuizList({ quizzes }: QuizListProps) {
  return (
    <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {quizzes.map((quiz) => (
        <li key={quiz.id} className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="p-6">
            <h2 className="text-2xl font-bold mb-4">
              <Link href={`/quizzes/${quiz.id}`} className="text-blue-600 hover:text-blue-800">
                {quiz.title}
              </Link>
            </h2>
            <p className="text-gray-600 mb-4">{quiz.description}</p>
            <Link href={`/quizzes/${quiz.id}`}>
              <button className="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600">
                Start Quiz
              </button>
            </Link>
          </div>
        </li>
      ))}
    </ul>
  );
}

### frontend/ailingo/src/components/LessonList.tsx ###
import { Lesson } from '../types';

type LessonListProps = {
  lessons: Lesson[];
};

export function LessonList({ lessons }: LessonListProps) {
  return (
    <div className="space-y-4">
      {lessons.map((lesson) => (
        <div key={lesson.id} className="bg-white shadow-md rounded-lg p-4">
          <h2 className="text-xl font-semibold mb-2">{lesson.title}</h2>
          <p className="text-gray-600">{lesson.description}</p>
        </div>
      ))}
    </div>
  );
}

### frontend/ailingo/src/components/QuizAttempt.tsx ###
// src/components/QuizAttempt.tsx

'use client';

import { Quiz, Question } from '../types';
import { useState, useEffect } from 'react';
import { getQuizQuestions, submitQuizAttempt } from '../lib/api';

type QuizAttemptProps = {
  quiz: Quiz;
};

export function QuizAttempt({ quiz }: QuizAttemptProps) {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<{ [key: number]: number }>({});
  const [score, setScore] = useState(0);
  const [result, setResult] = useState([]);
  const [showResult, setShowResult] = useState(false);
  const [questions, setQuestions] = useState<Question[]>([]);

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const data = await getQuizQuestions(quiz.id);
        setQuestions(data);
      } catch (error) {
        console.error('Failed to fetch questions:', error);
      }
    };
    fetchQuestions();
  }, [quiz.id]);

  const handleAnswerSelect = (questionId: number, answer: number) => {
    setSelectedAnswers((prevAnswers) => ({
      ...prevAnswers,
      [questionId]: answer,
    }));
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion((prevQuestion) => prevQuestion + 1);
    } else {
      handleSubmit();
    }
  };

  const handleSubmit = async () => {
    try {
      const attemptData = {
        quiz: quiz.id,
        user_answers: selectedAnswers,
      };
      const { attempt, result } = await submitQuizAttempt(attemptData);
      setScore(attempt.score);
      setResult(result);
      setShowResult(true);
    } catch (error) {
      console.error('Failed to submit quiz attempt:', error);
    }
  };

  const handleReset = () => {
    setCurrentQuestion(0);
    setSelectedAnswers({});
    setScore(0);
    setShowResult(false);
  };

  if (showResult) {
    return (
      <div className="bg-white shadow-lg rounded-lg p-8">
        <h2 className="text-3xl font-bold mb-6">Quiz Result</h2>
        <p className="text-xl mb-8">Your score: {score}%</p>
        <div className="space-y-6">
          {result.map((item, index) => (
            <div key={index} className="border border-gray-300 rounded-lg p-6">
              <p className="text-lg font-semibold mb-2">{item.question}</p>
              <p className="mb-2">Your Answer: {item.user_answer}</p>
              <p className="mb-2">Correct Answer: {item.correct_answer}</p>
              {item.explanation && (
                <p className="text-green-600">{item.explanation}</p>
              )}
            </div>
          ))}
        </div>
        <button
          onClick={handleReset}
          className="mt-8 bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700"
        >
          Retry Quiz
        </button>
      </div>
    );
  }

  const question = questions[currentQuestion];
  if (!question) {
    return <div className="text-xl font-semibold">Loading question...</div>;
  }

  return (
    <div className="bg-white shadow-lg rounded-lg p-8">
      <h2 className="text-3xl font-bold mb-6">{question.text}</h2>
      <div className="space-y-4">
        {question.choices.map((choice, index) => (
          <div key={index} className="flex items-center">
            <input
              type="radio"
              id={`answer-${question.id}-${index}`}
              className="form-radio h-5 w-5 text-blue-600"
              name={`answer-${question.id}`}
              value={index}
              checked={selectedAnswers[question.id] === index}
              onChange={() => handleAnswerSelect(question.id, index)}
            />
            <label htmlFor={`answer-${question.id}-${index}`} className="ml-3 text-lg">
              {choice}
            </label>
          </div>
        ))}
      </div>
      <button
        onClick={handleNext}
        className="mt-8 bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700"
      >
        {currentQuestion === questions.length - 1 ? 'Submit' : 'Next'}
      </button>
    </div>
  );
}

### frontend/ailingo/src/components/LanguageList.tsx ###
import { Language } from "../types";

type LanguageListProps = {
  languages: Language[];
};

export function LanguageList({ languages }: LanguageListProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {languages.map((language) => (
        <div
          key={language.id}
          className="bg-blue-500 shadow-md rounded-lg p-4 text-center"
        >
          <h2 className="text-xl font-semibold mb-2 text-white">
            {language.name}
          </h2>
          <p className="text-white">{language.description}</p>
        </div>
      ))}
    </div>
  );
}


### frontend/ailingo/src/components/AnalyticsChart.tsx ###
import { Analytics } from '../types';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

type AnalyticsChartProps = {
  data: Analytics;
};

export function AnalyticsChart({ data }: AnalyticsChartProps) {
  const chartData = {
    labels: Object.keys(data),
    datasets: [
      {
        label: 'Analytics',
        data: Object.values(data),
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
      },
    ],
  };

  const options = {
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-4">
      <h2 className="text-xl font-semibold mb-4">Analytics</h2>
      <Bar data={chartData} options={options} />
    </div>
  );
}

### frontend/ailingo/src/components/PrivateRoute.tsx ###
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

export default function PrivateRoute({ children }: { children: React.ReactNode }) {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    }
  }, [status, router]);

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  return <>{children}</>;
}

### frontend/ailingo/src/components/Navigation.tsx ###
"use client";

import Link from "next/link";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import { getUserDetails } from "../lib/api";

export default function Navbar() {
  const router = useRouter();
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUserDetails = async () => {
      const storedUser = localStorage.getItem("user");

      if (storedUser) {
        try {
          const parsedUser = JSON.parse(storedUser);
          const userDetails = await getUserDetails();
          setUser(userDetails);
        } catch (error) {
          console.error("Failed to fetch user details:", error);
          localStorage.removeItem("user");
          router.push("/login");
        }
      }
    };

    fetchUserDetails();
  }, [router]);

  useEffect(() => {
    const handleStorageChange = () => {
      const storedUser = localStorage.getItem("user");
      setUser(storedUser ? JSON.parse(storedUser) : null);
    };

    window.addEventListener("storage", handleStorageChange);

    return () => {
      window.removeEventListener("storage", handleStorageChange);
    };
  }, []);

  const handleLogout = () => {
    localStorage.removeItem("refresh_token");
    localStorage.removeItem("access_token");
    localStorage.removeItem("user");
    setUser(null);
    router.push("/login");
  };

  return (
    <nav className="bg-blue-900 text-white p-6">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/" className="text-white font-bold text-xl">
          aiLingo
        </Link>
        <ul className="flex space-x-4">
          {user ? (
            <>
              <li>
                <Link href="/dashboard" className="text-blue-200 hover:text-white">
                  Dashboard
                </Link>
              </li>
              <li>
                <Link href="/profile" className="text-blue-200 hover:text-white">
                  Profile
                </Link>
              </li>
              <li>
                <Link href="/languages" className="text-blue-200 hover:text-white">
                  Languages
                </Link>
              </li>
              <li>
                <Link href="/lessons" className="text-blue-200 hover:text-white">
                  Lessons
                </Link>
              </li>
              <li>
                <Link href="/quizzes" className="text-blue-200 hover:text-white">
                  Quizzes
                </Link>
              </li>
              <li>
                <Link href="/quizzes/create" className="text-blue-200 hover:text-white">
                  Create Quiz
                </Link>
              </li>
              <li>
                <Link href="/chat" className="text-blue-200 hover:text-white">
                  Chat
                </Link>
              </li>
              <li>
                <Link href="/analytics" className="text-blue-200 hover:text-white">
                  Analytics
                </Link>
              </li>
              <li>
                <button onClick={handleLogout} className="text-blue-200 hover:text-white">
                  Logout
                </button>
              </li>
            </>
          ) : (
            <>
              <li>
                <Link href="/login" className="text-blue-200 hover:text-white">
                  Login
                </Link>
              </li>
              <li>
                <Link href="/register" className="text-blue-200 hover:text-white">
                  Register
                </Link>
              </li>
            </>
          )}
        </ul>
      </div>
    </nav>
  );
}

### frontend/ailingo/src/lib/api.ts ###
import axios, { AxiosError } from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
  },
});


axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        const refreshToken = localStorage.getItem('refresh_token');
        const response = await axiosInstance.post('/users/refresh-token/', {
          refresh: refreshToken,
        });

        const { access } = response.data;
        localStorage.setItem('access_token', access);

        originalRequest.headers['Authorization'] = `Bearer ${access}`;
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('access_token');
        localStorage.removeItem('user');
        window.location.href = '/login';
      }
    }

    return Promise.reject(error);
  }
);



const handleError = (error: unknown) => {
  if (axios.isAxiosError(error)) {
    throw error.response?.data;
  }
  throw error;
};

export const login = async (email: string, password: string) => {
    try {
      const response = await axiosInstance.post('/users/login/', { email, password });
      return response.data;
    } catch (error) {
      handleError(error);
    }
  };

  export const registerUser = async (
    name: string,
    email: string,
    password: string,
    homeLanguage: string
  ) => {
    try {
      const response = await axiosInstance.post("/users/register/", {
        name,
        email,
        password,
        home_language: homeLanguage,
      });
      return response.data;
    } catch (error) {
      handleError(error);
    }
  };

  export const getUserDetails = async () => {
    try {
      const response = await axiosInstance.get("/users/profile/");
      return response.data;
    } catch (error) {
      handleError(error);
    }
  };
  
  export const getLanguages = async () => {
    try {
      const response = await axiosInstance.get("/languages/");
      return response.data;
    } catch (error) {
      handleError(error);
    }
};

export const getRecentQuizzes = async () => {
  try {
    const response = await axiosInstance.get("/quizzes/recent/");
    return response.data;
  } catch (error) {
    handleError(error);
  }
};
export const getLessons = async () => {
  try {
    const response = await axiosInstance.get('/lessons/');
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const getQuizzes = async () => {
  try {
    const response = await axiosInstance.get('/quizzes/');
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const getQuizById = async (id: string) => {
  try {
    const response = await axiosInstance.get(`/quizzes/${id}/`);
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const createQuiz = async (quizData: { title: string; language: string }) => {
  try {
    const response = await axiosInstance.post('/quizzes/create/', quizData);
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const getUserAnalytics = async (email: string) => {
  try {
    const response = await axiosInstance.get(`/analytics/user-analytics/`, {
      params: { email },
    });
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

// ...

export const getConversations = async () => {
  try {
    const response = await axiosInstance.get('/chat/conversations/');
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const createConversation = async (languageId: string, title: string) => {
  try {
    const accessToken = localStorage.getItem('access_token');
    const response = await axiosInstance.post(
      '/chat/conversations/',
      { language: languageId, title },
      {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const getMessages = async (conversationId: string) => {
  try {
    const response = await axiosInstance.get(`/chat/conversations/${conversationId}/messages/`);
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const sendMessage = async (conversationId: string, content: string) => {
  try {
    const response = await axiosInstance.post(`/chat/conversations/${conversationId}/messages/`, { content });
    return response.data;
  } catch (error) {
    handleError(error);
  }
};

export const getQuizQuestions = async (quizId: number) => {
  try {
    const response = await axiosInstance.get(`/quizzes/${quizId}/questions/`);
    return response.data;
  } catch (error) {
    handleError(error);
  }
};
export const submitQuizAttempt = async (attemptData: { quiz: number; user_answers: { [key: number]: number } }) => {
  try {
    const response = await axiosInstance.post('/quizzes/attempt/', attemptData);
    return response.data;
  } catch (error) {
    handleError(error);
  }
};





### frontend/ailingo/src/lib/useAuth.ts ###
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';

export const useAuth = () => {
  const [user, setUser] = useState(null);
  const router = useRouter();

  useEffect(() => {
    const storedUser = localStorage.getItem('user');

    if (storedUser) {
      setUser(JSON.parse(storedUser));
    } else {
      router.push('/login');
    }
  }, []);

  return user;
};

